# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.tao_java
#
# $Id: gnu.mpd 2179 2013-05-28 22:16:51Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.tao_java
DEPENDENCY_FILE  = .depend.tao_java

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)tao_java.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)tao_java

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)tao_java.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  BooleanSeqJC.cpp \
  CharSeqJC.cpp \
  DoubleSeqJC.cpp \
  FloatSeqJC.cpp \
  LongLongSeqJC.cpp \
  LongSeqJC.cpp \
  OctetSeqJC.cpp \
  ShortSeqJC.cpp \
  StringSeqJC.cpp \
  ULongLongSeqJC.cpp \
  ULongSeqJC.cpp \
  UShortSeqJC.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lidl2jni_runtime -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  tao_java.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG)../../java/idl2jni/runtime \
        $(RC_INCLUDE_FLAG)$(JAVA_HOME)/include \
        $(RC_INCLUDE_FLAG)$(JAVA_HOME)/include/$(JAVA_PLATFORM) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT)/tao
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/tao_java
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,idl2jni_runtime TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../lib $(if $(ARCH),../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),idl2jni_runtime TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(java),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(java),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../lib $(if $(ARCH),-L../../lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../../java/idl2jni/runtime -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(JAVA_PLATFORM) -I$(TAO_ROOT)/tao
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_JAVA_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo tao_java will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(java),1)
requires_disabled_macros += java
endif
require_warning:
	@echo tao_java will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += classes/CORBA/LongSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/LongSeqHolder.class: CORBA/LongSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/LongSeqHolder.java


GENERATED_DIRTY += classes/CORBA/LongSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/LongSeqHelper.class: CORBA/LongSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/LongSeqHelper.java


GENERATED_DIRTY += classes/CORBA/ULongLongSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ULongLongSeqHolder.class: CORBA/ULongLongSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ULongLongSeqHolder.java


GENERATED_DIRTY += classes/CORBA/ULongLongSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ULongLongSeqHelper.class: CORBA/ULongLongSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ULongLongSeqHelper.java


GENERATED_DIRTY += classes/CORBA/OctetSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/OctetSeqHolder.class: CORBA/OctetSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/OctetSeqHolder.java


GENERATED_DIRTY += classes/CORBA/OctetSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/OctetSeqHelper.class: CORBA/OctetSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/OctetSeqHelper.java


GENERATED_DIRTY += classes/CORBA/BooleanSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/BooleanSeqHolder.class: CORBA/BooleanSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/BooleanSeqHolder.java


GENERATED_DIRTY += classes/CORBA/BooleanSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/BooleanSeqHelper.class: CORBA/BooleanSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/BooleanSeqHelper.java


GENERATED_DIRTY += classes/CORBA/ShortSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ShortSeqHolder.class: CORBA/ShortSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ShortSeqHolder.java


GENERATED_DIRTY += classes/CORBA/ShortSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ShortSeqHelper.class: CORBA/ShortSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ShortSeqHelper.java


GENERATED_DIRTY += classes/CORBA/DoubleSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/DoubleSeqHolder.class: CORBA/DoubleSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/DoubleSeqHolder.java


GENERATED_DIRTY += classes/CORBA/DoubleSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/DoubleSeqHelper.class: CORBA/DoubleSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/DoubleSeqHelper.java


GENERATED_DIRTY += classes/CORBA/LongLongSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/LongLongSeqHolder.class: CORBA/LongLongSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/LongLongSeqHolder.java


GENERATED_DIRTY += classes/CORBA/LongLongSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/LongLongSeqHelper.class: CORBA/LongLongSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/LongLongSeqHelper.java


GENERATED_DIRTY += classes/CORBA/ULongSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ULongSeqHolder.class: CORBA/ULongSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ULongSeqHolder.java


GENERATED_DIRTY += classes/CORBA/ULongSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/ULongSeqHelper.class: CORBA/ULongSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/ULongSeqHelper.java


GENERATED_DIRTY += classes/CORBA/FloatSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/FloatSeqHolder.class: CORBA/FloatSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/FloatSeqHolder.java


GENERATED_DIRTY += classes/CORBA/FloatSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/FloatSeqHelper.class: CORBA/FloatSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/FloatSeqHelper.java


GENERATED_DIRTY += classes/CORBA/UShortSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/UShortSeqHolder.class: CORBA/UShortSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/UShortSeqHolder.java


GENERATED_DIRTY += classes/CORBA/UShortSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/UShortSeqHelper.class: CORBA/UShortSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/UShortSeqHelper.java


GENERATED_DIRTY += classes/CORBA/StringSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/StringSeqHolder.class: CORBA/StringSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/StringSeqHolder.java


GENERATED_DIRTY += classes/CORBA/StringSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/StringSeqHelper.class: CORBA/StringSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/StringSeqHelper.java


GENERATED_DIRTY += classes/CORBA/CharSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/CharSeqHolder.class: CORBA/CharSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/CharSeqHolder.java


GENERATED_DIRTY += classes/CORBA/CharSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/CORBA/CharSeqHelper.class: CORBA/CharSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../lib/i2jrt.jar CORBA/CharSeqHelper.java


DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += CORBA/BooleanSeqHolder.java CORBA/BooleanSeqHelper.java BooleanSeqJC.h BooleanSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/BooleanSeq.pidl" -nt "CORBA/BooleanSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/BooleanSeq.pidl" -nt "CORBA/BooleanSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/BooleanSeq.pidl" -nt "BooleanSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/BooleanSeq.pidl" -nt "BooleanSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/BooleanSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/BooleanSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "BooleanSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "BooleanSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/BooleanSeqHolder.java CORBA/BooleanSeqHelper.java BooleanSeqJC.h BooleanSeqJC.cpp: $(TAO_ROOT)/tao/BooleanSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/BooleanSeq.pidl


GENERATED_DIRTY += CORBA/CharSeqHolder.java CORBA/CharSeqHelper.java CharSeqJC.h CharSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/CharSeq.pidl" -nt "CORBA/CharSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/CharSeq.pidl" -nt "CORBA/CharSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/CharSeq.pidl" -nt "CharSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/CharSeq.pidl" -nt "CharSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/CharSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/CharSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CharSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CharSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/CharSeqHolder.java CORBA/CharSeqHelper.java CharSeqJC.h CharSeqJC.cpp: $(TAO_ROOT)/tao/CharSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/CharSeq.pidl


GENERATED_DIRTY += CORBA/DoubleSeqHolder.java CORBA/DoubleSeqHelper.java DoubleSeqJC.h DoubleSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/DoubleSeq.pidl" -nt "CORBA/DoubleSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/DoubleSeq.pidl" -nt "CORBA/DoubleSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/DoubleSeq.pidl" -nt "DoubleSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/DoubleSeq.pidl" -nt "DoubleSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/DoubleSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/DoubleSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "DoubleSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "DoubleSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/DoubleSeqHolder.java CORBA/DoubleSeqHelper.java DoubleSeqJC.h DoubleSeqJC.cpp: $(TAO_ROOT)/tao/DoubleSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/DoubleSeq.pidl


GENERATED_DIRTY += CORBA/FloatSeqHolder.java CORBA/FloatSeqHelper.java FloatSeqJC.h FloatSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/FloatSeq.pidl" -nt "CORBA/FloatSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/FloatSeq.pidl" -nt "CORBA/FloatSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/FloatSeq.pidl" -nt "FloatSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/FloatSeq.pidl" -nt "FloatSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/FloatSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/FloatSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "FloatSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "FloatSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/FloatSeqHolder.java CORBA/FloatSeqHelper.java FloatSeqJC.h FloatSeqJC.cpp: $(TAO_ROOT)/tao/FloatSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/FloatSeq.pidl


GENERATED_DIRTY += CORBA/LongLongSeqHolder.java CORBA/LongLongSeqHelper.java LongLongSeqJC.h LongLongSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/LongLongSeq.pidl" -nt "CORBA/LongLongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongLongSeq.pidl" -nt "CORBA/LongLongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongLongSeq.pidl" -nt "LongLongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongLongSeq.pidl" -nt "LongLongSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/LongLongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/LongLongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "LongLongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "LongLongSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/LongLongSeqHolder.java CORBA/LongLongSeqHelper.java LongLongSeqJC.h LongLongSeqJC.cpp: $(TAO_ROOT)/tao/LongLongSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/LongLongSeq.pidl


GENERATED_DIRTY += CORBA/LongSeqHolder.java CORBA/LongSeqHelper.java LongSeqJC.h LongSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/LongSeq.pidl" -nt "CORBA/LongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongSeq.pidl" -nt "CORBA/LongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongSeq.pidl" -nt "LongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/LongSeq.pidl" -nt "LongSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/LongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/LongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "LongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "LongSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/LongSeqHolder.java CORBA/LongSeqHelper.java LongSeqJC.h LongSeqJC.cpp: $(TAO_ROOT)/tao/LongSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/LongSeq.pidl


GENERATED_DIRTY += CORBA/OctetSeqHolder.java CORBA/OctetSeqHelper.java OctetSeqJC.h OctetSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/OctetSeq.pidl" -nt "CORBA/OctetSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/OctetSeq.pidl" -nt "CORBA/OctetSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/OctetSeq.pidl" -nt "OctetSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/OctetSeq.pidl" -nt "OctetSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/OctetSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/OctetSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "OctetSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "OctetSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/OctetSeqHolder.java CORBA/OctetSeqHelper.java OctetSeqJC.h OctetSeqJC.cpp: $(TAO_ROOT)/tao/OctetSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/OctetSeq.pidl


GENERATED_DIRTY += CORBA/ShortSeqHolder.java CORBA/ShortSeqHelper.java ShortSeqJC.h ShortSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/ShortSeq.pidl" -nt "CORBA/ShortSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ShortSeq.pidl" -nt "CORBA/ShortSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ShortSeq.pidl" -nt "ShortSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ShortSeq.pidl" -nt "ShortSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ShortSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ShortSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ShortSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ShortSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/ShortSeqHolder.java CORBA/ShortSeqHelper.java ShortSeqJC.h ShortSeqJC.cpp: $(TAO_ROOT)/tao/ShortSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/ShortSeq.pidl


GENERATED_DIRTY += CORBA/StringSeqHolder.java CORBA/StringSeqHelper.java StringSeqJC.h StringSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/StringSeq.pidl" -nt "CORBA/StringSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/StringSeq.pidl" -nt "CORBA/StringSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/StringSeq.pidl" -nt "StringSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/StringSeq.pidl" -nt "StringSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/StringSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/StringSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "StringSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "StringSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/StringSeqHolder.java CORBA/StringSeqHelper.java StringSeqJC.h StringSeqJC.cpp: $(TAO_ROOT)/tao/StringSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/StringSeq.pidl


GENERATED_DIRTY += CORBA/ULongLongSeqHolder.java CORBA/ULongLongSeqHelper.java ULongLongSeqJC.h ULongLongSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/ULongLongSeq.pidl" -nt "CORBA/ULongLongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongLongSeq.pidl" -nt "CORBA/ULongLongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongLongSeq.pidl" -nt "ULongLongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongLongSeq.pidl" -nt "ULongLongSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ULongLongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ULongLongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ULongLongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ULongLongSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/ULongLongSeqHolder.java CORBA/ULongLongSeqHelper.java ULongLongSeqJC.h ULongLongSeqJC.cpp: $(TAO_ROOT)/tao/ULongLongSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/ULongLongSeq.pidl


GENERATED_DIRTY += CORBA/ULongSeqHolder.java CORBA/ULongSeqHelper.java ULongSeqJC.h ULongSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/ULongSeq.pidl" -nt "CORBA/ULongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongSeq.pidl" -nt "CORBA/ULongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongSeq.pidl" -nt "ULongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/ULongSeq.pidl" -nt "ULongSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ULongSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/ULongSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ULongSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "ULongSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/ULongSeqHolder.java CORBA/ULongSeqHelper.java ULongSeqJC.h ULongSeqJC.cpp: $(TAO_ROOT)/tao/ULongSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/ULongSeq.pidl


GENERATED_DIRTY += CORBA/UShortSeqHolder.java CORBA/UShortSeqHelper.java UShortSeqJC.h UShortSeqJC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "$(TAO_ROOT)/tao/UShortSeq.pidl" -nt "CORBA/UShortSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/UShortSeq.pidl" -nt "CORBA/UShortSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/UShortSeq.pidl" -nt "UShortSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(TAO_ROOT)/tao/UShortSeq.pidl" -nt "UShortSeqJC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/UShortSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "CORBA/UShortSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "UShortSeqJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../bin/idl2jni)" -nt "UShortSeqJC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CORBA/UShortSeqHolder.java CORBA/UShortSeqHelper.java UShortSeqJC.h UShortSeqJC.cpp: $(TAO_ROOT)/tao/UShortSeq.pidl $(call ADD_ARCH,../../bin/idl2jni)
	$(if $(findstring ",../../bin/idl2jni),../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../bin/idl2jni))) -Wb,native_lib_name=tao_java -SS -Wb,stub_export_include=tao_java_export.h -Wb,stub_export_macro=tao_java_Export -Wb,tao_include_prefix=tao/ $(TAO_ROOT)/tao/UShortSeq.pidl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif
	-rm -rf classes ; rm -rf ../../lib/tao_java.jar ; rm -rf CORBA

__prebuild__:
ifeq ($(java),1)
	@mkdir -p classes 2> /dev/null || cat /dev/null > /dev/null
endif

all: __postbuild__

__postbuild__: $(VLIBS)

__postbuild__:
ifeq ($(java),1)
	@"$(JAVA_HOME)/bin/jar" -cf ../../lib/tao_java.jar -C classes .
endif


.PHONY: install
install: __postbuild__
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


