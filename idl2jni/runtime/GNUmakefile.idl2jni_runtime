# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.idl2jni_runtime
#
# $Id: gnu.mpd 2179 2013-05-28 22:16:51Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.idl2jni_runtime
DEPENDENCY_FILE  = .depend.idl2jni_runtime

LIB_PREFIX      ?= lib

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)idl2jni_runtime.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  i2jrt_ORB.cpp \
  idl2jni_runtime.cpp \
  i2jrt_TAOObject.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO -lACE

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  idl2jni_runtime.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG)$(JAVA_HOME)/include \
        $(RC_INCLUDE_FLAG)$(JAVA_HOME)/include/$(JAVA_PLATFORM)
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/idl2jni_runtime
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(java),1)
ifneq ($(LIBCHECK), 1)
  SHLIB =
  all: lib_warning
endif
else
  SHLIB =
  all: require_warning
endif

ifeq ($(java),1)
else
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(JAVA_PLATFORM)
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DIDL2JNI_RUNTIME_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo idl2jni_runtime will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(java),1)
requires_disabled_macros += java
endif
require_warning:
	@echo idl2jni_runtime will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
GENERATED_DIRTY += classes/i2jrt/ORB.class
OBJS_DEPEND_ON_GENERATED = 1
classes/i2jrt/ORB.class: i2jrt/ORB.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . i2jrt/ORB.java


GENERATED_DIRTY += classes/i2jrt/TAOObject.class
OBJS_DEPEND_ON_GENERATED = 1
classes/i2jrt/TAOObject.class: i2jrt/TAOObject.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . i2jrt/TAOObject.java


GENERATED_DIRTY += classes/i2jrt/TAOLocalObject.class
OBJS_DEPEND_ON_GENERATED = 1
classes/i2jrt/TAOLocalObject.class: i2jrt/TAOLocalObject.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . i2jrt/TAOLocalObject.java


GENERATED_DIRTY += i2jrt_TAOObject.h
OBJS_DEPEND_ON_GENERATED = 1
i2jrt_TAOObject.h: classes/i2jrt/TAOObject.class classes/i2jrt/TAOLocalObject.class
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../java/build_scripts/javah_wrapper.pl classes/i2jrt/TAOObject.class


GENERATED_DIRTY += i2jrt_ORB.h
OBJS_DEPEND_ON_GENERATED = 1
i2jrt_ORB.h: classes/i2jrt/ORB.class
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../java/build_scripts/javah_wrapper.pl classes/i2jrt/ORB.class


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif
	-rm -rf classes ; rm -rf ../../../lib/i2jrt.jar

__prebuild__:
ifeq ($(java),1)
	@mkdir -p classes 2> /dev/null || cat /dev/null > /dev/null
endif

all: __postbuild__

__postbuild__: $(VLIBS)

__postbuild__:
ifeq ($(java),1)
	@"$(JAVA_HOME)/bin/jar" -cf ../../../lib/i2jrt.jar -C classes . ; ../../../java/build_scripts/jni_check.pl ../../../lib/idl2jni_runtime
endif


.PHONY: install
install: __postbuild__
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


