#include "simpleJC.h"
#include "idl2jni_runtime.h"

/* Generated by ../../../../bin/idl2jni running on input file simple.idl */


/* Begin MODULE: simple */



/* Begin TYPEDEF: TestTypedef */


/* End TYPEDEF: TestTypedef */


/* Begin TYPEDEF: StringTypedef */


/* End TYPEDEF: StringTypedef */


/* Begin TYPEDEF: TestSeqTypedef */

void copyToCxx (JNIEnv *jni, simple::TestSeqTypedef &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const simple::TestSeqTypedef &source, bool createNewObject)
{
  jsize len = source.length ();
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: TestSeqTypedef */


/* Begin TYPEDEF: SeqOfTypedefedLong */

void copyToCxx (JNIEnv *jni, simple::SeqOfTypedefedLong &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const simple::SeqOfTypedefedLong &source, bool createNewObject)
{
  jsize len = source.length ();
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: SeqOfTypedefedLong */


/* Begin TYPEDEF: StringSeq */

void copyToCxx (JNIEnv *jni, simple::StringSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::StringSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: StringSeq */


/* Begin CONST: ArrayBounds */


/* End CONST: ArrayBounds */


/* Begin TYPEDEF: TestArrayTypedef */

void copyToCxx (JNIEnv *jni, simple::TestArrayTypedef &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const simple::TestArrayTypedef &source, bool createNewObject)
{
  jsize len = 4;
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}

void copyToCxx (JNIEnv *jni, simple::TestArrayTypedef_var &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const simple::TestArrayTypedef_var &source, bool createNewObject)
{
  jsize len = 4;
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: TestArrayTypedef */


/* Begin TYPEDEF: TestArrayTypedef2 */


/* End TYPEDEF: TestArrayTypedef2 */


/* Begin TYPEDEF: TestStringArray */

void copyToCxx (JNIEnv *jni, simple::TestStringArray &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestStringArray &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}

void copyToCxx (JNIEnv *jni, simple::TestStringArray_var &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestStringArray_var &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TestStringArray */


/* Begin TYPEDEF: StringSeqSeq */

void copyToCxx (JNIEnv *jni, simple::StringSeqSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectArrayElement (arr, i));
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::StringSeqSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass c0 = findClass (jni, "java/lang/String");
      jobjectArray a1 = jni->NewObjectArray (0, c0, 0);
      jclass c1 = jni->GetObjectClass (a1);
      jni->DeleteLocalRef (a1);
      jclass clazz = c1;
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj;
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: StringSeqSeq */


/* Begin TYPEDEF: StringSeqSeqSeq */

void copyToCxx (JNIEnv *jni, simple::StringSeqSeqSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectArrayElement (arr, i));
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::StringSeqSeqSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass c0 = findClass (jni, "java/lang/String");
      jobjectArray a1 = jni->NewObjectArray (0, c0, 0);
      jclass c1 = jni->GetObjectClass (a1);
      jni->DeleteLocalRef (a1);
      jobjectArray a2 = jni->NewObjectArray (0, c1, 0);
      jclass c2 = jni->GetObjectClass (a2);
      jni->DeleteLocalRef (a2);
      jclass clazz = c2;
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj;
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: StringSeqSeqSeq */


/* Begin TYPEDEF: LongSeqSeq */

void copyToCxx (JNIEnv *jni, simple::LongSeqSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jintArray obj = static_cast<jintArray> (jni->GetObjectArrayElement (arr, i));
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::LongSeqSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "[I");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jintArray obj;
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: LongSeqSeq */


/* Begin TYPEDEF: LongSeqSeqSeq */

void copyToCxx (JNIEnv *jni, simple::LongSeqSeqSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectArrayElement (arr, i));
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::LongSeqSeqSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "[[I");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobjectArray obj;
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: LongSeqSeqSeq */


/* Begin STRUCT: TestStruct */

void copyToCxx (JNIEnv *jni, simple::TestStruct &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "m1", "I");
    target.m1 = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "m2", "I");
    target.m2 = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "seq1", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.seq1, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "seq2", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.seq2, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "st", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.st, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestStruct &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestStruct");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "m1", "I");
    jni->SetIntField (target, fid, source.m1);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "m2", "I");
    jni->SetIntField (target, fid, source.m2);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "seq1", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.seq1, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "seq2", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.seq2, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "st", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.st, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TestStruct */


/* Begin TYPEDEF: TestStructSequence */

void copyToCxx (JNIEnv *jni, simple::TestStructSequence &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestStructSequence &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestStruct");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestStruct var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TestStructSequence */


/* Begin TYPEDEF: TestStructArray */

void copyToCxx (JNIEnv *jni, simple::TestStructArray &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestStructArray &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestStruct");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestStruct var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}

void copyToCxx (JNIEnv *jni, simple::TestStructArray_var &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestStructArray_var &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestStruct");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestStruct var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TestStructArray */


/* Begin STRUCT: TestNestedStruct */

void copyToCxx (JNIEnv *jni, simple::TestNestedStruct &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "m", "Lsimple/TestStruct;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.m, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "str", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.str, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "arr", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.arr, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sss", "[[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.sss, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ssss", "[[[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.ssss, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lss", "[[I");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.lss, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lsss", "[[[I");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.lsss, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestNestedStruct &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestNestedStruct");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "m", "Lsimple/TestStruct;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.m, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "str", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.str, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "arr", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.arr, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sss", "[[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.sss, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ssss", "[[[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.ssss, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lss", "[[I");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.lss, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lsss", "[[[I");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.lsss, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TestNestedStruct */


/* Begin CONST: TestConstLong */


/* End CONST: TestConstLong */


/* Begin CONST: TIMESTAMP_INVALID_NSEC */


/* End CONST: TIMESTAMP_INVALID_NSEC */


/* Begin CONST: TestConstFloat */


/* End CONST: TestConstFloat */


/* Begin CONST: TestConstDouble */


/* End CONST: TestConstDouble */


/* Begin CONST: TestConstBool */


/* End CONST: TestConstBool */


/* Begin CONST: TestConstString */


/* End CONST: TestConstString */


/* Begin CONST: TestConstTypedef */


/* End CONST: TestConstTypedef */


/* Begin CONST: TestConstChar */


/* End CONST: TestConstChar */


/* Begin CONST: TestConstWchar */


/* End CONST: TestConstWchar */


/* Begin ENUM: TestEnum */

void copyToCxx (JNIEnv *jni, simple::TestEnum &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<simple::TestEnum> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestEnum &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "simple/TestEnum");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)Lsimple/TestEnum;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: TestEnum */


/* Begin UNION: TestUnion1 */

void copyToCxx (JNIEnv *jni, simple::TestUnion1 &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jmethodID mid_disc = jni->GetMethodID (clazz, "discriminator", "()Lsimple/TestEnum;");
  jobject disc = jni->CallObjectMethod (source, mid_disc);
  jmethodID mid_disc_val = jni->GetMethodID (jni->GetObjectClass (disc), "value", "()I");
  jint disc_val = jni->CallIntMethod (disc, mid_disc_val);
  jni->DeleteLocalRef (disc);
  switch (disc_val)
    {
    case 0:
      {
        jmethodID mid = jni->GetMethodID (clazz, "o", "()B");
        jbyte value = jni->CallByteMethod (source, mid);
        target.o (value);
        break;
      }
    case 1:
      {
        jmethodID mid = jni->GetMethodID (clazz, "s", "()S");
        jshort value = jni->CallShortMethod (source, mid);
        target.s (value);
        break;
      }
    case 2:
      {
        jmethodID mid = jni->GetMethodID (clazz, "l", "()I");
        jint value = jni->CallIntMethod (source, mid);
        target.l (value);
        break;
      }
    case 3:
      {
        jmethodID mid = jni->GetMethodID (clazz, "n", "()Z");
        jboolean value = jni->CallBooleanMethod (source, mid);
        target.n (value);
        break;
      }
    case 4:
      {
        jmethodID mid = jni->GetMethodID (clazz, "u", "()D");
        jdouble value = jni->CallDoubleMethod (source, mid);
        target.u (value);
        break;
      }
    }
  target._d (static_cast<simple::TestEnum> (disc_val));
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestUnion1 &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestUnion1");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  switch (source._d ())
    {
    case simple::a:
      {
        jmethodID mid = jni->GetMethodID (clazz, "o", "(B)V");
        jni->CallVoidMethod (target, mid, source.o ());
        break;
      }
    case simple::b:
      {
        jmethodID mid = jni->GetMethodID (clazz, "s", "(S)V");
        jni->CallVoidMethod (target, mid, source.s ());
        break;
      }
    case simple::c:
      {
        jmethodID mid = jni->GetMethodID (clazz, "l", "(I)V");
        jni->CallVoidMethod (target, mid, source.l ());
        break;
      }
    case simple::d:
      {
        jmethodID mid = jni->GetMethodID (clazz, "n", "(Z)V");
        jni->CallVoidMethod (target, mid, source.n ());
        break;
      }
    case simple::e:
      {
        jmethodID mid = jni->GetMethodID (clazz, "u", "(D)V");
        jni->CallVoidMethod (target, mid, source.u ());
        break;
      }
    }
}


/* End UNION: TestUnion1 */


/* Begin UNION: TestUnion2 */

void copyToCxx (JNIEnv *jni, simple::TestUnion2 &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jmethodID mid_disc = jni->GetMethodID (clazz, "discriminator", "()S");
  jshort disc = jni->CallShortMethod (source, mid_disc);
  switch (disc)
    {
    case 0:
      {
        jmethodID mid = jni->GetMethodID (clazz, "s", "()Ljava/lang/String;");
        jobject value = jni->CallObjectMethod (source, mid);
        CORBA::String_var taoVal;
        copyToCxx (jni, taoVal, value);
        target.s (taoVal);
        break;
      }
    case 1:
      {
        jmethodID mid = jni->GetMethodID (clazz, "t", "()Lsimple/TestStruct;");
        jobject value = jni->CallObjectMethod (source, mid);
        simple::TestStruct taoVal;
        copyToCxx (jni, taoVal, value);
        target.t (taoVal);
        break;
      }
    case 2:
    case 3:
      {
        jmethodID mid = jni->GetMethodID (clazz, "q", "()[I");
        jintArray value = static_cast<jintArray> (jni->CallObjectMethod (source, mid));
        simple::TestSeqTypedef taoVal;
        copyToCxx (jni, taoVal, value);
        target.q (taoVal);
        break;
      }
    case 4:
      {
        jmethodID mid = jni->GetMethodID (clazz, "d", "()Ljava/lang/String;");
        jobject value = jni->CallObjectMethod (source, mid);
        CORBA::String_var taoVal;
        copyToCxx (jni, taoVal, value);
        target.d (taoVal);
        break;
      }
    default:
      {
        jmethodID mid = jni->GetMethodID (clazz, "e", "()Lsimple/TestEnum;");
        jobject value = jni->CallObjectMethod (source, mid);
        simple::TestEnum taoVal;
        copyToCxx (jni, taoVal, value);
        target.e (taoVal);
        break;
      }
    }
  target._d (disc);
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestUnion2 &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestUnion2");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  jshort jdisc = source._d ();
  switch (source._d ())
    {
    case 0:
      {
        jmethodID mid = jni->GetMethodID (clazz, "s", "(Ljava/lang/String;)V");
        jfieldID fid = jni->GetFieldID (clazz, "s", "Ljava/lang/String;");
        jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
        copyToJava (jni, obj, source.s (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    case 1:
      {
        jmethodID mid = jni->GetMethodID (clazz, "t", "(Lsimple/TestStruct;)V");
        jfieldID fid = jni->GetFieldID (clazz, "t", "Lsimple/TestStruct;");
        jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
        copyToJava (jni, obj, source.t (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    case 2:
    case 3:
      {
        jmethodID mid = jni->GetMethodID (clazz, "q", "(S[I)V");
        jfieldID fid = jni->GetFieldID (clazz, "q", "[I");
        jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
        copyToJava (jni, obj, source.q (), !obj);
        jni->CallVoidMethod (target, mid, jdisc, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    case 4:
      {
        jmethodID mid = jni->GetMethodID (clazz, "d", "(Ljava/lang/String;)V");
        jfieldID fid = jni->GetFieldID (clazz, "d", "Ljava/lang/String;");
        jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
        copyToJava (jni, obj, source.d (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    default:
      {
        jmethodID mid = jni->GetMethodID (clazz, "e", "(SLsimple/TestEnum;)V");
        jfieldID fid = jni->GetFieldID (clazz, "e", "Lsimple/TestEnum;");
        jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
        copyToJava (jni, obj, source.e (), !obj);
        jni->CallVoidMethod (target, mid, jdisc, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    }
}


/* End UNION: TestUnion2 */


/* Begin UNION: TestUnion4 */

void copyToCxx (JNIEnv *jni, simple::TestUnion4 &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jmethodID mid_disc = jni->GetMethodID (clazz, "discriminator", "()Z");
  jboolean disc = jni->CallBooleanMethod (source, mid_disc);
  switch (disc)
    {
    case JNI_TRUE:
      {
        jmethodID mid = jni->GetMethodID (clazz, "c", "()C");
        jchar value = jni->CallCharMethod (source, mid);
        target.c (static_cast<CORBA::Char> (value));
        break;
      }
    }
  target._d (disc);
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestUnion4 &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestUnion4");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  switch (source._d ())
    {
    case true:
      {
        jmethodID mid = jni->GetMethodID (clazz, "c", "(C)V");
        jni->CallVoidMethod (target, mid, source.c ());
        break;
      }
    }
}


/* End UNION: TestUnion4 */


/* Begin TYPEDEF: EnumSeq */

void copyToCxx (JNIEnv *jni, simple::EnumSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::EnumSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestEnum");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestEnum var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: EnumSeq */


/* Begin TYPEDEF: EnumArray */

void copyToCxx (JNIEnv *jni, simple::EnumArray &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::EnumArray &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestEnum");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestEnum var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}

void copyToCxx (JNIEnv *jni, simple::EnumArray_var &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::EnumArray_var &source, bool createNewObject)
{
  jsize len = 4;
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestEnum");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestEnum var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: EnumArray */


/* Begin STRUCT: TestStructWithEnum */

void copyToCxx (JNIEnv *jni, simple::TestStructWithEnum &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    target.count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "which", "Lsimple/TestEnum;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.which, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lotsOfEm", "[Lsimple/TestEnum;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.lotsOfEm, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "fixedUnion", "Lsimple/TestUnion1;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.fixedUnion, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "variableUnion", "Lsimple/TestUnion2;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.variableUnion, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestStructWithEnum &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestStructWithEnum");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    jni->SetIntField (target, fid, source.count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "which", "Lsimple/TestEnum;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.which, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lotsOfEm", "[Lsimple/TestEnum;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.lotsOfEm, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "fixedUnion", "Lsimple/TestUnion1;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.fixedUnion, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "variableUnion", "Lsimple/TestUnion2;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.variableUnion, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TestStructWithEnum */


/* Begin INTERFACE: TestInterf */

void copyToCxx (JNIEnv *jni, simple::TestInterf_var &target, jobject source)
{
  if (!source) return;
  CORBA::Object_ptr c = recoverTaoObject (jni, source);
  target = simple::TestInterf::_unchecked_narrow (c);
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestInterf_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_TestInterfStub");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_TestInterfHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::TestInterf_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestInterfStub_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf_var _this = simple::TestInterf::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestInterfStub_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf_var _this = simple::TestInterf::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jintArray JNICALL
Java_simple__1TestInterfStub_op1 (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf_var _this = simple::TestInterf::_narrow (_this_obj);
      simple::TestEnum _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jshort _j_p2 = deholderize<jshort> (_jni, p2, "S");
      CORBA::UShort _c_p2 = _j_p2;
      simple::TestSeqTypedef_var _c_p3;
      CORBA::String_var _c_p4;
      simple::TestArrayTypedef_var _c_ret = _this->op1 (_c_p1, _c_p2, _c_p3.out (), _c_p4.out ());
      _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "S");
      jintArray _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3.in (), true);
      holderize (_jni, p3, _j_p3, "[I");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4.in (), true);
      holderize (_jni, p4, _j_p4, "Ljava/lang/String;");
      jintArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1TestInterfStub_opu (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf_var _this = simple::TestInterf::_narrow (_this_obj);
      simple::TestUnion1 _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestUnion2;");
      simple::TestUnion2 _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::TestUnion1 _c_p4;
      simple::TestUnion4 _c_ret = _this->opu (_c_p1, _c_p2, _c_p4);
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestUnion2;");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4, true);
      holderize (_jni, p4, _j_p4, "Lsimple/TestUnion1;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TestInterf */


/* Begin TYPEDEF: TestUnion2Seq */

void copyToCxx (JNIEnv *jni, simple::TestUnion2Seq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::TestUnion2Seq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/TestUnion2");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::TestUnion2 var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TestUnion2Seq */


/* Begin UNION: TestUnion3 */

void copyToCxx (JNIEnv *jni, simple::TestUnion3 &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jmethodID mid_disc = jni->GetMethodID (clazz, "discriminator", "()Lsimple/TestEnum;");
  jobject disc = jni->CallObjectMethod (source, mid_disc);
  jmethodID mid_disc_val = jni->GetMethodID (jni->GetObjectClass (disc), "value", "()I");
  jint disc_val = jni->CallIntMethod (disc, mid_disc_val);
  jni->DeleteLocalRef (disc);
  switch (disc_val)
    {
    case 0:
      {
        jmethodID mid = jni->GetMethodID (clazz, "sa", "()[Lsimple/TestStruct;");
        jobjectArray value = static_cast<jobjectArray> (jni->CallObjectMethod (source, mid));
        simple::TestStructArray taoVal;
        copyToCxx (jni, taoVal, value);
        target.sa (taoVal);
        break;
      }
    case 1:
      {
        jmethodID mid = jni->GetMethodID (clazz, "obj", "()Lsimple/TestInterf;");
        jobject value = jni->CallObjectMethod (source, mid);
        simple::TestInterf_var taoVal;
        copyToCxx (jni, taoVal, value);
        target.obj (taoVal);
        break;
      }
    case 2:
      {
        jmethodID mid = jni->GetMethodID (clazz, "us", "()[Lsimple/TestUnion2;");
        jobjectArray value = static_cast<jobjectArray> (jni->CallObjectMethod (source, mid));
        simple::TestUnion2Seq taoVal;
        copyToCxx (jni, taoVal, value);
        target.us (taoVal);
        break;
      }
    default:
      {
        jmethodID mid = jni->GetMethodID (clazz, "fp", "()D");
        jdouble value = jni->CallDoubleMethod (source, mid);
        target.fp (value);
        break;
      }
    }
  target._d (static_cast<simple::TestEnum> (disc_val));
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestUnion3 &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/TestUnion3");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  jclass dclazz = findClass (jni, "simple/TestEnum");
  jmethodID from_int = jni->GetStaticMethodID (dclazz, "from_int", "(I)Lsimple/TestEnum;");
  jobject jdisc = jni->CallStaticObjectMethod (dclazz, from_int, static_cast<jint> (source._d ()));
  switch (source._d ())
    {
    case simple::a:
      {
        jmethodID mid = jni->GetMethodID (clazz, "sa", "([Lsimple/TestStruct;)V");
        jfieldID fid = jni->GetFieldID (clazz, "sa", "[Lsimple/TestStruct;");
        jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
        copyToJava (jni, obj, source.sa (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    case simple::b:
      {
        jmethodID mid = jni->GetMethodID (clazz, "obj", "(Lsimple/TestInterf;)V");
        jfieldID fid = jni->GetFieldID (clazz, "obj", "Lsimple/TestInterf;");
        jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
        copyToJava (jni, obj, source.obj (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    case simple::c:
      {
        jmethodID mid = jni->GetMethodID (clazz, "us", "([Lsimple/TestUnion2;)V");
        jfieldID fid = jni->GetFieldID (clazz, "us", "[Lsimple/TestUnion2;");
        jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
        copyToJava (jni, obj, source.us (), !obj);
        jni->CallVoidMethod (target, mid, obj);
        jni->DeleteLocalRef (obj);
        break;
      }
    default:
      {
        jmethodID mid = jni->GetMethodID (clazz, "fp", "(Lsimple/TestEnum;D)V");
        jni->CallVoidMethod (target, mid, jdisc, source.fp ());
        break;
      }
    }
  jni->DeleteLocalRef (jdisc);
}


/* End UNION: TestUnion3 */


/* Begin INTERFACE: TestInterf2 */

void copyToCxx (JNIEnv *jni, simple::TestInterf2_var &target, jobject source)
{
  if (!source) return;
  CORBA::Object_ptr c = recoverTaoObject (jni, source);
  target = simple::TestInterf2::_unchecked_narrow (c);
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestInterf2_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_TestInterf2Stub");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_TestInterf2Helper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::TestInterf2_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestInterf2Stub_op2 (JNIEnv *_jni, jobject _jthis, jintArray p1, jobjectArray p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf2_var _this = simple::TestInterf2::_narrow (_this_obj);
      simple::TestArrayTypedef _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      simple::LongSeqSeq _c_p2;
      copyToCxx (_jni, _c_p2, p2);
      CORBA::Long _c_ret = _this->op2 (_c_p1, _c_p2);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jintArray JNICALL
Java_simple__1TestInterf2Stub_op1 (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf2_var _this = simple::TestInterf2::_narrow (_this_obj);
      simple::TestEnum _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jshort _j_p2 = deholderize<jshort> (_jni, p2, "S");
      CORBA::UShort _c_p2 = _j_p2;
      simple::TestSeqTypedef_var _c_p3;
      CORBA::String_var _c_p4;
      simple::TestArrayTypedef_var _c_ret = _this->op1 (_c_p1, _c_p2, _c_p3.out (), _c_p4.out ());
      _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "S");
      jintArray _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3.in (), true);
      holderize (_jni, p3, _j_p3, "[I");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4.in (), true);
      holderize (_jni, p4, _j_p4, "Ljava/lang/String;");
      jintArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1TestInterf2Stub_opu (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf2_var _this = simple::TestInterf2::_narrow (_this_obj);
      simple::TestUnion1 _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestUnion2;");
      simple::TestUnion2 _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::TestUnion1 _c_p4;
      simple::TestUnion4 _c_ret = _this->opu (_c_p1, _c_p2, _c_p4);
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestUnion2;");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4, true);
      holderize (_jni, p4, _j_p4, "Lsimple/TestUnion1;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestInterf2Stub_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf2_var _this = simple::TestInterf2::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestInterf2Stub_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf2_var _this = simple::TestInterf2::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: TestInterf2 */


/* Begin INTERFACE: TestInterf3 */

void copyToCxx (JNIEnv *jni, simple::TestInterf3_var &target, jobject source)
{
  if (!source) return;
  CORBA::Object_ptr c = recoverTaoObject (jni, source);
  target = simple::TestInterf3::_unchecked_narrow (c);
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestInterf3_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_TestInterf3Stub");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_TestInterf3Helper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::TestInterf3_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestInterf3Stub_op3 (JNIEnv *_jni, jobject _jthis, jobject p1)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      simple::TestNestedStruct _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      _this->op3 (_c_p1);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestInterf3Stub_op2 (JNIEnv *_jni, jobject _jthis, jintArray p1, jobjectArray p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      simple::TestArrayTypedef _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      simple::LongSeqSeq _c_p2;
      copyToCxx (_jni, _c_p2, p2);
      CORBA::Long _c_ret = _this->op2 (_c_p1, _c_p2);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jintArray JNICALL
Java_simple__1TestInterf3Stub_op1 (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      simple::TestEnum _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jshort _j_p2 = deholderize<jshort> (_jni, p2, "S");
      CORBA::UShort _c_p2 = _j_p2;
      simple::TestSeqTypedef_var _c_p3;
      CORBA::String_var _c_p4;
      simple::TestArrayTypedef_var _c_ret = _this->op1 (_c_p1, _c_p2, _c_p3.out (), _c_p4.out ());
      _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "S");
      jintArray _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3.in (), true);
      holderize (_jni, p3, _j_p3, "[I");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4.in (), true);
      holderize (_jni, p4, _j_p4, "Ljava/lang/String;");
      jintArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1TestInterf3Stub_opu (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p4)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      simple::TestUnion1 _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestUnion2;");
      simple::TestUnion2 _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::TestUnion1 _c_p4;
      simple::TestUnion4 _c_ret = _this->opu (_c_p1, _c_p2, _c_p4);
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestUnion2;");
      jobject _j_p4 = 0;
      copyToJava (_jni, _j_p4, _c_p4, true);
      holderize (_jni, p4, _j_p4, "Lsimple/TestUnion1;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestInterf3Stub_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestInterf3Stub_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestInterf3_var _this = simple::TestInterf3::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: TestInterf3 */


/* Begin INTERFACE: TestLI */

void copyToCxx (JNIEnv *jni, simple::TestLI_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = simple::TestLI::_unchecked_narrow (c);
    }
  else
    {
      target = new simple_TestLIJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::TestLI_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_TestLITAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_TestLIHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::TestLI_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

CORBA::Long simple_TestLIJavaPeer::attr1 ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "attr1", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1TestLITAOPeer_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

void simple_TestLIJavaPeer::attr1 (CORBA::Long attr1_)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "attr1", "(I)V");
  _jni->CallVoidMethod (globalCallback_, _mid, attr1_);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestLITAOPeer_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

CORBA::Double simple_TestLIJavaPeer::attr2 ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "attr2", "()D");
  jdouble _j_ret = _jni->CallDoubleMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jdouble JNICALL
Java_simple__1TestLITAOPeer_attr2 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      CORBA::Double _c_ret = _this->attr2 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

void simple_TestLIJavaPeer::attr2 (CORBA::Double attr2_)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "attr2", "(D)V");
  _jni->CallVoidMethod (globalCallback_, _mid, attr2_);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestLITAOPeer_attr2_D (JNIEnv *_jni, jobject _jthis, jdouble attr2_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      _this->attr2 (attr2_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

CORBA::Boolean simple_TestLIJavaPeer::localOp (simple::EnumSeq& p1, simple::TestStructSequence_out p2)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_p1 = 0;
  copyToJava (_jni, _n_p1, p1, true);
  jclass _hc_p1 = findClass (_jni, "simple/EnumSeqHolder");
  jmethodID _hm_p1 = _jni->GetMethodID (_hc_p1, "<init>", "()V");
  jobject _j_p1 = _jni->NewObject (_hc_p1, _hm_p1);
  holderize (_jni, _j_p1, _n_p1, "[Lsimple/TestEnum;");
  jclass _hc_p2 = findClass (_jni, "simple/TestStructSequenceHolder");
  jmethodID _hm_p2 = _jni->GetMethodID (_hc_p2, "<init>", "()V");
  jobject _j_p2 = _jni->NewObject (_hc_p2, _hm_p2);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "localOp", "(Lsimple/EnumSeqHolder;Lsimple/TestStructSequenceHolder;)Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid, _j_p1, _j_p2);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_p1 = deholderize<jobjectArray> (_jni, _j_p1, "[Lsimple/TestEnum;");
  _jni->DeleteLocalRef (_j_p1);
  copyToCxx (_jni, p1, _o_p1);
  _jni->DeleteLocalRef (_o_p1);
  jobjectArray _o_p2 = deholderize<jobjectArray> (_jni, _j_p2, "[Lsimple/TestStruct;");
  _jni->DeleteLocalRef (_j_p2);
  simple::TestStructSequence_var _c_p2 = new simple::TestStructSequence;
  copyToCxx (_jni, _c_p2, _o_p2);
  p2 = _c_p2.out ();
  _jni->DeleteLocalRef (_o_p2);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1TestLITAOPeer_localOp (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      jobjectArray _j_p1 = deholderize<jobjectArray> (_jni, p1, "[Lsimple/TestEnum;");
      simple::EnumSeq _c_p1;
      copyToCxx (_jni, _c_p1, _j_p1);
      simple::TestStructSequence_var _c_p2;
      CORBA::Boolean _c_ret = _this->localOp (_c_p1, _c_p2.out ());
      copyToJava (_jni, _j_p1, _c_p1);
      holderize (_jni, p1, _j_p1, "[Lsimple/TestEnum;");
      jobjectArray _j_p2 = 0;
      copyToJava (_jni, _j_p2, _c_p2.in (), true);
      holderize (_jni, p2, _j_p2, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

CORBA::Boolean simple_TestLIJavaPeer::localOp2 (simple::TestStructSequence& s1)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_s1 = 0;
  copyToJava (_jni, _n_s1, s1, true);
  jclass _hc_s1 = findClass (_jni, "simple/TestStructSequenceHolder");
  jmethodID _hm_s1 = _jni->GetMethodID (_hc_s1, "<init>", "()V");
  jobject _j_s1 = _jni->NewObject (_hc_s1, _hm_s1);
  holderize (_jni, _j_s1, _n_s1, "[Lsimple/TestStruct;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "localOp2", "(Lsimple/TestStructSequenceHolder;)Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid, _j_s1);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_s1 = deholderize<jobjectArray> (_jni, _j_s1, "[Lsimple/TestStruct;");
  _jni->DeleteLocalRef (_j_s1);
  copyToCxx (_jni, s1, _o_s1);
  _jni->DeleteLocalRef (_o_s1);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1TestLITAOPeer_localOp2 (JNIEnv *_jni, jobject _jthis, jobject s1)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      jobjectArray _j_s1 = deholderize<jobjectArray> (_jni, s1, "[Lsimple/TestStruct;");
      simple::TestStructSequence _c_s1;
      copyToCxx (_jni, _c_s1, _j_s1);
      CORBA::Boolean _c_ret = _this->localOp2 (_c_s1);
      copyToJava (_jni, _j_s1, _c_s1);
      holderize (_jni, s1, _j_s1, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

simple::EnumSeq* simple_TestLIJavaPeer::returnASequence (CORBA::Short& p1, simple::TestStruct& p2)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _hc_p1 = findClass (_jni, "CORBA/ShortHolder");
  jmethodID _hm_p1 = _jni->GetMethodID (_hc_p1, "<init>", "()V");
  jobject _j_p1 = _jni->NewObject (_hc_p1, _hm_p1);
  jobject _n_p2 = 0;
  copyToJava (_jni, _n_p2, p2, true);
  jclass _hc_p2 = findClass (_jni, "simple/TestStructHolder");
  jmethodID _hm_p2 = _jni->GetMethodID (_hc_p2, "<init>", "()V");
  jobject _j_p2 = _jni->NewObject (_hc_p2, _hm_p2);
  holderize (_jni, _j_p2, _n_p2, "Lsimple/TestStruct;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "returnASequence", "(LCORBA/ShortHolder;Lsimple/TestStructHolder;)[Lsimple/TestEnum;");
  jobjectArray _j_ret = static_cast<jobjectArray> (_jni->CallObjectMethod (globalCallback_, _mid, _j_p1, _j_p2));
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jshort _o_p1 = deholderize<jshort> (_jni, _j_p1, "S");
  _jni->DeleteLocalRef (_j_p1);
  p1 = _o_p1;
  jobject _o_p2 = deholderize<jobject> (_jni, _j_p2, "Lsimple/TestStruct;");
  _jni->DeleteLocalRef (_j_p2);
  copyToCxx (_jni, p2, _o_p2);
  _jni->DeleteLocalRef (_o_p2);
  simple::EnumSeq_var _c_ret = new simple::EnumSeq;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobjectArray JNICALL
Java_simple__1TestLITAOPeer_returnASequence (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      CORBA::Short _c_p1;
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestStruct;");
      simple::TestStruct _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::EnumSeq_var _c_ret = _this->returnASequence (_c_p1, _c_p2);
      jshort _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "S");
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestStruct;");
      jobjectArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

void simple_TestLIJavaPeer::primitive (CORBA::Boolean& p1, CORBA::Char& p2, CORBA::Octet& p3, CORBA::Short& p4, CORBA::ULong& p5, CORBA::LongLong& p6, CORBA::Float& p7, CORBA::Double& p8)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jboolean _n_p1 = p1;
  jclass _hc_p1 = findClass (_jni, "CORBA/BooleanHolder");
  jmethodID _hm_p1 = _jni->GetMethodID (_hc_p1, "<init>", "()V");
  jobject _j_p1 = _jni->NewObject (_hc_p1, _hm_p1);
  holderize (_jni, _j_p1, _n_p1, "Z");
  jclass _hc_p2 = findClass (_jni, "CORBA/CharHolder");
  jmethodID _hm_p2 = _jni->GetMethodID (_hc_p2, "<init>", "()V");
  jobject _j_p2 = _jni->NewObject (_hc_p2, _hm_p2);
  jbyte _n_p3 = p3;
  jclass _hc_p3 = findClass (_jni, "CORBA/OctetHolder");
  jmethodID _hm_p3 = _jni->GetMethodID (_hc_p3, "<init>", "()V");
  jobject _j_p3 = _jni->NewObject (_hc_p3, _hm_p3);
  holderize (_jni, _j_p3, _n_p3, "B");
  jclass _hc_p4 = findClass (_jni, "CORBA/ShortHolder");
  jmethodID _hm_p4 = _jni->GetMethodID (_hc_p4, "<init>", "()V");
  jobject _j_p4 = _jni->NewObject (_hc_p4, _hm_p4);
  jint _n_p5 = p5;
  jclass _hc_p5 = findClass (_jni, "CORBA/ULongHolder");
  jmethodID _hm_p5 = _jni->GetMethodID (_hc_p5, "<init>", "()V");
  jobject _j_p5 = _jni->NewObject (_hc_p5, _hm_p5);
  holderize (_jni, _j_p5, _n_p5, "I");
  jclass _hc_p6 = findClass (_jni, "CORBA/LongLongHolder");
  jmethodID _hm_p6 = _jni->GetMethodID (_hc_p6, "<init>", "()V");
  jobject _j_p6 = _jni->NewObject (_hc_p6, _hm_p6);
  jfloat _n_p7 = p7;
  jclass _hc_p7 = findClass (_jni, "CORBA/FloatHolder");
  jmethodID _hm_p7 = _jni->GetMethodID (_hc_p7, "<init>", "()V");
  jobject _j_p7 = _jni->NewObject (_hc_p7, _hm_p7);
  holderize (_jni, _j_p7, _n_p7, "F");
  jclass _hc_p8 = findClass (_jni, "CORBA/DoubleHolder");
  jmethodID _hm_p8 = _jni->GetMethodID (_hc_p8, "<init>", "()V");
  jobject _j_p8 = _jni->NewObject (_hc_p8, _hm_p8);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "primitive", "(LCORBA/BooleanHolder;LCORBA/CharHolder;LCORBA/OctetHolder;LCORBA/ShortHolder;LCORBA/ULongHolder;LCORBA/LongLongHolder;LCORBA/FloatHolder;LCORBA/DoubleHolder;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_p1, _j_p2, _j_p3, _j_p4, _j_p5, _j_p6, _j_p7, _j_p8);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jboolean _o_p1 = deholderize<jboolean> (_jni, _j_p1, "Z");
  _jni->DeleteLocalRef (_j_p1);
  p1 = _o_p1;
  jchar _o_p2 = deholderize<jchar> (_jni, _j_p2, "C");
  _jni->DeleteLocalRef (_j_p2);
  p2 = static_cast<CORBA::Char> (_o_p2);
  jbyte _o_p3 = deholderize<jbyte> (_jni, _j_p3, "B");
  _jni->DeleteLocalRef (_j_p3);
  p3 = _o_p3;
  jshort _o_p4 = deholderize<jshort> (_jni, _j_p4, "S");
  _jni->DeleteLocalRef (_j_p4);
  p4 = _o_p4;
  jint _o_p5 = deholderize<jint> (_jni, _j_p5, "I");
  _jni->DeleteLocalRef (_j_p5);
  p5 = _o_p5;
  jlong _o_p6 = deholderize<jlong> (_jni, _j_p6, "J");
  _jni->DeleteLocalRef (_j_p6);
  p6 = _o_p6;
  jfloat _o_p7 = deholderize<jfloat> (_jni, _j_p7, "F");
  _jni->DeleteLocalRef (_j_p7);
  p7 = _o_p7;
  jdouble _o_p8 = deholderize<jdouble> (_jni, _j_p8, "D");
  _jni->DeleteLocalRef (_j_p8);
  p8 = _o_p8;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1TestLITAOPeer_primitive (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jobject p6, jobject p7, jobject p8)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::TestLI_var _this = simple::TestLI::_narrow (_this_obj);
      jboolean _j_p1 = deholderize<jboolean> (_jni, p1, "Z");
      CORBA::Boolean _c_p1 = _j_p1;
      CORBA::Char _c_p2;
      jbyte _j_p3 = deholderize<jbyte> (_jni, p3, "B");
      CORBA::Octet _c_p3 = _j_p3;
      CORBA::Short _c_p4;
      jint _j_p5 = deholderize<jint> (_jni, p5, "I");
      CORBA::ULong _c_p5 = _j_p5;
      CORBA::LongLong _c_p6;
      jfloat _j_p7 = deholderize<jfloat> (_jni, p7, "F");
      CORBA::Float _c_p7 = _j_p7;
      CORBA::Double _c_p8;
      _this->primitive (_c_p1, _c_p2, _c_p3, _c_p4, _c_p5, _c_p6, _c_p7, _c_p8);
      _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "Z");
      jchar _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "C");
      _j_p3 = _c_p3;
      holderize (_jni, p3, _j_p3, "B");
      jshort _j_p4 = _c_p4;
      holderize (_jni, p4, _j_p4, "S");
      _j_p5 = _c_p5;
      holderize (_jni, p5, _j_p5, "I");
      jlong _j_p6 = _c_p6;
      holderize (_jni, p6, _j_p6, "J");
      _j_p7 = _c_p7;
      holderize (_jni, p7, _j_p7, "F");
      jdouble _j_p8 = _c_p8;
      holderize (_jni, p8, _j_p8, "D");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: TestLI */


/* Begin INTERFACE: Local2 */

void copyToCxx (JNIEnv *jni, simple::Local2_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = simple::Local2::_unchecked_narrow (c);
    }
  else
    {
      target = new simple_Local2JavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::Local2_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_Local2TAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_Local2Helper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::Local2_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

simple::TestLI_ptr simple_Local2JavaPeer::op (simple::TestLI_ptr p1, simple::TestLI_ptr& p2, simple::TestLI_out p3)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_p1 = 0;
  simple::TestLI_var _c_p1 = simple::TestLI::_duplicate (p1);
  copyToJava (_jni, _j_p1, _c_p1, true);
  jobject _n_p2 = 0;
  copyToJava (_jni, _n_p2, p2, true);
  jclass _hc_p2 = findClass (_jni, "simple/TestLIHolder");
  jmethodID _hm_p2 = _jni->GetMethodID (_hc_p2, "<init>", "()V");
  jobject _j_p2 = _jni->NewObject (_hc_p2, _hm_p2);
  holderize (_jni, _j_p2, _n_p2, "Lsimple/TestLI;");
  jclass _hc_p3 = findClass (_jni, "simple/TestLIHolder");
  jmethodID _hm_p3 = _jni->GetMethodID (_hc_p3, "<init>", "()V");
  jobject _j_p3 = _jni->NewObject (_hc_p3, _hm_p3);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "op", "(Lsimple/TestLI;Lsimple/TestLIHolder;Lsimple/TestLIHolder;)Lsimple/TestLI;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_p1, _j_p2, _j_p3);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_p2 = deholderize<jobject> (_jni, _j_p2, "Lsimple/TestLI;");
  _jni->DeleteLocalRef (_j_p2);
  simple::TestLI_var _c_p2;
  copyToCxx (_jni, _c_p2, _o_p2);
  _jni->DeleteLocalRef (_o_p2);
  p2 = _c_p2.inout ();
  jobject _o_p3 = deholderize<jobject> (_jni, _j_p3, "Lsimple/TestLI;");
  _jni->DeleteLocalRef (_j_p3);
  simple::TestLI_var _c_p3;
  copyToCxx (_jni, _c_p3, _o_p3);
  p3 = _c_p3.out ();
  _jni->DeleteLocalRef (_o_p3);
  simple::TestLI_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1Local2TAOPeer_op (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      simple::TestLI_var _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestLI;");
      simple::TestLI_var _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::TestLI_var _c_p3;
      simple::TestLI_var _c_ret = _this->op (_c_p1.in (), _c_p2.inout (), _c_p3.out ());
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestLI;");
      jobject _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3, true);
      holderize (_jni, p3, _j_p3, "Lsimple/TestLI;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1Local2TAOPeer_localOp (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      jobjectArray _j_p1 = deholderize<jobjectArray> (_jni, p1, "[Lsimple/TestEnum;");
      simple::EnumSeq _c_p1;
      copyToCxx (_jni, _c_p1, _j_p1);
      simple::TestStructSequence_var _c_p2;
      CORBA::Boolean _c_ret = _this->localOp (_c_p1, _c_p2.out ());
      copyToJava (_jni, _j_p1, _c_p1);
      holderize (_jni, p1, _j_p1, "[Lsimple/TestEnum;");
      jobjectArray _j_p2 = 0;
      copyToJava (_jni, _j_p2, _c_p2.in (), true);
      holderize (_jni, p2, _j_p2, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1Local2TAOPeer_localOp2 (JNIEnv *_jni, jobject _jthis, jobject s1)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      jobjectArray _j_s1 = deholderize<jobjectArray> (_jni, s1, "[Lsimple/TestStruct;");
      simple::TestStructSequence _c_s1;
      copyToCxx (_jni, _c_s1, _j_s1);
      CORBA::Boolean _c_ret = _this->localOp2 (_c_s1);
      copyToJava (_jni, _j_s1, _c_s1);
      holderize (_jni, s1, _j_s1, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobjectArray JNICALL
Java_simple__1Local2TAOPeer_returnASequence (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      CORBA::Short _c_p1;
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestStruct;");
      simple::TestStruct _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::EnumSeq_var _c_ret = _this->returnASequence (_c_p1, _c_p2);
      jshort _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "S");
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestStruct;");
      jobjectArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local2TAOPeer_primitive (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jobject p6, jobject p7, jobject p8)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      jboolean _j_p1 = deholderize<jboolean> (_jni, p1, "Z");
      CORBA::Boolean _c_p1 = _j_p1;
      CORBA::Char _c_p2;
      jbyte _j_p3 = deholderize<jbyte> (_jni, p3, "B");
      CORBA::Octet _c_p3 = _j_p3;
      CORBA::Short _c_p4;
      jint _j_p5 = deholderize<jint> (_jni, p5, "I");
      CORBA::ULong _c_p5 = _j_p5;
      CORBA::LongLong _c_p6;
      jfloat _j_p7 = deholderize<jfloat> (_jni, p7, "F");
      CORBA::Float _c_p7 = _j_p7;
      CORBA::Double _c_p8;
      _this->primitive (_c_p1, _c_p2, _c_p3, _c_p4, _c_p5, _c_p6, _c_p7, _c_p8);
      _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "Z");
      jchar _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "C");
      _j_p3 = _c_p3;
      holderize (_jni, p3, _j_p3, "B");
      jshort _j_p4 = _c_p4;
      holderize (_jni, p4, _j_p4, "S");
      _j_p5 = _c_p5;
      holderize (_jni, p5, _j_p5, "I");
      jlong _j_p6 = _c_p6;
      holderize (_jni, p6, _j_p6, "J");
      _j_p7 = _c_p7;
      holderize (_jni, p7, _j_p7, "F");
      jdouble _j_p8 = _c_p8;
      holderize (_jni, p8, _j_p8, "D");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1Local2TAOPeer_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local2TAOPeer_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jdouble JNICALL
Java_simple__1Local2TAOPeer_attr2 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      CORBA::Double _c_ret = _this->attr2 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local2TAOPeer_attr2_D (JNIEnv *_jni, jobject _jthis, jdouble attr2_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local2_var _this = simple::Local2::_narrow (_this_obj);
      _this->attr2 (attr2_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: Local2 */


/* Begin TYPEDEF: Local2Seq */

void copyToCxx (JNIEnv *jni, simple::Local2Seq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const simple::Local2Seq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "simple/Local2");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      simple::Local2_var var = simple::Local2::_duplicate (source[i]);
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: Local2Seq */


/* Begin STRUCT: StructWithObjref */

void copyToCxx (JNIEnv *jni, simple::StructWithObjref &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "objref", "Lsimple/Local2;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.objref, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "objrefsequence", "[Lsimple/Local2;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.objrefsequence, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::StructWithObjref &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "simple/StructWithObjref");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "objref", "Lsimple/Local2;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.objref, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "objrefsequence", "[Lsimple/Local2;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.objrefsequence, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: StructWithObjref */


/* Begin INTERFACE: Local3 */

void copyToCxx (JNIEnv *jni, simple::Local3_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = simple::Local3::_unchecked_narrow (c);
    }
  else
    {
      target = new simple_Local3JavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const simple::Local3_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "simple/_Local3TAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple_Local3Helper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  simple::Local3_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

simple::StructWithObjref* simple_Local3JavaPeer::op3 (const simple::StructWithObjref& p1, simple::StructWithObjref& p2, simple::StructWithObjref_out p3)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_p1 = 0;
  copyToJava (_jni, _j_p1, p1, true);
  jobject _n_p2 = 0;
  copyToJava (_jni, _n_p2, p2, true);
  jclass _hc_p2 = findClass (_jni, "simple/StructWithObjrefHolder");
  jmethodID _hm_p2 = _jni->GetMethodID (_hc_p2, "<init>", "()V");
  jobject _j_p2 = _jni->NewObject (_hc_p2, _hm_p2);
  holderize (_jni, _j_p2, _n_p2, "Lsimple/StructWithObjref;");
  jclass _hc_p3 = findClass (_jni, "simple/StructWithObjrefHolder");
  jmethodID _hm_p3 = _jni->GetMethodID (_hc_p3, "<init>", "()V");
  jobject _j_p3 = _jni->NewObject (_hc_p3, _hm_p3);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "op3", "(Lsimple/StructWithObjref;Lsimple/StructWithObjrefHolder;Lsimple/StructWithObjrefHolder;)Lsimple/StructWithObjref;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_p1, _j_p2, _j_p3);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_p2 = deholderize<jobject> (_jni, _j_p2, "Lsimple/StructWithObjref;");
  _jni->DeleteLocalRef (_j_p2);
  copyToCxx (_jni, p2, _o_p2);
  _jni->DeleteLocalRef (_o_p2);
  jobject _o_p3 = deholderize<jobject> (_jni, _j_p3, "Lsimple/StructWithObjref;");
  _jni->DeleteLocalRef (_j_p3);
  simple::StructWithObjref_var _c_p3 = new simple::StructWithObjref;
  copyToCxx (_jni, _c_p3, _o_p3);
  p3 = _c_p3.out ();
  _jni->DeleteLocalRef (_o_p3);
  simple::StructWithObjref_var _c_ret = new simple::StructWithObjref;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1Local3TAOPeer_op3 (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      simple::StructWithObjref _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/StructWithObjref;");
      simple::StructWithObjref _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::StructWithObjref_var _c_p3;
      simple::StructWithObjref_var _c_ret = _this->op3 (_c_p1, _c_p2, _c_p3.out ());
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/StructWithObjref;");
      jobject _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3.in (), true);
      holderize (_jni, p3, _j_p3, "Lsimple/StructWithObjref;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_simple__1Local3TAOPeer_op (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      simple::TestLI_var _c_p1;
      copyToCxx (_jni, _c_p1, p1);
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestLI;");
      simple::TestLI_var _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::TestLI_var _c_p3;
      simple::TestLI_var _c_ret = _this->op (_c_p1.in (), _c_p2.inout (), _c_p3.out ());
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestLI;");
      jobject _j_p3 = 0;
      copyToJava (_jni, _j_p3, _c_p3, true);
      holderize (_jni, p3, _j_p3, "Lsimple/TestLI;");
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1Local3TAOPeer_localOp (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      jobjectArray _j_p1 = deholderize<jobjectArray> (_jni, p1, "[Lsimple/TestEnum;");
      simple::EnumSeq _c_p1;
      copyToCxx (_jni, _c_p1, _j_p1);
      simple::TestStructSequence_var _c_p2;
      CORBA::Boolean _c_ret = _this->localOp (_c_p1, _c_p2.out ());
      copyToJava (_jni, _j_p1, _c_p1);
      holderize (_jni, p1, _j_p1, "[Lsimple/TestEnum;");
      jobjectArray _j_p2 = 0;
      copyToJava (_jni, _j_p2, _c_p2.in (), true);
      holderize (_jni, p2, _j_p2, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_simple__1Local3TAOPeer_localOp2 (JNIEnv *_jni, jobject _jthis, jobject s1)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      jobjectArray _j_s1 = deholderize<jobjectArray> (_jni, s1, "[Lsimple/TestStruct;");
      simple::TestStructSequence _c_s1;
      copyToCxx (_jni, _c_s1, _j_s1);
      CORBA::Boolean _c_ret = _this->localOp2 (_c_s1);
      copyToJava (_jni, _j_s1, _c_s1);
      holderize (_jni, s1, _j_s1, "[Lsimple/TestStruct;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobjectArray JNICALL
Java_simple__1Local3TAOPeer_returnASequence (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      CORBA::Short _c_p1;
      jobject _j_p2 = deholderize<jobject> (_jni, p2, "Lsimple/TestStruct;");
      simple::TestStruct _c_p2;
      copyToCxx (_jni, _c_p2, _j_p2);
      simple::EnumSeq_var _c_ret = _this->returnASequence (_c_p1, _c_p2);
      jshort _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "S");
      copyToJava (_jni, _j_p2, _c_p2);
      holderize (_jni, p2, _j_p2, "Lsimple/TestStruct;");
      jobjectArray _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local3TAOPeer_primitive (JNIEnv *_jni, jobject _jthis, jobject p1, jobject p2, jobject p3, jobject p4, jobject p5, jobject p6, jobject p7, jobject p8)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      jboolean _j_p1 = deholderize<jboolean> (_jni, p1, "Z");
      CORBA::Boolean _c_p1 = _j_p1;
      CORBA::Char _c_p2;
      jbyte _j_p3 = deholderize<jbyte> (_jni, p3, "B");
      CORBA::Octet _c_p3 = _j_p3;
      CORBA::Short _c_p4;
      jint _j_p5 = deholderize<jint> (_jni, p5, "I");
      CORBA::ULong _c_p5 = _j_p5;
      CORBA::LongLong _c_p6;
      jfloat _j_p7 = deholderize<jfloat> (_jni, p7, "F");
      CORBA::Float _c_p7 = _j_p7;
      CORBA::Double _c_p8;
      _this->primitive (_c_p1, _c_p2, _c_p3, _c_p4, _c_p5, _c_p6, _c_p7, _c_p8);
      _j_p1 = _c_p1;
      holderize (_jni, p1, _j_p1, "Z");
      jchar _j_p2 = _c_p2;
      holderize (_jni, p2, _j_p2, "C");
      _j_p3 = _c_p3;
      holderize (_jni, p3, _j_p3, "B");
      jshort _j_p4 = _c_p4;
      holderize (_jni, p4, _j_p4, "S");
      _j_p5 = _c_p5;
      holderize (_jni, p5, _j_p5, "I");
      jlong _j_p6 = _c_p6;
      holderize (_jni, p6, _j_p6, "J");
      _j_p7 = _c_p7;
      holderize (_jni, p7, _j_p7, "F");
      jdouble _j_p8 = _c_p8;
      holderize (_jni, p8, _j_p8, "D");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jint JNICALL
Java_simple__1Local3TAOPeer_attr1 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      CORBA::Long _c_ret = _this->attr1 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local3TAOPeer_attr1_I (JNIEnv *_jni, jobject _jthis, jint attr1_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      _this->attr1 (attr1_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jdouble JNICALL
Java_simple__1Local3TAOPeer_attr2 (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      CORBA::Double _c_ret = _this->attr2 ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_simple__1Local3TAOPeer_attr2_D (JNIEnv *_jni, jobject _jthis, jdouble attr2_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      simple::Local3_var _this = simple::Local3::_narrow (_this_obj);
      _this->attr2 (attr2_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: Local3 */

/* End MODULE: simple */
