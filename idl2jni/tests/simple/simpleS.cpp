// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:652

#ifndef _TAO_IDL_SIMPLES_BCAHAZ_CPP_
#define _TAO_IDL_SIMPLES_BCAHAZ_CPP_


#include "simpleS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1868

class TAO_simple_TestInterf_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/openDDS/OpenDDS-3.8/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_simple_TestInterf_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_simple_TestInterf_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19,  0,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
      0,  2, 19, 19, 19, 19, 19, 19, 19, 19,
     19,  0, 19, 19, 19, 19,  5,  5, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_simple_TestInterf_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 2,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},
      {"op1", &POA_simple::TestInterf::op1_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"opu", &POA_simple::TestInterf::opu_skel, 0},
      {"_get_attr1", &POA_simple::TestInterf::_get_attr1_skel, 0},
      {"_set_attr1", &POA_simple::TestInterf::_set_attr1_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,   3,  -1,   4,  -6,  -2,   5,  -1, -22,  -1,   8,  -1, 
        9,  10,  -1,  -1,  11, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_simple_TestInterf_Perfect_Hash_OpTable tao_simple_TestInterf_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_simple::TestInterf::TestInterf (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_simple_TestInterf_optable;
}

POA_simple::TestInterf::TestInterf (const TestInterf& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_simple::TestInterf::~TestInterf (void)
{
}

namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class op1_TestInterf
    : public TAO::Upcall_Command
  {
  public:
    inline op1_TestInterf (
      POA_simple::TestInterf * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::simple::TestArrayTypedef_tag>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::simple::TestArrayTypedef_tag> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::simple::TestEnum>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::simple::TestEnum> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::UShort>::inout_arg_type arg_2 =
        TAO::Portable_Server::get_inout_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::simple::TestSeqTypedef>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::simple::TestSeqTypedef> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< char *>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< char *> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->op1 (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_simple::TestInterf * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf::op1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::simple::TestArrayTypedef_tag>::ret_val retval;
  TAO::SArg_Traits< ::simple::TestEnum>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::CORBA::UShort>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::simple::TestSeqTypedef>::out_arg_val _tao_p3;
  TAO::SArg_Traits< char *>::out_arg_val _tao_p4;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p3,
      &_tao_p4
    };
  
  static size_t const nargs = 5;

  POA_simple::TestInterf * const impl =
    dynamic_cast<POA_simple::TestInterf *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  op1_TestInterf command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class opu_TestInterf
    : public TAO::Upcall_Command
  {
  public:
    inline opu_TestInterf (
      POA_simple::TestInterf * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::simple::TestUnion4>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::simple::TestUnion4> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::simple::TestUnion1>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::simple::TestUnion1> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::simple::TestUnion2>::inout_arg_type arg_2 =
        TAO::Portable_Server::get_inout_arg< ::simple::TestUnion2> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::simple::TestUnion1>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::simple::TestUnion1> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->opu (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_simple::TestInterf * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf::opu_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::simple::TestUnion4>::ret_val retval;
  TAO::SArg_Traits< ::simple::TestUnion1>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::simple::TestUnion2>::inout_arg_val _tao_p2;
  TAO::SArg_Traits< ::simple::TestUnion1>::out_arg_val _tao_p4;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2,
      &_tao_p4
    };
  
  static size_t const nargs = 4;

  POA_simple::TestInterf * const impl =
    dynamic_cast<POA_simple::TestInterf *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  opu_TestInterf command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class _get_attr1_TestInterf
    : public TAO::Upcall_Command
  {
  public:
    inline _get_attr1_TestInterf (
      POA_simple::TestInterf * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->attr1 ();
    }
  
  private:
    POA_simple::TestInterf * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf::_get_attr1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_simple::TestInterf * const impl =
    dynamic_cast<POA_simple::TestInterf *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_attr1_TestInterf command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class _set_attr1_TestInterf
    : public TAO::Upcall_Command
  {
  public:
    inline _set_attr1_TestInterf (
      POA_simple::TestInterf * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->attr1 (
        arg_1);
    }
  
  private:
    POA_simple::TestInterf * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf::_set_attr1_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_attr1;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_attr1
    };
  
  static size_t const nargs = 2;

  POA_simple::TestInterf * const impl =
    dynamic_cast<POA_simple::TestInterf *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_attr1_TestInterf command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_simple::TestInterf::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_simple::TestInterf::_interface_repository_id (void) const
{
  return "IDL:simple/TestInterf:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_simple::TestInterf::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

simple::TestInterf *
POA_simple::TestInterf::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::simple::TestInterf STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1868

class TAO_simple_TestInterf2_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/openDDS/OpenDDS-3.8/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_simple_TestInterf2_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_simple_TestInterf2_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21,  0,
     10, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21,  0, 21,  0, 21, 21,
      0, 10, 21, 21, 21, 21, 21, 21, 21, 21,
     21,  0, 21, 21, 21, 21,  5,  5, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_simple_TestInterf2_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 10,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 20,
      HASH_VALUE_RANGE = 18,
      DUPLICATES = 2,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},
      {"op1", &POA_simple::TestInterf::op1_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"opu", &POA_simple::TestInterf::opu_skel, 0},
      {"_get_attr1", &POA_simple::TestInterf::_get_attr1_skel, 0},
      {"_set_attr1", &POA_simple::TestInterf::_set_attr1_skel, 0},
      {"op2", &POA_simple::TestInterf2::op2_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,   3,  -1,   4,  -6,  -2,   5,  -1, -24,  -1,  -1,   8, 
        9,  10,  -1,  -1,  11,  -1,  12, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_simple_TestInterf2_Perfect_Hash_OpTable tao_simple_TestInterf2_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_simple::TestInterf2::TestInterf2 (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_simple_TestInterf2_optable;
}

POA_simple::TestInterf2::TestInterf2 (const TestInterf2& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_simple::TestInterf (rhs)
{
}

POA_simple::TestInterf2::~TestInterf2 (void)
{
}

namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class op2_TestInterf2
    : public TAO::Upcall_Command
  {
  public:
    inline op2_TestInterf2 (
      POA_simple::TestInterf2 * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::simple::TestArrayTypedef_tag>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::simple::TestArrayTypedef_tag> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::simple::LongSeqSeq>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::simple::LongSeqSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->op2 (
          arg_1
          , arg_2);
    }
  
  private:
    POA_simple::TestInterf2 * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf2::op2_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::simple::TestArrayTypedef_tag>::in_arg_val _tao_p1;
  TAO::SArg_Traits< ::simple::LongSeqSeq>::in_arg_val _tao_p2;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1,
      &_tao_p2
    };
  
  static size_t const nargs = 3;

  POA_simple::TestInterf2 * const impl =
    dynamic_cast<POA_simple::TestInterf2 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  op2_TestInterf2 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_simple::TestInterf2::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf2:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_simple::TestInterf2::_interface_repository_id (void) const
{
  return "IDL:simple/TestInterf2:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_simple::TestInterf2::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

simple::TestInterf2 *
POA_simple::TestInterf2::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::simple::TestInterf2 STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be/be_interface.cpp:1868

class TAO_simple_TestInterf3_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /mnt/openDDS/OpenDDS-3.8/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_simple_TestInterf3_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_simple_TestInterf3_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21,  0,
     10,  4, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21,  0, 21,  0, 21, 21,
      0, 10, 21, 21, 21, 21, 21, 21, 21, 21,
     21,  0, 21, 21, 21, 21,  5,  5, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_simple_TestInterf3_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 20,
      HASH_VALUE_RANGE = 18,
      DUPLICATES = 2,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},
      {"op1", &POA_simple::TestInterf::op1_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"op3", &POA_simple::TestInterf3::op3_skel, 0},
      {"opu", &POA_simple::TestInterf::opu_skel, 0},
      {"_get_attr1", &POA_simple::TestInterf::_get_attr1_skel, 0},
      {"_set_attr1", &POA_simple::TestInterf::_set_attr1_skel, 0},
      {"op2", &POA_simple::TestInterf2::op2_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -7,  -2,   3,  -1,   4,  -1,   5,   6,  -1, -29,  -1,  -1,   9, 
       10,  11,  -1,  -1,  12,  -1,  13, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_simple_TestInterf3_Perfect_Hash_OpTable tao_simple_TestInterf3_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_simple::TestInterf3::TestInterf3 (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_simple_TestInterf3_optable;
}

POA_simple::TestInterf3::TestInterf3 (const TestInterf3& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_simple::TestInterf (rhs),
    POA_simple::TestInterf2 (rhs)
{
}

POA_simple::TestInterf3::~TestInterf3 (void)
{
}

namespace POA_simple
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:83

  class op3_TestInterf3
    : public TAO::Upcall_Command
  {
  public:
    inline op3_TestInterf3 (
      POA_simple::TestInterf3 * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::simple::TestNestedStruct>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::simple::TestNestedStruct> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->op3 (
        arg_1);
    }
  
  private:
    POA_simple::TestInterf3 * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_simple::TestInterf3::op3_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::simple::TestNestedStruct>::in_arg_val _tao_p1;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p1
    };
  
  static size_t const nargs = 2;

  POA_simple::TestInterf3 * const impl =
    dynamic_cast<POA_simple::TestInterf3 *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  op3_TestInterf3 command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_simple::TestInterf3::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf2:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:simple/TestInterf3:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_simple::TestInterf3::_interface_repository_id (void) const
{
  return "IDL:simple/TestInterf3:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_simple::TestInterf3::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

simple::TestInterf3 *
POA_simple::TestInterf3::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::simple::TestInterf3 STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

