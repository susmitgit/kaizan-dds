#include "DdsDcpsCoreJC.h"
#include "idl2jni_runtime.h"

/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsCore.idl */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */

void copyToCxx (JNIEnv *jni, DDS::StringSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::StringSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */

void copyToCxx (JNIEnv *jni, DDS::BuiltinTopicKeyValue &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const DDS::BuiltinTopicKeyValue &source, bool createNewObject)
{
  jsize len = 3;
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}

void copyToCxx (JNIEnv *jni, DDS::BuiltinTopicKeyValue_var &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const DDS::BuiltinTopicKeyValue_var &source, bool createNewObject)
{
  jsize len = 3;
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */

void copyToCxx (JNIEnv *jni, DDS::InstanceHandleSeq &target, jintArray source)
{
  jintArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jintArray &target, const DDS::InstanceHandleSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jintArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewIntArray (len);
    }
  else
    {
      arr = target;
    }
  jint *buf = jni->GetIntArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseIntArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */

void copyToCxx (JNIEnv *jni, DDS::QosPolicyCount &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "policy_id", "I");
    target.policy_id = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    target.count = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::QosPolicyCount &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/QosPolicyCount");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "policy_id", "I");
    jni->SetIntField (target, fid, source.policy_id);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    jni->SetIntField (target, fid, source.count);
  }
}


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */

void copyToCxx (JNIEnv *jni, DDS::QosPolicyCountSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::QosPolicyCountSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "DDS/QosPolicyCount");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      DDS::QosPolicyCount var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */

void copyToCxx (JNIEnv *jni, DDS::OctetSeq &target, jbyteArray source)
{
  jbyteArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  jbyte *buf = jni->GetByteArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseByteArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jbyteArray &target, const DDS::OctetSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jbyteArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewByteArray (len);
    }
  else
    {
      arr = target;
    }
  jbyte *buf = jni->GetByteArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseByteArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */

void copyToCxx (JNIEnv *jni, DDS::Duration_t &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "sec", "I");
    target.sec = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "nanosec", "I");
    target.nanosec = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Duration_t &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/Duration_t");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sec", "I");
    jni->SetIntField (target, fid, source.sec);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "nanosec", "I");
    jni->SetIntField (target, fid, source.nanosec);
  }
}


/* End STRUCT: Duration_t */


/* Begin STRUCT: UserDataQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::UserDataQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = static_cast<jbyteArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.value, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::UserDataQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/UserDataQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = createNewObject ? 0 : static_cast<jbyteArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.value, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::GroupDataQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = static_cast<jbyteArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.value, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::GroupDataQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/GroupDataQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = createNewObject ? 0 : static_cast<jbyteArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.value, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::TopicDataQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = static_cast<jbyteArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.value, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicDataQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/TopicDataQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[B");
    jbyteArray obj = createNewObject ? 0 : static_cast<jbyteArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.value, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::PartitionQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "name", "[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.name, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PartitionQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/PartitionQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "name", "[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::HistoryQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::HistoryQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::HistoryQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/HistoryQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/HistoryQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::DurabilityQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::DurabilityQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DurabilityQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/DurabilityQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/DurabilityQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::DurabilityQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/DurabilityQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DurabilityQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DurabilityQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/DurabilityQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::DurabilityServiceQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "service_cleanup_delay", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.service_cleanup_delay, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history_kind", "LDDS/HistoryQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.history_kind, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history_depth", "I");
    target.history_depth = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples", "I");
    target.max_samples = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_instances", "I");
    target.max_instances = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples_per_instance", "I");
    target.max_samples_per_instance = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DurabilityServiceQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DurabilityServiceQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "service_cleanup_delay", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.service_cleanup_delay, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history_kind", "LDDS/HistoryQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.history_kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history_depth", "I");
    jni->SetIntField (target, fid, source.history_depth);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples", "I");
    jni->SetIntField (target, fid, source.max_samples);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_instances", "I");
    jni->SetIntField (target, fid, source.max_instances);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples_per_instance", "I");
    jni->SetIntField (target, fid, source.max_samples_per_instance);
  }
}


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::DeadlineQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "period", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.period, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DeadlineQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DeadlineQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "period", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.period, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::LatencyBudgetQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "duration", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.duration, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LatencyBudgetQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/LatencyBudgetQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "duration", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.duration, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::LivelinessQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::LivelinessQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LivelinessQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/LivelinessQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/LivelinessQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::LivelinessQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/LivelinessQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lease_duration", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.lease_duration, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LivelinessQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/LivelinessQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/LivelinessQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lease_duration", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.lease_duration, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::ReliabilityQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::ReliabilityQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ReliabilityQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/ReliabilityQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/ReliabilityQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::ReliabilityQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/ReliabilityQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_blocking_time", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.max_blocking_time, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ReliabilityQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/ReliabilityQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/ReliabilityQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_blocking_time", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.max_blocking_time, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::DestinationOrderQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::DestinationOrderQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DestinationOrderQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/DestinationOrderQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/DestinationOrderQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::DestinationOrderQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/DestinationOrderQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DestinationOrderQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DestinationOrderQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/DestinationOrderQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::HistoryQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/HistoryQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "depth", "I");
    target.depth = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::HistoryQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/HistoryQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/HistoryQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "depth", "I");
    jni->SetIntField (target, fid, source.depth);
  }
}


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::ResourceLimitsQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples", "I");
    target.max_samples = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_instances", "I");
    target.max_instances = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples_per_instance", "I");
    target.max_samples_per_instance = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ResourceLimitsQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/ResourceLimitsQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples", "I");
    jni->SetIntField (target, fid, source.max_samples);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_instances", "I");
    jni->SetIntField (target, fid, source.max_instances);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "max_samples_per_instance", "I");
    jni->SetIntField (target, fid, source.max_samples_per_instance);
  }
}


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::TransportPriorityQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "I");
    target.value = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TransportPriorityQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/TransportPriorityQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "I");
    jni->SetIntField (target, fid, source.value);
  }
}


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::LifespanQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "duration", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.duration, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LifespanQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/LifespanQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "duration", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.duration, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */

void copyToCxx (JNIEnv *jni, DDS::OwnershipQosPolicyKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::OwnershipQosPolicyKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::OwnershipQosPolicyKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/OwnershipQosPolicyKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/OwnershipQosPolicyKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::OwnershipQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/OwnershipQosPolicyKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.kind, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::OwnershipQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/OwnershipQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "kind", "LDDS/OwnershipQosPolicyKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.kind, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::OwnershipStrengthQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "I");
    target.value = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::OwnershipStrengthQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/OwnershipStrengthQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "I");
    jni->SetIntField (target, fid, source.value);
  }
}


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */

void copyToCxx (JNIEnv *jni, DDS::PresentationQosPolicyAccessScopeKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::PresentationQosPolicyAccessScopeKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PresentationQosPolicyAccessScopeKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/PresentationQosPolicyAccessScopeKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/PresentationQosPolicyAccessScopeKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::PresentationQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "access_scope", "LDDS/PresentationQosPolicyAccessScopeKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.access_scope, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "coherent_access", "Z");
    target.coherent_access = jni->GetBooleanField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ordered_access", "Z");
    target.ordered_access = jni->GetBooleanField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PresentationQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/PresentationQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "access_scope", "LDDS/PresentationQosPolicyAccessScopeKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.access_scope, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "coherent_access", "Z");
    jni->SetBooleanField (target, fid, source.coherent_access);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ordered_access", "Z");
    jni->SetBooleanField (target, fid, source.ordered_access);
  }
}


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::TimeBasedFilterQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "minimum_separation", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.minimum_separation, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TimeBasedFilterQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/TimeBasedFilterQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "minimum_separation", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.minimum_separation, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */

void copyToCxx (JNIEnv *jni, DDS::TopicQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability_service, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.history, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.resource_limits, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.transport_priority, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.lifespan, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/TopicQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability_service, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.history, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.resource_limits, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.transport_priority, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.lifespan, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::WriterDataLifecycleQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "autodispose_unregistered_instances", "Z");
    target.autodispose_unregistered_instances = jni->GetBooleanField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::WriterDataLifecycleQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/WriterDataLifecycleQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "autodispose_unregistered_instances", "Z");
    jni->SetBooleanField (target, fid, source.autodispose_unregistered_instances);
  }
}


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */

void copyToCxx (JNIEnv *jni, DDS::DataWriterQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability_service, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.history, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.resource_limits, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.transport_priority, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.lifespan, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership_strength", "LDDS/OwnershipStrengthQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership_strength, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "writer_data_lifecycle", "LDDS/WriterDataLifecycleQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.writer_data_lifecycle, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriterQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DataWriterQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability_service, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.history, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.resource_limits, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.transport_priority, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.lifespan, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership_strength", "LDDS/OwnershipStrengthQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership_strength, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "writer_data_lifecycle", "LDDS/WriterDataLifecycleQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.writer_data_lifecycle, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::EntityFactoryQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "autoenable_created_entities", "Z");
    target.autoenable_created_entities = jni->GetBooleanField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::EntityFactoryQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/EntityFactoryQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "autoenable_created_entities", "Z");
    jni->SetBooleanField (target, fid, source.autoenable_created_entities);
  }
}


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */

void copyToCxx (JNIEnv *jni, DDS::PublisherQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.presentation, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.partition, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.group_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.entity_factory, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublisherQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/PublisherQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.presentation, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.partition, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.group_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.entity_factory, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */

void copyToCxx (JNIEnv *jni, DDS::ReaderDataLifecycleQosPolicy &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "autopurge_nowriter_samples_delay", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.autopurge_nowriter_samples_delay, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "autopurge_disposed_samples_delay", "LDDS/Duration_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.autopurge_disposed_samples_delay, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ReaderDataLifecycleQosPolicy &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/ReaderDataLifecycleQosPolicy");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "autopurge_nowriter_samples_delay", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.autopurge_nowriter_samples_delay, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "autopurge_disposed_samples_delay", "LDDS/Duration_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.autopurge_disposed_samples_delay, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */

void copyToCxx (JNIEnv *jni, DDS::DataReaderQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.history, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.resource_limits, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "time_based_filter", "LDDS/TimeBasedFilterQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.time_based_filter, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reader_data_lifecycle", "LDDS/ReaderDataLifecycleQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reader_data_lifecycle, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReaderQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DataReaderQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.history, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.resource_limits, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "time_based_filter", "LDDS/TimeBasedFilterQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.time_based_filter, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reader_data_lifecycle", "LDDS/ReaderDataLifecycleQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reader_data_lifecycle, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */

void copyToCxx (JNIEnv *jni, DDS::SubscriberQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.presentation, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.partition, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.group_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.entity_factory, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriberQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SubscriberQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.presentation, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.partition, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.group_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.entity_factory, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */

void copyToCxx (JNIEnv *jni, DDS::DomainParticipantFactoryQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.entity_factory, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipantFactoryQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DomainParticipantFactoryQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.entity_factory, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */

void copyToCxx (JNIEnv *jni, DDS::DomainParticipantQos &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.entity_factory, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipantQos &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/DomainParticipantQos");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "entity_factory", "LDDS/EntityFactoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.entity_factory, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */

void copyToCxx (JNIEnv *jni, DDS::BuiltinTopicKey_t &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.value, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::BuiltinTopicKey_t &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/BuiltinTopicKey_t");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "value", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.value, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */

void copyToCxx (JNIEnv *jni, DDS::ParticipantBuiltinTopicData &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ParticipantBuiltinTopicData &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/ParticipantBuiltinTopicData");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */

void copyToCxx (JNIEnv *jni, DDS::PublicationBuiltinTopicData &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "participant_key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.participant_key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.type_name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability_service, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.lifespan, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership_strength", "LDDS/OwnershipStrengthQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership_strength, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.presentation, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.partition, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.group_data, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublicationBuiltinTopicData &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/PublicationBuiltinTopicData");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "participant_key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.participant_key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.type_name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability_service, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.lifespan, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership_strength", "LDDS/OwnershipStrengthQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership_strength, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.presentation, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.partition, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.group_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */

void copyToCxx (JNIEnv *jni, DDS::SubscriptionBuiltinTopicData &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "participant_key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.participant_key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.type_name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.user_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "time_based_filter", "LDDS/TimeBasedFilterQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.time_based_filter, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.presentation, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.partition, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.group_data, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriptionBuiltinTopicData &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SubscriptionBuiltinTopicData");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "participant_key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.participant_key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.type_name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "user_data", "LDDS/UserDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.user_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "time_based_filter", "LDDS/TimeBasedFilterQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.time_based_filter, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "presentation", "LDDS/PresentationQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.presentation, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "partition", "LDDS/PartitionQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.partition, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "group_data", "LDDS/GroupDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.group_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */

void copyToCxx (JNIEnv *jni, DDS::TopicBuiltinTopicData &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.key, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.type_name, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.durability_service, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.deadline, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.latency_budget, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.liveliness, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.reliability, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.transport_priority, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.lifespan, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.destination_order, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.history, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.resource_limits, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.ownership, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.topic_data, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicBuiltinTopicData &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/TopicBuiltinTopicData");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "key", "LDDS/BuiltinTopicKey_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.key, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "type_name", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.type_name, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability", "LDDS/DurabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "durability_service", "LDDS/DurabilityServiceQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.durability_service, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "deadline", "LDDS/DeadlineQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.deadline, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "latency_budget", "LDDS/LatencyBudgetQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.latency_budget, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "liveliness", "LDDS/LivelinessQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.liveliness, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "reliability", "LDDS/ReliabilityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.reliability, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "transport_priority", "LDDS/TransportPriorityQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.transport_priority, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "lifespan", "LDDS/LifespanQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.lifespan, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "destination_order", "LDDS/DestinationOrderQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.destination_order, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "history", "LDDS/HistoryQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.history, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "resource_limits", "LDDS/ResourceLimitsQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.resource_limits, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "ownership", "LDDS/OwnershipQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.ownership, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "topic_data", "LDDS/TopicDataQosPolicy;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.topic_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */

void copyToCxx (JNIEnv *jni, DDS::Time_t &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "sec", "I");
    target.sec = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "nanosec", "I");
    target.nanosec = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Time_t &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/Time_t");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sec", "I");
    jni->SetIntField (target, fid, source.sec);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "nanosec", "I");
    jni->SetIntField (target, fid, source.nanosec);
  }
}


/* End STRUCT: Time_t */


/* Begin STRUCT: SampleInfo */

void copyToCxx (JNIEnv *jni, DDS::SampleInfo &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "sample_state", "I");
    target.sample_state = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "view_state", "I");
    target.view_state = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "instance_state", "I");
    target.instance_state = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "source_timestamp", "LDDS/Time_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.source_timestamp, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "instance_handle", "I");
    target.instance_handle = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication_handle", "I");
    target.publication_handle = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "disposed_generation_count", "I");
    target.disposed_generation_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "no_writers_generation_count", "I");
    target.no_writers_generation_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sample_rank", "I");
    target.sample_rank = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "generation_rank", "I");
    target.generation_rank = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "absolute_generation_rank", "I");
    target.absolute_generation_rank = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "valid_data", "Z");
    target.valid_data = jni->GetBooleanField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "opendds_reserved_publication_seq", "J");
    target.opendds_reserved_publication_seq = jni->GetLongField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SampleInfo &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SampleInfo");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sample_state", "I");
    jni->SetIntField (target, fid, source.sample_state);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "view_state", "I");
    jni->SetIntField (target, fid, source.view_state);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "instance_state", "I");
    jni->SetIntField (target, fid, source.instance_state);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "source_timestamp", "LDDS/Time_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.source_timestamp, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "instance_handle", "I");
    jni->SetIntField (target, fid, source.instance_handle);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication_handle", "I");
    jni->SetIntField (target, fid, source.publication_handle);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "disposed_generation_count", "I");
    jni->SetIntField (target, fid, source.disposed_generation_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "no_writers_generation_count", "I");
    jni->SetIntField (target, fid, source.no_writers_generation_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "sample_rank", "I");
    jni->SetIntField (target, fid, source.sample_rank);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "generation_rank", "I");
    jni->SetIntField (target, fid, source.generation_rank);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "absolute_generation_rank", "I");
    jni->SetIntField (target, fid, source.absolute_generation_rank);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "valid_data", "Z");
    jni->SetBooleanField (target, fid, source.valid_data);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "opendds_reserved_publication_seq", "J");
    jni->SetLongField (target, fid, source.opendds_reserved_publication_seq);
  }
}


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */

void copyToCxx (JNIEnv *jni, DDS::SampleInfoSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::SampleInfoSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "DDS/SampleInfo");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      DDS::SampleInfo var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */
