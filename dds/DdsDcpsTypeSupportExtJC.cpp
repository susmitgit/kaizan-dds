#include "DdsDcpsTypeSupportExtJC.h"
#include "idl2jni_runtime.h"

/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsTypeSupportExt.idl */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: TypeSupport */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::TypeSupport_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = OpenDDS::DCPS::TypeSupport::_unchecked_narrow (c);
    }
  else
    {
      target = new OpenDDS_DCPS_TypeSupportJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::TypeSupport_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "OpenDDS/DCPS/_TypeSupportTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS_TypeSupportHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  OpenDDS::DCPS::TypeSupport_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::DataWriter_ptr OpenDDS_DCPS_TypeSupportJavaPeer::create_datawriter ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_datawriter", "()LDDS/DataWriter;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataWriter_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_create_1datawriter (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      DDS::DataWriter_var _c_ret = _this->create_datawriter ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataReader_ptr OpenDDS_DCPS_TypeSupportJavaPeer::create_datareader ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_datareader", "()LDDS/DataReader;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReader_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_create_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataReader_ptr OpenDDS_DCPS_TypeSupportJavaPeer::create_multitopic_datareader ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_multitopic_datareader", "()LDDS/DataReader;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReader_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_create_1multitopic_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_multitopic_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

CORBA::Boolean OpenDDS_DCPS_TypeSupportJavaPeer::has_dcps_key ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "has_dcps_key", "()Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_has_1dcps_1key (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->has_dcps_key ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_register_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->register_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1TypeSupportTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::TypeSupport_var _this = OpenDDS::DCPS::TypeSupport::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TypeSupport */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
