#include "DdsDcpsPublicationJC.h"
#include "idl2jni_runtime.h"

#include "dds/DdsDcpsTopicC.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsPublication.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Topic */


/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataWriter */


/* End INTERFACE-FWD: DataWriter */


/* Begin INTERFACE-FWD: Publisher */


/* End INTERFACE-FWD: Publisher */


/* Begin INTERFACE: DataWriterListener */

void copyToCxx (JNIEnv *jni, DDS::DataWriterListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DataWriterListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DataWriterListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriterListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DataWriterListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DataWriterListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DataWriterListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void DDS_DataWriterListenerJavaPeer::on_offered_deadline_missed (DDS::DataWriter_ptr writer, const DDS::OfferedDeadlineMissedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_offered_deadline_missed", "(LDDS/DataWriter;LDDS/OfferedDeadlineMissedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataWriterListenerTAOPeer_on_1offered_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriterListener_var _this = DDS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_deadline_missed (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataWriterListenerJavaPeer::on_offered_incompatible_qos (DDS::DataWriter_ptr writer, const DDS::OfferedIncompatibleQosStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_offered_incompatible_qos", "(LDDS/DataWriter;LDDS/OfferedIncompatibleQosStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataWriterListenerTAOPeer_on_1offered_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriterListener_var _this = DDS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_incompatible_qos (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataWriterListenerJavaPeer::on_liveliness_lost (DDS::DataWriter_ptr writer, const DDS::LivelinessLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_liveliness_lost", "(LDDS/DataWriter;LDDS/LivelinessLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataWriterListenerTAOPeer_on_1liveliness_1lost (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriterListener_var _this = DDS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_lost (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataWriterListenerJavaPeer::on_publication_matched (DDS::DataWriter_ptr writer, const DDS::PublicationMatchedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_publication_matched", "(LDDS/DataWriter;LDDS/PublicationMatchedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataWriterListenerTAOPeer_on_1publication_1matched (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriterListener_var _this = DDS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_matched (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: DataWriterListener */


/* Begin INTERFACE: PublisherListener */

void copyToCxx (JNIEnv *jni, DDS::PublisherListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::PublisherListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_PublisherListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublisherListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_PublisherListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_PublisherListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::PublisherListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1PublisherListenerTAOPeer_on_1offered_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::PublisherListener_var _this = DDS::PublisherListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_deadline_missed (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1PublisherListenerTAOPeer_on_1offered_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::PublisherListener_var _this = DDS::PublisherListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_incompatible_qos (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1PublisherListenerTAOPeer_on_1liveliness_1lost (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::PublisherListener_var _this = DDS::PublisherListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_lost (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1PublisherListenerTAOPeer_on_1publication_1matched (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::PublisherListener_var _this = DDS::PublisherListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_matched (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: PublisherListener */


/* Begin INTERFACE: DataWriter */

void copyToCxx (JNIEnv *jni, DDS::DataWriter_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DataWriter::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DataWriterJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriter_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DataWriterTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DataWriterHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DataWriter_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::set_qos (const DDS::DataWriterQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/DataWriterQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_qos (DDS::DataWriterQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DataWriterQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DataWriterQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/DataWriterQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DataWriterQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::set_listener (DDS::DataWriterListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::DataWriterListener_var _c_a_listener = DDS::DataWriterListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/DataWriterListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataWriterListener_ptr DDS_DataWriterJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/DataWriterListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataWriterListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataWriterTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Topic_ptr DDS_DataWriterJavaPeer::get_topic ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_topic", "()LDDS/Topic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Topic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataWriterTAOPeer_get_1topic (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::Topic_var _c_ret = _this->get_topic ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Publisher_ptr DDS_DataWriterJavaPeer::get_publisher ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_publisher", "()LDDS/Publisher;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Publisher_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataWriterTAOPeer_get_1publisher (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::Publisher_var _c_ret = _this->get_publisher ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::wait_for_acknowledgments (const DDS::Duration_t& max_wait)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_max_wait = 0;
  copyToJava (_jni, _j_max_wait, max_wait, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "wait_for_acknowledgments", "(LDDS/Duration_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_max_wait);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_wait_1for_1acknowledgments (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_acknowledgments (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_liveliness_lost_status (DDS::LivelinessLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/LivelinessLostStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/LivelinessLostStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_liveliness_lost_status", "(LDDS/LivelinessLostStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/LivelinessLostStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1liveliness_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessLostStatus;");
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_offered_deadline_missed_status (DDS::OfferedDeadlineMissedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/OfferedDeadlineMissedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/OfferedDeadlineMissedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_offered_deadline_missed_status", "(LDDS/OfferedDeadlineMissedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/OfferedDeadlineMissedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1offered_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedDeadlineMissedStatus;");
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_offered_incompatible_qos_status (DDS::OfferedIncompatibleQosStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/OfferedIncompatibleQosStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/OfferedIncompatibleQosStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_offered_incompatible_qos_status", "(LDDS/OfferedIncompatibleQosStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/OfferedIncompatibleQosStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1offered_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedIncompatibleQosStatus;");
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_publication_matched_status (DDS::PublicationMatchedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/PublicationMatchedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/PublicationMatchedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_publication_matched_status", "(LDDS/PublicationMatchedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/PublicationMatchedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1publication_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/PublicationMatchedStatus;");
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_publication_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/PublicationMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::assert_liveliness ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "assert_liveliness", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_assert_1liveliness (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->assert_liveliness ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_matched_subscriptions (DDS::InstanceHandleSeq& subscription_handles)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jintArray _n_subscription_handles = 0;
  copyToJava (_jni, _n_subscription_handles, subscription_handles, true);
  jclass _hc_subscription_handles = findClass (_jni, "DDS/InstanceHandleSeqHolder");
  jmethodID _hm_subscription_handles = _jni->GetMethodID (_hc_subscription_handles, "<init>", "()V");
  jobject _j_subscription_handles = _jni->NewObject (_hc_subscription_handles, _hm_subscription_handles);
  holderize (_jni, _j_subscription_handles, _n_subscription_handles, "[I");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_matched_subscriptions", "(LDDS/InstanceHandleSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_subscription_handles);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jintArray _o_subscription_handles = deholderize<jintArray> (_jni, _j_subscription_handles, "[I");
  _jni->DeleteLocalRef (_j_subscription_handles);
  copyToCxx (_jni, subscription_handles, _o_subscription_handles);
  _jni->DeleteLocalRef (_o_subscription_handles);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1matched_1subscriptions (JNIEnv *_jni, jobject _jthis, jobject subscription_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jintArray _j_subscription_handles = deholderize<jintArray> (_jni, subscription_handles, "[I");
      DDS::InstanceHandleSeq _c_subscription_handles;
      copyToCxx (_jni, _c_subscription_handles, _j_subscription_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscriptions (_c_subscription_handles);
      copyToJava (_jni, _j_subscription_handles, _c_subscription_handles);
      holderize (_jni, subscription_handles, _j_subscription_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataWriterJavaPeer::get_matched_subscription_data (DDS::SubscriptionBuiltinTopicData& subscription_data, DDS::InstanceHandle_t subscription_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_subscription_data = 0;
  copyToJava (_jni, _n_subscription_data, subscription_data, true);
  jclass _hc_subscription_data = findClass (_jni, "DDS/SubscriptionBuiltinTopicDataHolder");
  jmethodID _hm_subscription_data = _jni->GetMethodID (_hc_subscription_data, "<init>", "()V");
  jobject _j_subscription_data = _jni->NewObject (_hc_subscription_data, _hm_subscription_data);
  holderize (_jni, _j_subscription_data, _n_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_matched_subscription_data", "(LDDS/SubscriptionBuiltinTopicDataHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_subscription_data, subscription_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_subscription_data = deholderize<jobject> (_jni, _j_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
  _jni->DeleteLocalRef (_j_subscription_data);
  copyToCxx (_jni, subscription_data, _o_subscription_data);
  _jni->DeleteLocalRef (_o_subscription_data);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1matched_1subscription_1data (JNIEnv *_jni, jobject _jthis, jobject subscription_data, jint subscription_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      jobject _j_subscription_data = deholderize<jobject> (_jni, subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      DDS::SubscriptionBuiltinTopicData _c_subscription_data;
      copyToCxx (_jni, _c_subscription_data, _j_subscription_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscription_data (_c_subscription_data, subscription_handle);
      copyToJava (_jni, _j_subscription_data, _c_subscription_data);
      holderize (_jni, subscription_data, _j_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataWriterTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataWriterTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataWriter_var _this = DDS::DataWriter::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: DataWriter */


/* Begin INTERFACE: Publisher */

void copyToCxx (JNIEnv *jni, DDS::Publisher_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Publisher::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_PublisherJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Publisher_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_PublisherTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_PublisherHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Publisher_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::DataWriter_ptr DDS_PublisherJavaPeer::create_datawriter (DDS::Topic_ptr a_topic, const DDS::DataWriterQos& qos, DDS::DataWriterListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_topic = 0;
  DDS::Topic_var _c_a_topic = DDS::Topic::_duplicate (a_topic);
  copyToJava (_jni, _j_a_topic, _c_a_topic, true);
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::DataWriterListener_var _c_a_listener = DDS::DataWriterListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_datawriter", "(LDDS/Topic;LDDS/DataWriterQos;LDDS/DataWriterListener;I)LDDS/DataWriter;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_a_topic, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataWriter_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1PublisherTAOPeer_create_1datawriter (JNIEnv *_jni, jobject _jthis, jobject a_topic, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::Topic_var _c_a_topic;
      copyToCxx (_jni, _c_a_topic, a_topic);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::DataWriterListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::DataWriter_var _c_ret = _this->create_datawriter (_c_a_topic.in (), _c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::delete_datawriter (DDS::DataWriter_ptr a_datawriter)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_datawriter = 0;
  DDS::DataWriter_var _c_a_datawriter = DDS::DataWriter::_duplicate (a_datawriter);
  copyToJava (_jni, _j_a_datawriter, _c_a_datawriter, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_datawriter", "(LDDS/DataWriter;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_datawriter);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_delete_1datawriter (JNIEnv *_jni, jobject _jthis, jobject a_datawriter)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::DataWriter_var _c_a_datawriter;
      copyToCxx (_jni, _c_a_datawriter, a_datawriter);
      DDS::ReturnCode_t _c_ret = _this->delete_datawriter (_c_a_datawriter.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataWriter_ptr DDS_PublisherJavaPeer::lookup_datawriter (const char * topic_name)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_topic_name = 0;
  copyToJava (_jni, _j_topic_name, topic_name, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_datawriter", "(Ljava/lang/String;)LDDS/DataWriter;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_topic_name);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataWriter_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1PublisherTAOPeer_lookup_1datawriter (JNIEnv *_jni, jobject _jthis, jobject topic_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      CORBA::String_var _c_topic_name;
      copyToCxx (_jni, _c_topic_name, topic_name);
      DDS::DataWriter_var _c_ret = _this->lookup_datawriter (_c_topic_name.in ());
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::delete_contained_entities ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_contained_entities", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::set_qos (const DDS::PublisherQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/PublisherQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::PublisherQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::get_qos (DDS::PublisherQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/PublisherQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/PublisherQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/PublisherQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/PublisherQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/PublisherQos;");
      DDS::PublisherQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/PublisherQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::set_listener (DDS::PublisherListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::PublisherListener_var _c_a_listener = DDS::PublisherListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/PublisherListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::PublisherListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::PublisherListener_ptr DDS_PublisherJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/PublisherListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::PublisherListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1PublisherTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::PublisherListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::suspend_publications ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "suspend_publications", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_suspend_1publications (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->suspend_publications ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::resume_publications ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "resume_publications", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_resume_1publications (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->resume_publications ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::begin_coherent_changes ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "begin_coherent_changes", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_begin_1coherent_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->begin_coherent_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::end_coherent_changes ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "end_coherent_changes", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_end_1coherent_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->end_coherent_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::wait_for_acknowledgments (const DDS::Duration_t& max_wait)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_max_wait = 0;
  copyToJava (_jni, _j_max_wait, max_wait, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "wait_for_acknowledgments", "(LDDS/Duration_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_max_wait);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_wait_1for_1acknowledgments (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_acknowledgments (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipant_ptr DDS_PublisherJavaPeer::get_participant ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_participant", "()LDDS/DomainParticipant;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipant_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1PublisherTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::set_default_datawriter_qos (const DDS::DataWriterQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_datawriter_qos", "(LDDS/DataWriterQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_set_1default_1datawriter_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_datawriter_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::get_default_datawriter_qos (DDS::DataWriterQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DataWriterQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DataWriterQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_datawriter_qos", "(LDDS/DataWriterQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DataWriterQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_get_1default_1datawriter_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_datawriter_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_PublisherJavaPeer::copy_from_topic_qos (DDS::DataWriterQos& a_datawriter_qos, const DDS::TopicQos& a_topic_qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_a_datawriter_qos = 0;
  copyToJava (_jni, _n_a_datawriter_qos, a_datawriter_qos, true);
  jclass _hc_a_datawriter_qos = findClass (_jni, "DDS/DataWriterQosHolder");
  jmethodID _hm_a_datawriter_qos = _jni->GetMethodID (_hc_a_datawriter_qos, "<init>", "()V");
  jobject _j_a_datawriter_qos = _jni->NewObject (_hc_a_datawriter_qos, _hm_a_datawriter_qos);
  holderize (_jni, _j_a_datawriter_qos, _n_a_datawriter_qos, "LDDS/DataWriterQos;");
  jobject _j_a_topic_qos = 0;
  copyToJava (_jni, _j_a_topic_qos, a_topic_qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "copy_from_topic_qos", "(LDDS/DataWriterQosHolder;LDDS/TopicQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_datawriter_qos, _j_a_topic_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_a_datawriter_qos = deholderize<jobject> (_jni, _j_a_datawriter_qos, "LDDS/DataWriterQos;");
  _jni->DeleteLocalRef (_j_a_datawriter_qos);
  copyToCxx (_jni, a_datawriter_qos, _o_a_datawriter_qos);
  _jni->DeleteLocalRef (_o_a_datawriter_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_copy_1from_1topic_1qos (JNIEnv *_jni, jobject _jthis, jobject a_datawriter_qos, jobject a_topic_qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      jobject _j_a_datawriter_qos = deholderize<jobject> (_jni, a_datawriter_qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_a_datawriter_qos;
      copyToCxx (_jni, _c_a_datawriter_qos, _j_a_datawriter_qos);
      DDS::TopicQos _c_a_topic_qos;
      copyToCxx (_jni, _c_a_topic_qos, a_topic_qos);
      DDS::ReturnCode_t _c_ret = _this->copy_from_topic_qos (_c_a_datawriter_qos, _c_a_topic_qos);
      copyToJava (_jni, _j_a_datawriter_qos, _c_a_datawriter_qos);
      holderize (_jni, a_datawriter_qos, _j_a_datawriter_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1PublisherTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1PublisherTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Publisher_var _this = DDS::Publisher::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: Publisher */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: PublicationLostStatus */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::PublicationLostStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "subscription_handles", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.subscription_handles, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::PublicationLostStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "OpenDDS/DCPS/PublicationLostStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "subscription_handles", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.subscription_handles, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: PublicationLostStatus */


/* Begin TYPEDEF: PublicationDisconnectedStatus */


/* End TYPEDEF: PublicationDisconnectedStatus */


/* Begin TYPEDEF: PublicationReconnectedStatus */


/* End TYPEDEF: PublicationReconnectedStatus */


/* Begin TYPEDEF: DisassociationStatus */


/* End TYPEDEF: DisassociationStatus */


/* Begin INTERFACE: DataWriterListener */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataWriterListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = OpenDDS::DCPS::DataWriterListener::_unchecked_narrow (c);
    }
  else
    {
      target = new OpenDDS_DCPS_DataWriterListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataWriterListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "OpenDDS/DCPS/_DataWriterListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS_DataWriterListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  OpenDDS::DCPS::DataWriterListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void OpenDDS_DCPS_DataWriterListenerJavaPeer::on_publication_disconnected (DDS::DataWriter_ptr reader, const OpenDDS::DCPS::PublicationDisconnectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataWriter_var _c_reader = DDS::DataWriter::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_publication_disconnected", "(LDDS/DataWriter;LOpenDDS/DCPS/PublicationLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1publication_1disconnected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::PublicationDisconnectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_disconnected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataWriterListenerJavaPeer::on_publication_reconnected (DDS::DataWriter_ptr reader, const OpenDDS::DCPS::PublicationReconnectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataWriter_var _c_reader = DDS::DataWriter::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_publication_reconnected", "(LDDS/DataWriter;LOpenDDS/DCPS/PublicationLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1publication_1reconnected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::PublicationReconnectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_reconnected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataWriterListenerJavaPeer::on_publication_lost (DDS::DataWriter_ptr writer, const OpenDDS::DCPS::PublicationLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_publication_lost", "(LDDS/DataWriter;LOpenDDS/DCPS/PublicationLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1publication_1lost (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      OpenDDS::DCPS::PublicationLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_lost (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataWriterListenerJavaPeer::on_connection_deleted (DDS::DataWriter_ptr writer)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_writer = 0;
  DDS::DataWriter_var _c_writer = DDS::DataWriter::_duplicate (writer);
  copyToJava (_jni, _j_writer, _c_writer, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_connection_deleted", "(LDDS/DataWriter;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_writer);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1connection_1deleted (JNIEnv *_jni, jobject _jthis, jobject writer)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      _this->on_connection_deleted (_c_writer.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1offered_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_deadline_missed (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1offered_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_incompatible_qos (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1liveliness_1lost (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_lost (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataWriterListenerTAOPeer_on_1publication_1matched (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataWriterListener_var _this = OpenDDS::DCPS::DataWriterListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_matched (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: DataWriterListener */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
