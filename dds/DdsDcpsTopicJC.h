/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_DDSDCPSTOPICJC_H
#define IDL2JNI_GENERATED_DDSDCPSTOPICJC_H
#include "DdsDcpsTopicC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "dcps_java_export.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsTopic.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: DomainParticipant */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DomainParticipant_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipant_var &source, bool createNewObject);

/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: Topic */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Topic_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Topic_var &source, bool createNewObject);

/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE: TopicDescription */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicDescription_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicDescription_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicDescriptionJavaPeer
  : public virtual IDL2JNI_BaseJavaPeer
  , public virtual DDS::TopicDescription
{
public:
  DDS_TopicDescriptionJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
  {}

  char * get_type_name ();

  char * get_name ();

  DDS::DomainParticipant_ptr get_participant ();

};


/* End INTERFACE: TopicDescription */


/* Begin INTERFACE: TopicListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicListener_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicListenerJavaPeer
  : public virtual DDS_ListenerJavaPeer
  , public virtual DDS::TopicListener
{
public:
  DDS_TopicListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
  {}

  void on_inconsistent_topic (DDS::Topic_ptr the_topic, const DDS::InconsistentTopicStatus& status);

};


/* End INTERFACE: TopicListener */


/* Begin INTERFACE: Topic */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Topic_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Topic_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicJavaPeer
  : public virtual DDS_EntityJavaPeer, public virtual DDS_TopicDescriptionJavaPeer
  , public virtual DDS::Topic
{
public:
  DDS_TopicJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_TopicDescriptionJavaPeer (jni, java)
  {}

  CORBA::Boolean _is_a (const char *type_id)
  {
    return DDS::Topic::_is_a (type_id);
  }

  const char* _interface_repository_id () const
  {
    return DDS::Topic::_interface_repository_id ();
  }

  CORBA::Boolean marshal (TAO_OutputCDR &cdr)
  {
    return DDS::Topic::marshal (cdr);
  }

  DDS::ReturnCode_t set_qos (const DDS::TopicQos& qos);

  DDS::ReturnCode_t get_qos (DDS::TopicQos& qos);

  DDS::ReturnCode_t set_listener (DDS::TopicListener_ptr a_listener, DDS::StatusMask mask);

  DDS::TopicListener_ptr get_listener ();

  DDS::ReturnCode_t get_inconsistent_topic_status (DDS::InconsistentTopicStatus& a_status);

};


/* End INTERFACE: Topic */


/* Begin INTERFACE: ContentFilteredTopic */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ContentFilteredTopic_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::ContentFilteredTopic_var &source, bool createNewObject = false);

class dcps_java_Export DDS_ContentFilteredTopicJavaPeer
  : public virtual DDS_TopicDescriptionJavaPeer
  , public virtual DDS::ContentFilteredTopic
{
public:
  DDS_ContentFilteredTopicJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TopicDescriptionJavaPeer (jni, java)
  {}

  char * get_filter_expression ();

  DDS::ReturnCode_t get_expression_parameters (DDS::StringSeq& params);

  DDS::ReturnCode_t set_expression_parameters (const DDS::StringSeq& expression_parameters);

  DDS::Topic_ptr get_related_topic ();

};


/* End INTERFACE: ContentFilteredTopic */


/* Begin INTERFACE: MultiTopic */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::MultiTopic_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::MultiTopic_var &source, bool createNewObject = false);

class dcps_java_Export DDS_MultiTopicJavaPeer
  : public virtual DDS_TopicDescriptionJavaPeer
  , public virtual DDS::MultiTopic
{
public:
  DDS_MultiTopicJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TopicDescriptionJavaPeer (jni, java)
  {}

  char * get_subscription_expression ();

  DDS::ReturnCode_t get_expression_parameters (DDS::StringSeq& params);

  DDS::ReturnCode_t set_expression_parameters (const DDS::StringSeq& expression_parameters);

};


/* End INTERFACE: MultiTopic */


/* Begin INTERFACE: TypeSupport */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TypeSupport_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TypeSupport_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TypeSupportJavaPeer
  : public virtual IDL2JNI_BaseJavaPeer
  , public virtual DDS::TypeSupport
{
public:
  DDS_TypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t register_type (DDS::DomainParticipant_ptr domain, const char * type_name);

  char * get_type_name ();

};


/* End INTERFACE: TypeSupport */

/* End MODULE: DDS */
#endif /* IDL2JNI_GENERATED_DDSDCPSTOPICJC_H */
