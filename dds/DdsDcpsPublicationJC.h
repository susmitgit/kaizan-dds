/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_DDSDCPSPUBLICATIONJC_H
#define IDL2JNI_GENERATED_DDSDCPSPUBLICATIONJC_H
#include "DdsDcpsPublicationC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "dcps_java_export.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsPublication.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Topic */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Topic_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Topic_var &source, bool createNewObject);

/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE-FWD: DomainParticipant */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DomainParticipant_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipant_var &source, bool createNewObject);

/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriter_var &source, bool createNewObject);

/* End INTERFACE-FWD: DataWriter */


/* Begin INTERFACE-FWD: Publisher */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Publisher_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Publisher_var &source, bool createNewObject);

/* End INTERFACE-FWD: Publisher */


/* Begin INTERFACE: DataWriterListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataWriterListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriterListener_var &source, bool createNewObject = false);

class dcps_java_Export DDS_DataWriterListenerJavaPeer
  : public virtual DDS_ListenerJavaPeer
  , public virtual DDS::DataWriterListener
{
public:
  DDS_DataWriterListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
  {}

  void on_offered_deadline_missed (DDS::DataWriter_ptr writer, const DDS::OfferedDeadlineMissedStatus& status);

  void on_offered_incompatible_qos (DDS::DataWriter_ptr writer, const DDS::OfferedIncompatibleQosStatus& status);

  void on_liveliness_lost (DDS::DataWriter_ptr writer, const DDS::LivelinessLostStatus& status);

  void on_publication_matched (DDS::DataWriter_ptr writer, const DDS::PublicationMatchedStatus& status);

};


/* End INTERFACE: DataWriterListener */


/* Begin INTERFACE: PublisherListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::PublisherListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublisherListener_var &source, bool createNewObject = false);

class dcps_java_Export DDS_PublisherListenerJavaPeer
  : public virtual DDS_DataWriterListenerJavaPeer
  , public virtual DDS::PublisherListener
{
public:
  DDS_PublisherListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
    , DDS_DataWriterListenerJavaPeer (jni, java)
  {}

};


/* End INTERFACE: PublisherListener */


/* Begin INTERFACE: DataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataWriter_var &source, bool createNewObject = false);

class dcps_java_Export DDS_DataWriterJavaPeer
  : public virtual DDS_EntityJavaPeer
  , public virtual DDS::DataWriter
{
public:
  DDS_DataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t set_qos (const DDS::DataWriterQos& qos);

  DDS::ReturnCode_t get_qos (DDS::DataWriterQos& qos);

  DDS::ReturnCode_t set_listener (DDS::DataWriterListener_ptr a_listener, DDS::StatusMask mask);

  DDS::DataWriterListener_ptr get_listener ();

  DDS::Topic_ptr get_topic ();

  DDS::Publisher_ptr get_publisher ();

  DDS::ReturnCode_t wait_for_acknowledgments (const DDS::Duration_t& max_wait);

  DDS::ReturnCode_t get_liveliness_lost_status (DDS::LivelinessLostStatus& status);

  DDS::ReturnCode_t get_offered_deadline_missed_status (DDS::OfferedDeadlineMissedStatus& status);

  DDS::ReturnCode_t get_offered_incompatible_qos_status (DDS::OfferedIncompatibleQosStatus& status);

  DDS::ReturnCode_t get_publication_matched_status (DDS::PublicationMatchedStatus& status);

  DDS::ReturnCode_t assert_liveliness ();

  DDS::ReturnCode_t get_matched_subscriptions (DDS::InstanceHandleSeq& subscription_handles);

  DDS::ReturnCode_t get_matched_subscription_data (DDS::SubscriptionBuiltinTopicData& subscription_data, DDS::InstanceHandle_t subscription_handle);

};


/* End INTERFACE: DataWriter */


/* Begin INTERFACE: Publisher */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Publisher_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Publisher_var &source, bool createNewObject = false);

class dcps_java_Export DDS_PublisherJavaPeer
  : public virtual DDS_EntityJavaPeer
  , public virtual DDS::Publisher
{
public:
  DDS_PublisherJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
  {}

  DDS::DataWriter_ptr create_datawriter (DDS::Topic_ptr a_topic, const DDS::DataWriterQos& qos, DDS::DataWriterListener_ptr a_listener, DDS::StatusMask mask);

  DDS::ReturnCode_t delete_datawriter (DDS::DataWriter_ptr a_datawriter);

  DDS::DataWriter_ptr lookup_datawriter (const char * topic_name);

  DDS::ReturnCode_t delete_contained_entities ();

  DDS::ReturnCode_t set_qos (const DDS::PublisherQos& qos);

  DDS::ReturnCode_t get_qos (DDS::PublisherQos& qos);

  DDS::ReturnCode_t set_listener (DDS::PublisherListener_ptr a_listener, DDS::StatusMask mask);

  DDS::PublisherListener_ptr get_listener ();

  DDS::ReturnCode_t suspend_publications ();

  DDS::ReturnCode_t resume_publications ();

  DDS::ReturnCode_t begin_coherent_changes ();

  DDS::ReturnCode_t end_coherent_changes ();

  DDS::ReturnCode_t wait_for_acknowledgments (const DDS::Duration_t& max_wait);

  DDS::DomainParticipant_ptr get_participant ();

  DDS::ReturnCode_t set_default_datawriter_qos (const DDS::DataWriterQos& qos);

  DDS::ReturnCode_t get_default_datawriter_qos (DDS::DataWriterQos& qos);

  DDS::ReturnCode_t copy_from_topic_qos (DDS::DataWriterQos& a_datawriter_qos, const DDS::TopicQos& a_topic_qos);

};


/* End INTERFACE: Publisher */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: PublicationLostStatus */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::PublicationLostStatus &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::PublicationLostStatus &source, bool createNewObject = false);

/* End STRUCT: PublicationLostStatus */


/* Begin TYPEDEF: PublicationDisconnectedStatus */


/* End TYPEDEF: PublicationDisconnectedStatus */


/* Begin TYPEDEF: PublicationReconnectedStatus */


/* End TYPEDEF: PublicationReconnectedStatus */


/* Begin TYPEDEF: DisassociationStatus */


/* End TYPEDEF: DisassociationStatus */


/* Begin INTERFACE: DataWriterListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataWriterListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataWriterListener_var &source, bool createNewObject = false);

class dcps_java_Export OpenDDS_DCPS_DataWriterListenerJavaPeer
  : public virtual DDS_DataWriterListenerJavaPeer
  , public virtual OpenDDS::DCPS::DataWriterListener
{
public:
  OpenDDS_DCPS_DataWriterListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
    , DDS_DataWriterListenerJavaPeer (jni, java)
  {}

  void on_publication_disconnected (DDS::DataWriter_ptr reader, const OpenDDS::DCPS::PublicationDisconnectedStatus& status);

  void on_publication_reconnected (DDS::DataWriter_ptr reader, const OpenDDS::DCPS::PublicationReconnectedStatus& status);

  void on_publication_lost (DDS::DataWriter_ptr writer, const OpenDDS::DCPS::PublicationLostStatus& status);

  void on_connection_deleted (DDS::DataWriter_ptr writer);

};


/* End INTERFACE: DataWriterListener */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
#endif /* IDL2JNI_GENERATED_DDSDCPSPUBLICATIONJC_H */
