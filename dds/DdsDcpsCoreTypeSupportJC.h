/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_DDSDCPSCORETYPESUPPORTJC_H
#define IDL2JNI_GENERATED_DDSDCPSCORETYPESUPPORTJC_H
#include "DdsDcpsCoreTypeSupportC.h"
#include "DdsDcpsCoreJC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "dds/DdsDcpsPublicationJC.h"
#include "dds/DdsDcpsSubscriptionExtJC.h"
#include "dds/DdsDcpsTopicJC.h"
#include "dds/DdsDcpsTypeSupportExtJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "dcps_java_export.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsCoreTypeSupport.idl */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: ParticipantBuiltinTopicDataSeq */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ParticipantBuiltinTopicDataSeq &target, jobjectArray source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::ParticipantBuiltinTopicDataSeq &source, bool createNewObject = false);

/* End TYPEDEF: ParticipantBuiltinTopicDataSeq */


/* Begin INTERFACE: ParticipantBuiltinTopicDataTypeSupport */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ParticipantBuiltinTopicDataTypeSupport_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::ParticipantBuiltinTopicDataTypeSupport_var &source, bool createNewObject = false);

class dcps_java_Export DDS_ParticipantBuiltinTopicDataTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual DDS::ParticipantBuiltinTopicDataTypeSupport
{
public:
  DDS_ParticipantBuiltinTopicDataTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: ParticipantBuiltinTopicDataTypeSupport */


/* Begin INTERFACE: ParticipantBuiltinTopicDataDataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ParticipantBuiltinTopicDataDataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::ParticipantBuiltinTopicDataDataWriter_var &source, bool createNewObject = false);

class dcps_java_Export DDS_ParticipantBuiltinTopicDataDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual DDS::ParticipantBuiltinTopicDataDataWriter
{
public:
  DDS_ParticipantBuiltinTopicDataDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const DDS::ParticipantBuiltinTopicData& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const DDS::ParticipantBuiltinTopicData& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const DDS::ParticipantBuiltinTopicData& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS::ParticipantBuiltinTopicData& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const DDS::ParticipantBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const DDS::ParticipantBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const DDS::ParticipantBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const DDS::ParticipantBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (DDS::ParticipantBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::ParticipantBuiltinTopicData& instance_data);

};


/* End INTERFACE: ParticipantBuiltinTopicDataDataWriter */


/* Begin INTERFACE: ParticipantBuiltinTopicDataDataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ParticipantBuiltinTopicDataDataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::ParticipantBuiltinTopicDataDataReader_var &source, bool createNewObject = false);

class dcps_java_Export DDS_ParticipantBuiltinTopicDataDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual DDS::ParticipantBuiltinTopicDataDataReader
{
public:
  DDS_ParticipantBuiltinTopicDataDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (DDS::ParticipantBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (DDS::ParticipantBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (DDS::ParticipantBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (DDS::ParticipantBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (DDS::ParticipantBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (DDS::ParticipantBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (DDS::ParticipantBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (DDS::ParticipantBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::ParticipantBuiltinTopicData& instance_data);

};


/* End INTERFACE: ParticipantBuiltinTopicDataDataReader */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: PublicationBuiltinTopicDataSeq */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::PublicationBuiltinTopicDataSeq &target, jobjectArray source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::PublicationBuiltinTopicDataSeq &source, bool createNewObject = false);

/* End TYPEDEF: PublicationBuiltinTopicDataSeq */


/* Begin INTERFACE: PublicationBuiltinTopicDataTypeSupport */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::PublicationBuiltinTopicDataTypeSupport_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublicationBuiltinTopicDataTypeSupport_var &source, bool createNewObject = false);

class dcps_java_Export DDS_PublicationBuiltinTopicDataTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual DDS::PublicationBuiltinTopicDataTypeSupport
{
public:
  DDS_PublicationBuiltinTopicDataTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: PublicationBuiltinTopicDataTypeSupport */


/* Begin INTERFACE: PublicationBuiltinTopicDataDataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::PublicationBuiltinTopicDataDataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublicationBuiltinTopicDataDataWriter_var &source, bool createNewObject = false);

class dcps_java_Export DDS_PublicationBuiltinTopicDataDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual DDS::PublicationBuiltinTopicDataDataWriter
{
public:
  DDS_PublicationBuiltinTopicDataDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const DDS::PublicationBuiltinTopicData& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const DDS::PublicationBuiltinTopicData& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const DDS::PublicationBuiltinTopicData& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS::PublicationBuiltinTopicData& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const DDS::PublicationBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const DDS::PublicationBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const DDS::PublicationBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const DDS::PublicationBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (DDS::PublicationBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::PublicationBuiltinTopicData& instance_data);

};


/* End INTERFACE: PublicationBuiltinTopicDataDataWriter */


/* Begin INTERFACE: PublicationBuiltinTopicDataDataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::PublicationBuiltinTopicDataDataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublicationBuiltinTopicDataDataReader_var &source, bool createNewObject = false);

class dcps_java_Export DDS_PublicationBuiltinTopicDataDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual DDS::PublicationBuiltinTopicDataDataReader
{
public:
  DDS_PublicationBuiltinTopicDataDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (DDS::PublicationBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (DDS::PublicationBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (DDS::PublicationBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (DDS::PublicationBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (DDS::PublicationBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (DDS::PublicationBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (DDS::PublicationBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (DDS::PublicationBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::PublicationBuiltinTopicData& instance_data);

};


/* End INTERFACE: PublicationBuiltinTopicDataDataReader */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: SubscriptionBuiltinTopicDataSeq */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::SubscriptionBuiltinTopicDataSeq &target, jobjectArray source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::SubscriptionBuiltinTopicDataSeq &source, bool createNewObject = false);

/* End TYPEDEF: SubscriptionBuiltinTopicDataSeq */


/* Begin INTERFACE: SubscriptionBuiltinTopicDataTypeSupport */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::SubscriptionBuiltinTopicDataTypeSupport_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriptionBuiltinTopicDataTypeSupport_var &source, bool createNewObject = false);

class dcps_java_Export DDS_SubscriptionBuiltinTopicDataTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual DDS::SubscriptionBuiltinTopicDataTypeSupport
{
public:
  DDS_SubscriptionBuiltinTopicDataTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: SubscriptionBuiltinTopicDataTypeSupport */


/* Begin INTERFACE: SubscriptionBuiltinTopicDataDataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::SubscriptionBuiltinTopicDataDataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriptionBuiltinTopicDataDataWriter_var &source, bool createNewObject = false);

class dcps_java_Export DDS_SubscriptionBuiltinTopicDataDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual DDS::SubscriptionBuiltinTopicDataDataWriter
{
public:
  DDS_SubscriptionBuiltinTopicDataDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const DDS::SubscriptionBuiltinTopicData& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const DDS::SubscriptionBuiltinTopicData& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const DDS::SubscriptionBuiltinTopicData& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS::SubscriptionBuiltinTopicData& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const DDS::SubscriptionBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const DDS::SubscriptionBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const DDS::SubscriptionBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const DDS::SubscriptionBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (DDS::SubscriptionBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::SubscriptionBuiltinTopicData& instance_data);

};


/* End INTERFACE: SubscriptionBuiltinTopicDataDataWriter */


/* Begin INTERFACE: SubscriptionBuiltinTopicDataDataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::SubscriptionBuiltinTopicDataDataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriptionBuiltinTopicDataDataReader_var &source, bool createNewObject = false);

class dcps_java_Export DDS_SubscriptionBuiltinTopicDataDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual DDS::SubscriptionBuiltinTopicDataDataReader
{
public:
  DDS_SubscriptionBuiltinTopicDataDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (DDS::SubscriptionBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (DDS::SubscriptionBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (DDS::SubscriptionBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (DDS::SubscriptionBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (DDS::SubscriptionBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (DDS::SubscriptionBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (DDS::SubscriptionBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (DDS::SubscriptionBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::SubscriptionBuiltinTopicData& instance_data);

};


/* End INTERFACE: SubscriptionBuiltinTopicDataDataReader */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: TopicBuiltinTopicDataSeq */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicBuiltinTopicDataSeq &target, jobjectArray source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const DDS::TopicBuiltinTopicDataSeq &source, bool createNewObject = false);

/* End TYPEDEF: TopicBuiltinTopicDataSeq */


/* Begin INTERFACE: TopicBuiltinTopicDataTypeSupport */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicBuiltinTopicDataTypeSupport_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicBuiltinTopicDataTypeSupport_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicBuiltinTopicDataTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual DDS::TopicBuiltinTopicDataTypeSupport
{
public:
  DDS_TopicBuiltinTopicDataTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: TopicBuiltinTopicDataTypeSupport */


/* Begin INTERFACE: TopicBuiltinTopicDataDataWriter */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicBuiltinTopicDataDataWriter_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicBuiltinTopicDataDataWriter_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicBuiltinTopicDataDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual DDS::TopicBuiltinTopicDataDataWriter
{
public:
  DDS_TopicBuiltinTopicDataDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const DDS::TopicBuiltinTopicData& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const DDS::TopicBuiltinTopicData& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const DDS::TopicBuiltinTopicData& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS::TopicBuiltinTopicData& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const DDS::TopicBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const DDS::TopicBuiltinTopicData& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const DDS::TopicBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const DDS::TopicBuiltinTopicData& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (DDS::TopicBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::TopicBuiltinTopicData& instance_data);

};


/* End INTERFACE: TopicBuiltinTopicDataDataWriter */


/* Begin INTERFACE: TopicBuiltinTopicDataDataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicBuiltinTopicDataDataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicBuiltinTopicDataDataReader_var &source, bool createNewObject = false);

class dcps_java_Export DDS_TopicBuiltinTopicDataDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual DDS::TopicBuiltinTopicDataDataReader
{
public:
  DDS_TopicBuiltinTopicDataDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (DDS::TopicBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (DDS::TopicBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (DDS::TopicBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (DDS::TopicBuiltinTopicData& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (DDS::TopicBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (DDS::TopicBuiltinTopicDataSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (DDS::TopicBuiltinTopicDataSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (DDS::TopicBuiltinTopicData& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const DDS::TopicBuiltinTopicData& instance_data);

};


/* End INTERFACE: TopicBuiltinTopicDataDataReader */

/* End MODULE: DDS */
#endif /* IDL2JNI_GENERATED_DDSDCPSCORETYPESUPPORTJC_H */
