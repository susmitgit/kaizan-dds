/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONJC_H
#define IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONJC_H
#include "DdsDcpsSubscriptionC.h"
#include "dds/DdsDcpsDataReaderSeqJC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "dcps_java_export.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsSubscription.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: TopicDescription */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::TopicDescription_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicDescription_var &source, bool createNewObject);

/* End INTERFACE-FWD: TopicDescription */


/* Begin INTERFACE-FWD: DomainParticipant */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DomainParticipant_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipant_var &source, bool createNewObject);

/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReader_var &source, bool createNewObject);

/* End INTERFACE-FWD: DataReader */


/* Begin INTERFACE-FWD: Subscriber */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Subscriber_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Subscriber_var &source, bool createNewObject);

/* End INTERFACE-FWD: Subscriber */


/* Begin INTERFACE: DataReaderListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataReaderListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReaderListener_var &source, bool createNewObject = false);

class dcps_java_Export DDS_DataReaderListenerJavaPeer
  : public virtual DDS_ListenerJavaPeer
  , public virtual DDS::DataReaderListener
{
public:
  DDS_DataReaderListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
  {}

  void on_requested_deadline_missed (DDS::DataReader_ptr reader, const DDS::RequestedDeadlineMissedStatus& status);

  void on_requested_incompatible_qos (DDS::DataReader_ptr reader, const DDS::RequestedIncompatibleQosStatus& status);

  void on_sample_rejected (DDS::DataReader_ptr reader, const DDS::SampleRejectedStatus& status);

  void on_liveliness_changed (DDS::DataReader_ptr reader, const DDS::LivelinessChangedStatus& status);

  void on_data_available (DDS::DataReader_ptr reader);

  void on_subscription_matched (DDS::DataReader_ptr reader, const DDS::SubscriptionMatchedStatus& status);

  void on_sample_lost (DDS::DataReader_ptr reader, const DDS::SampleLostStatus& status);

};


/* End INTERFACE: DataReaderListener */


/* Begin INTERFACE: SubscriberListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::SubscriberListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriberListener_var &source, bool createNewObject = false);

class dcps_java_Export DDS_SubscriberListenerJavaPeer
  : public virtual DDS_DataReaderListenerJavaPeer
  , public virtual DDS::SubscriberListener
{
public:
  DDS_SubscriberListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
    , DDS_DataReaderListenerJavaPeer (jni, java)
  {}

  void on_data_on_readers (DDS::Subscriber_ptr subs);

};


/* End INTERFACE: SubscriberListener */


/* Begin INTERFACE: ReadCondition */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::ReadCondition_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::ReadCondition_var &source, bool createNewObject = false);

class dcps_java_Export DDS_ReadConditionJavaPeer
  : public virtual DDS_ConditionJavaPeer
  , public virtual DDS::ReadCondition
{
public:
  DDS_ReadConditionJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ConditionJavaPeer (jni, java)
  {}

  DDS::SampleStateMask get_sample_state_mask ();

  DDS::ViewStateMask get_view_state_mask ();

  DDS::InstanceStateMask get_instance_state_mask ();

  DDS::DataReader_ptr get_datareader ();

};


/* End INTERFACE: ReadCondition */


/* Begin INTERFACE: QueryCondition */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::QueryCondition_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::QueryCondition_var &source, bool createNewObject = false);

class dcps_java_Export DDS_QueryConditionJavaPeer
  : public virtual DDS_ReadConditionJavaPeer
  , public virtual DDS::QueryCondition
{
public:
  DDS_QueryConditionJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ConditionJavaPeer (jni, java)
    , DDS_ReadConditionJavaPeer (jni, java)
  {}

  char * get_query_expression ();

  DDS::ReturnCode_t get_query_parameters (DDS::StringSeq& query_parameters);

  DDS::ReturnCode_t set_query_parameters (const DDS::StringSeq& query_parameters);

};


/* End INTERFACE: QueryCondition */


/* Begin INTERFACE: DataReader */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::DataReader_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReader_var &source, bool createNewObject = false);

class dcps_java_Export DDS_DataReaderJavaPeer
  : public virtual DDS_EntityJavaPeer
  , public virtual DDS::DataReader
{
public:
  DDS_DataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
  {}

  DDS::ReadCondition_ptr create_readcondition (DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::QueryCondition_ptr create_querycondition (DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states, const char * query_expression, const DDS::StringSeq& query_parameters);

  DDS::ReturnCode_t delete_readcondition (DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t delete_contained_entities ();

  DDS::ReturnCode_t set_qos (const DDS::DataReaderQos& qos);

  DDS::ReturnCode_t get_qos (DDS::DataReaderQos& qos);

  DDS::ReturnCode_t set_listener (DDS::DataReaderListener_ptr a_listener, DDS::StatusMask mask);

  DDS::DataReaderListener_ptr get_listener ();

  DDS::TopicDescription_ptr get_topicdescription ();

  DDS::Subscriber_ptr get_subscriber ();

  DDS::ReturnCode_t get_sample_rejected_status (DDS::SampleRejectedStatus& status);

  DDS::ReturnCode_t get_liveliness_changed_status (DDS::LivelinessChangedStatus& status);

  DDS::ReturnCode_t get_requested_deadline_missed_status (DDS::RequestedDeadlineMissedStatus& status);

  DDS::ReturnCode_t get_requested_incompatible_qos_status (DDS::RequestedIncompatibleQosStatus& status);

  DDS::ReturnCode_t get_subscription_matched_status (DDS::SubscriptionMatchedStatus& status);

  DDS::ReturnCode_t get_sample_lost_status (DDS::SampleLostStatus& status);

  DDS::ReturnCode_t wait_for_historical_data (const DDS::Duration_t& max_wait);

  DDS::ReturnCode_t get_matched_publications (DDS::InstanceHandleSeq& publication_handles);

  DDS::ReturnCode_t get_matched_publication_data (DDS::PublicationBuiltinTopicData& publication_data, DDS::InstanceHandle_t publication_handle);

};


/* End INTERFACE: DataReader */


/* Begin INTERFACE: Subscriber */

dcps_java_Export
void copyToCxx (JNIEnv *jni, DDS::Subscriber_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const DDS::Subscriber_var &source, bool createNewObject = false);

class dcps_java_Export DDS_SubscriberJavaPeer
  : public virtual DDS_EntityJavaPeer
  , public virtual DDS::Subscriber
{
public:
  DDS_SubscriberJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
  {}

  DDS::DataReader_ptr create_datareader (DDS::TopicDescription_ptr a_topic, const DDS::DataReaderQos& qos, DDS::DataReaderListener_ptr a_listener, DDS::StatusMask mask);

  DDS::ReturnCode_t delete_datareader (DDS::DataReader_ptr a_datareader);

  DDS::ReturnCode_t delete_contained_entities ();

  DDS::DataReader_ptr lookup_datareader (const char * topic_name);

  DDS::ReturnCode_t get_datareaders (DDS::DataReaderSeq& readers, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t notify_datareaders ();

  DDS::ReturnCode_t set_qos (const DDS::SubscriberQos& qos);

  DDS::ReturnCode_t get_qos (DDS::SubscriberQos& qos);

  DDS::ReturnCode_t set_listener (DDS::SubscriberListener_ptr a_listener, DDS::StatusMask mask);

  DDS::SubscriberListener_ptr get_listener ();

  DDS::ReturnCode_t begin_access ();

  DDS::ReturnCode_t end_access ();

  DDS::DomainParticipant_ptr get_participant ();

  DDS::ReturnCode_t set_default_datareader_qos (const DDS::DataReaderQos& qos);

  DDS::ReturnCode_t get_default_datareader_qos (DDS::DataReaderQos& qos);

  DDS::ReturnCode_t copy_from_topic_qos (DDS::DataReaderQos& a_datareader_qos, const DDS::TopicQos& a_topic_qos);

};


/* End INTERFACE: Subscriber */

/* End MODULE: DDS */
#endif /* IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONJC_H */
