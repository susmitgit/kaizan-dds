/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONEXTJC_H
#define IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONEXTJC_H
#include "DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsGuidJC.h"
#include "dds/DdsDcpsSubscriptionJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "dcps_java_export.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsSubscriptionExt.idl */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: SubscriptionLostStatus */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::SubscriptionLostStatus &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::SubscriptionLostStatus &source, bool createNewObject = false);

/* End STRUCT: SubscriptionLostStatus */


/* Begin TYPEDEF: SubscriptionDisconnectedStatus */


/* End TYPEDEF: SubscriptionDisconnectedStatus */


/* Begin TYPEDEF: SubscriptionReconnectedStatus */


/* End TYPEDEF: SubscriptionReconnectedStatus */


/* Begin STRUCT: BudgetExceededStatus */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::BudgetExceededStatus &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::BudgetExceededStatus &source, bool createNewObject = false);

/* End STRUCT: BudgetExceededStatus */


/* Begin STRUCT: LatencyStatistics */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::LatencyStatistics &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::LatencyStatistics &source, bool createNewObject = false);

/* End STRUCT: LatencyStatistics */


/* Begin INTERFACE: DataReaderListener */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataReaderListener_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataReaderListener_var &source, bool createNewObject = false);

class dcps_java_Export OpenDDS_DCPS_DataReaderListenerJavaPeer
  : public virtual DDS_DataReaderListenerJavaPeer
  , public virtual OpenDDS::DCPS::DataReaderListener
{
public:
  OpenDDS_DCPS_DataReaderListenerJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_ListenerJavaPeer (jni, java)
    , DDS_DataReaderListenerJavaPeer (jni, java)
  {}

  void on_subscription_disconnected (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionDisconnectedStatus& status);

  void on_subscription_reconnected (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionReconnectedStatus& status);

  void on_subscription_lost (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionLostStatus& status);

  void on_connection_deleted (DDS::DataReader_ptr reader);

  void on_budget_exceeded (DDS::DataReader_ptr reader, const OpenDDS::DCPS::BudgetExceededStatus& status);

};


/* End INTERFACE: DataReaderListener */


/* Begin TYPEDEF: LatencyStatisticsSeq */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::LatencyStatisticsSeq &target, jobjectArray source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const OpenDDS::DCPS::LatencyStatisticsSeq &source, bool createNewObject = false);

/* End TYPEDEF: LatencyStatisticsSeq */


/* Begin INTERFACE: DataReaderEx */

dcps_java_Export
void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataReaderEx_var &target, jobject source);
dcps_java_Export
void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataReaderEx_var &source, bool createNewObject = false);

class dcps_java_Export OpenDDS_DCPS_DataReaderExJavaPeer
  : public virtual DDS_DataReaderJavaPeer
  , public virtual OpenDDS::DCPS::DataReaderEx
{
public:
  OpenDDS_DCPS_DataReaderExJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
  {}

  CORBA::Boolean statistics_enabled ();

  void statistics_enabled (CORBA::Boolean statistics_enabled_);

  void get_latency_stats (OpenDDS::DCPS::LatencyStatisticsSeq& stats);

  void reset_latency_stats ();

};


/* End INTERFACE: DataReaderEx */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
#endif /* IDL2JNI_GENERATED_DDSDCPSSUBSCRIPTIONEXTJC_H */
