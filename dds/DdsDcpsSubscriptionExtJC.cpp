#include "DdsDcpsSubscriptionExtJC.h"
#include "idl2jni_runtime.h"

#include "dds/DdsDcpsTopicC.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsSubscriptionExt.idl */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: SubscriptionLostStatus */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::SubscriptionLostStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication_handles", "[I");
    jintArray obj = static_cast<jintArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.publication_handles, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::SubscriptionLostStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "OpenDDS/DCPS/SubscriptionLostStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication_handles", "[I");
    jintArray obj = createNewObject ? 0 : static_cast<jintArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.publication_handles, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: SubscriptionLostStatus */


/* Begin TYPEDEF: SubscriptionDisconnectedStatus */


/* End TYPEDEF: SubscriptionDisconnectedStatus */


/* Begin TYPEDEF: SubscriptionReconnectedStatus */


/* End TYPEDEF: SubscriptionReconnectedStatus */


/* Begin STRUCT: BudgetExceededStatus */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::BudgetExceededStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    target.last_instance_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::BudgetExceededStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "OpenDDS/DCPS/BudgetExceededStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    jni->SetIntField (target, fid, source.last_instance_handle);
  }
}


/* End STRUCT: BudgetExceededStatus */


/* Begin STRUCT: LatencyStatistics */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::LatencyStatistics &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication", "LOpenDDS/DCPS/GUID_t;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.publication, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "n", "I");
    target.n = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "maximum", "D");
    target.maximum = jni->GetDoubleField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "minimum", "D");
    target.minimum = jni->GetDoubleField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "mean", "D");
    target.mean = jni->GetDoubleField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "variance", "D");
    target.variance = jni->GetDoubleField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::LatencyStatistics &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "OpenDDS/DCPS/LatencyStatistics");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "publication", "LOpenDDS/DCPS/GUID_t;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.publication, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "n", "I");
    jni->SetIntField (target, fid, source.n);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "maximum", "D");
    jni->SetDoubleField (target, fid, source.maximum);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "minimum", "D");
    jni->SetDoubleField (target, fid, source.minimum);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "mean", "D");
    jni->SetDoubleField (target, fid, source.mean);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "variance", "D");
    jni->SetDoubleField (target, fid, source.variance);
  }
}


/* End STRUCT: LatencyStatistics */


/* Begin INTERFACE: DataReaderListener */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataReaderListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = OpenDDS::DCPS::DataReaderListener::_unchecked_narrow (c);
    }
  else
    {
      target = new OpenDDS_DCPS_DataReaderListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataReaderListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "OpenDDS/DCPS/_DataReaderListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS_DataReaderListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  OpenDDS::DCPS::DataReaderListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void OpenDDS_DCPS_DataReaderListenerJavaPeer::on_subscription_disconnected (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionDisconnectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_subscription_disconnected", "(LDDS/DataReader;LOpenDDS/DCPS/SubscriptionLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1subscription_1disconnected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::SubscriptionDisconnectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_disconnected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderListenerJavaPeer::on_subscription_reconnected (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionReconnectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_subscription_reconnected", "(LDDS/DataReader;LOpenDDS/DCPS/SubscriptionLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1subscription_1reconnected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::SubscriptionReconnectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_reconnected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderListenerJavaPeer::on_subscription_lost (DDS::DataReader_ptr reader, const OpenDDS::DCPS::SubscriptionLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_subscription_lost", "(LDDS/DataReader;LOpenDDS/DCPS/SubscriptionLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1subscription_1lost (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::SubscriptionLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_lost (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderListenerJavaPeer::on_connection_deleted (DDS::DataReader_ptr reader)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_connection_deleted", "(LDDS/DataReader;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1connection_1deleted (JNIEnv *_jni, jobject _jthis, jobject reader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      _this->on_connection_deleted (_c_reader.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderListenerJavaPeer::on_budget_exceeded (DDS::DataReader_ptr reader, const OpenDDS::DCPS::BudgetExceededStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_budget_exceeded", "(LDDS/DataReader;LOpenDDS/DCPS/BudgetExceededStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1budget_1exceeded (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      OpenDDS::DCPS::BudgetExceededStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_budget_exceeded (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1requested_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_deadline_missed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1requested_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_incompatible_qos (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1sample_1rejected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_rejected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1liveliness_1changed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_changed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1data_1available (JNIEnv *_jni, jobject _jthis, jobject reader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      _this->on_data_available (_c_reader.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1subscription_1matched (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_matched (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderListenerTAOPeer_on_1sample_1lost (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderListener_var _this = OpenDDS::DCPS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_lost (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: DataReaderListener */


/* Begin TYPEDEF: LatencyStatisticsSeq */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::LatencyStatisticsSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const OpenDDS::DCPS::LatencyStatisticsSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "OpenDDS/DCPS/LatencyStatistics");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      OpenDDS::DCPS::LatencyStatistics var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: LatencyStatisticsSeq */


/* Begin INTERFACE: DataReaderEx */

void copyToCxx (JNIEnv *jni, OpenDDS::DCPS::DataReaderEx_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = OpenDDS::DCPS::DataReaderEx::_unchecked_narrow (c);
    }
  else
    {
      target = new OpenDDS_DCPS_DataReaderExJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const OpenDDS::DCPS::DataReaderEx_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "OpenDDS/DCPS/_DataReaderExTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS_DataReaderExHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  OpenDDS::DCPS::DataReaderEx_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

CORBA::Boolean OpenDDS_DCPS_DataReaderExJavaPeer::statistics_enabled ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "statistics_enabled", "()Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_statistics_1enabled (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->statistics_enabled ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

void OpenDDS_DCPS_DataReaderExJavaPeer::statistics_enabled (CORBA::Boolean statistics_enabled_)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "statistics_enabled", "(Z)V");
  _jni->CallVoidMethod (globalCallback_, _mid, statistics_enabled_);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_statistics_1enabled_Z (JNIEnv *_jni, jobject _jthis, jboolean statistics_enabled_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      _this->statistics_enabled (statistics_enabled_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderExJavaPeer::get_latency_stats (OpenDDS::DCPS::LatencyStatisticsSeq& stats)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_stats = 0;
  copyToJava (_jni, _n_stats, stats, true);
  jclass _hc_stats = findClass (_jni, "OpenDDS/DCPS/LatencyStatisticsSeqHolder");
  jmethodID _hm_stats = _jni->GetMethodID (_hc_stats, "<init>", "()V");
  jobject _j_stats = _jni->NewObject (_hc_stats, _hm_stats);
  holderize (_jni, _j_stats, _n_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_latency_stats", "(LOpenDDS/DCPS/LatencyStatisticsSeqHolder;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_stats);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_stats = deholderize<jobjectArray> (_jni, _j_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
  _jni->DeleteLocalRef (_j_stats);
  copyToCxx (_jni, stats, _o_stats);
  _jni->DeleteLocalRef (_o_stats);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1latency_1stats (JNIEnv *_jni, jobject _jthis, jobject stats)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobjectArray _j_stats = deholderize<jobjectArray> (_jni, stats, "[LOpenDDS/DCPS/LatencyStatistics;");
      OpenDDS::DCPS::LatencyStatisticsSeq _c_stats;
      copyToCxx (_jni, _c_stats, _j_stats);
      _this->get_latency_stats (_c_stats);
      copyToJava (_jni, _j_stats, _c_stats);
      holderize (_jni, stats, _j_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void OpenDDS_DCPS_DataReaderExJavaPeer::reset_latency_stats ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "reset_latency_stats", "()V");
  _jni->CallVoidMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_reset_1latency_1stats (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      _this->reset_latency_stats ();
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_create_1readcondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::ReadCondition_var _c_ret = _this->create_readcondition (sample_states, view_states, instance_states);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_create_1querycondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states, jobject query_expression, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      CORBA::String_var _c_query_expression;
      copyToCxx (_jni, _c_query_expression, query_expression);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::QueryCondition_var _c_ret = _this->create_querycondition (sample_states, view_states, instance_states, _c_query_expression.in (), _c_query_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_delete_1readcondition (JNIEnv *_jni, jobject _jthis, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->delete_readcondition (_c_a_condition.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1topicdescription (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::TopicDescription_var _c_ret = _this->get_topicdescription ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1sample_1rejected_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleRejectedStatus;");
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_rejected_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleRejectedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1liveliness_1changed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessChangedStatus;");
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_changed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessChangedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1requested_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedDeadlineMissedStatus;");
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1requested_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedIncompatibleQosStatus;");
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1subscription_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SubscriptionMatchedStatus;");
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_subscription_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SubscriptionMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1sample_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleLostStatus;");
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_wait_1for_1historical_1data (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_historical_data (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1matched_1publications (JNIEnv *_jni, jobject _jthis, jobject publication_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jintArray _j_publication_handles = deholderize<jintArray> (_jni, publication_handles, "[I");
      DDS::InstanceHandleSeq _c_publication_handles;
      copyToCxx (_jni, _c_publication_handles, _j_publication_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publications (_c_publication_handles);
      copyToJava (_jni, _j_publication_handles, _c_publication_handles);
      holderize (_jni, publication_handles, _j_publication_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1matched_1publication_1data (JNIEnv *_jni, jobject _jthis, jobject publication_data, jint publication_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      jobject _j_publication_data = deholderize<jobject> (_jni, publication_data, "LDDS/PublicationBuiltinTopicData;");
      DDS::PublicationBuiltinTopicData _c_publication_data;
      copyToCxx (_jni, _c_publication_data, _j_publication_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publication_data (_c_publication_data, publication_handle);
      copyToJava (_jni, _j_publication_data, _c_publication_data);
      holderize (_jni, publication_data, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_OpenDDS_DCPS__1DataReaderExTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      OpenDDS::DCPS::DataReaderEx_var _this = OpenDDS::DCPS::DataReaderEx::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: DataReaderEx */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
