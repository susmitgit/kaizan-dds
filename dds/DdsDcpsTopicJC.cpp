#include "DdsDcpsTopicJC.h"
#include "idl2jni_runtime.h"

#include "dds/DdsDcpsDomainC.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsTopic.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: Topic */


/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE: TopicDescription */

void copyToCxx (JNIEnv *jni, DDS::TopicDescription_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::TopicDescription::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_TopicDescriptionJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicDescription_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_TopicDescriptionTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_TopicDescriptionHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::TopicDescription_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

char * DDS_TopicDescriptionJavaPeer::get_type_name ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_type_name", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicDescriptionTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TopicDescription_var _this = DDS::TopicDescription::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

char * DDS_TopicDescriptionJavaPeer::get_name ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_name", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicDescriptionTAOPeer_get_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TopicDescription_var _this = DDS::TopicDescription::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipant_ptr DDS_TopicDescriptionJavaPeer::get_participant ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_participant", "()LDDS/DomainParticipant;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipant_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicDescriptionTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TopicDescription_var _this = DDS::TopicDescription::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TopicDescription */


/* Begin INTERFACE: TopicListener */

void copyToCxx (JNIEnv *jni, DDS::TopicListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::TopicListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_TopicListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TopicListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_TopicListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_TopicListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::TopicListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void DDS_TopicListenerJavaPeer::on_inconsistent_topic (DDS::Topic_ptr the_topic, const DDS::InconsistentTopicStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_the_topic = 0;
  DDS::Topic_var _c_the_topic = DDS::Topic::_duplicate (the_topic);
  copyToJava (_jni, _j_the_topic, _c_the_topic, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_inconsistent_topic", "(LDDS/Topic;LDDS/InconsistentTopicStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_the_topic, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1TopicListenerTAOPeer_on_1inconsistent_1topic (JNIEnv *_jni, jobject _jthis, jobject the_topic, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TopicListener_var _this = DDS::TopicListener::_narrow (_this_obj);
      DDS::Topic_var _c_the_topic;
      copyToCxx (_jni, _c_the_topic, the_topic);
      DDS::InconsistentTopicStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_inconsistent_topic (_c_the_topic.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: TopicListener */


/* Begin INTERFACE: Topic */

void copyToCxx (JNIEnv *jni, DDS::Topic_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Topic::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_TopicJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Topic_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_TopicTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_TopicHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Topic_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_TopicJavaPeer::set_qos (const DDS::TopicQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/TopicQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::TopicQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_TopicJavaPeer::get_qos (DDS::TopicQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/TopicQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/TopicQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/TopicQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/TopicQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/TopicQos;");
      DDS::TopicQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/TopicQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_TopicJavaPeer::set_listener (DDS::TopicListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::TopicListener_var _c_a_listener = DDS::TopicListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/TopicListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::TopicListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::TopicListener_ptr DDS_TopicJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/TopicListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::TopicListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::TopicListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_TopicJavaPeer::get_inconsistent_topic_status (DDS::InconsistentTopicStatus& a_status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_a_status = 0;
  copyToJava (_jni, _n_a_status, a_status, true);
  jclass _hc_a_status = findClass (_jni, "DDS/InconsistentTopicStatusHolder");
  jmethodID _hm_a_status = _jni->GetMethodID (_hc_a_status, "<init>", "()V");
  jobject _j_a_status = _jni->NewObject (_hc_a_status, _hm_a_status);
  holderize (_jni, _j_a_status, _n_a_status, "LDDS/InconsistentTopicStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_inconsistent_topic_status", "(LDDS/InconsistentTopicStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_a_status = deholderize<jobject> (_jni, _j_a_status, "LDDS/InconsistentTopicStatus;");
  _jni->DeleteLocalRef (_j_a_status);
  copyToCxx (_jni, a_status, _o_a_status);
  _jni->DeleteLocalRef (_o_a_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_get_1inconsistent_1topic_1status (JNIEnv *_jni, jobject _jthis, jobject a_status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      jobject _j_a_status = deholderize<jobject> (_jni, a_status, "LDDS/InconsistentTopicStatus;");
      DDS::InconsistentTopicStatus _c_a_status;
      copyToCxx (_jni, _c_a_status, _j_a_status);
      DDS::ReturnCode_t _c_ret = _this->get_inconsistent_topic_status (_c_a_status);
      copyToJava (_jni, _j_a_status, _c_a_status);
      holderize (_jni, a_status, _j_a_status, "LDDS/InconsistentTopicStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TopicTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicTAOPeer_get_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TopicTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Topic_var _this = DDS::Topic::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: Topic */


/* Begin INTERFACE: ContentFilteredTopic */

void copyToCxx (JNIEnv *jni, DDS::ContentFilteredTopic_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::ContentFilteredTopic::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_ContentFilteredTopicJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ContentFilteredTopic_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_ContentFilteredTopicTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_ContentFilteredTopicHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::ContentFilteredTopic_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

char * DDS_ContentFilteredTopicJavaPeer::get_filter_expression ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_filter_expression", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1filter_1expression (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_filter_expression ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_ContentFilteredTopicJavaPeer::get_expression_parameters (DDS::StringSeq& params)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_params = 0;
  copyToJava (_jni, _n_params, params, true);
  jclass _hc_params = findClass (_jni, "DDS/StringSeqHolder");
  jmethodID _hm_params = _jni->GetMethodID (_hc_params, "<init>", "()V");
  jobject _j_params = _jni->NewObject (_hc_params, _hm_params);
  holderize (_jni, _j_params, _n_params, "[Ljava/lang/String;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_expression_parameters", "(LDDS/StringSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_params);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_params = deholderize<jobjectArray> (_jni, _j_params, "[Ljava/lang/String;");
  _jni->DeleteLocalRef (_j_params);
  copyToCxx (_jni, params, _o_params);
  _jni->DeleteLocalRef (_o_params);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1expression_1parameters (JNIEnv *_jni, jobject _jthis, jobject params)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      jobjectArray _j_params = deholderize<jobjectArray> (_jni, params, "[Ljava/lang/String;");
      DDS::StringSeq _c_params;
      copyToCxx (_jni, _c_params, _j_params);
      DDS::ReturnCode_t _c_ret = _this->get_expression_parameters (_c_params);
      copyToJava (_jni, _j_params, _c_params);
      holderize (_jni, params, _j_params, "[Ljava/lang/String;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_ContentFilteredTopicJavaPeer::set_expression_parameters (const DDS::StringSeq& expression_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _j_expression_parameters = 0;
  copyToJava (_jni, _j_expression_parameters, expression_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_expression_parameters", "([Ljava/lang/String;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_expression_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_set_1expression_1parameters (JNIEnv *_jni, jobject _jthis, jobjectArray expression_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      DDS::StringSeq _c_expression_parameters;
      copyToCxx (_jni, _c_expression_parameters, expression_parameters);
      DDS::ReturnCode_t _c_ret = _this->set_expression_parameters (_c_expression_parameters);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Topic_ptr DDS_ContentFilteredTopicJavaPeer::get_related_topic ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_related_topic", "()LDDS/Topic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Topic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1related_1topic (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      DDS::Topic_var _c_ret = _this->get_related_topic ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ContentFilteredTopicTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ContentFilteredTopic_var _this = DDS::ContentFilteredTopic::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: ContentFilteredTopic */


/* Begin INTERFACE: MultiTopic */

void copyToCxx (JNIEnv *jni, DDS::MultiTopic_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::MultiTopic::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_MultiTopicJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::MultiTopic_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_MultiTopicTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_MultiTopicHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::MultiTopic_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

char * DDS_MultiTopicJavaPeer::get_subscription_expression ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_subscription_expression", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1MultiTopicTAOPeer_get_1subscription_1expression (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_subscription_expression ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_MultiTopicJavaPeer::get_expression_parameters (DDS::StringSeq& params)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_params = 0;
  copyToJava (_jni, _n_params, params, true);
  jclass _hc_params = findClass (_jni, "DDS/StringSeqHolder");
  jmethodID _hm_params = _jni->GetMethodID (_hc_params, "<init>", "()V");
  jobject _j_params = _jni->NewObject (_hc_params, _hm_params);
  holderize (_jni, _j_params, _n_params, "[Ljava/lang/String;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_expression_parameters", "(LDDS/StringSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_params);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_params = deholderize<jobjectArray> (_jni, _j_params, "[Ljava/lang/String;");
  _jni->DeleteLocalRef (_j_params);
  copyToCxx (_jni, params, _o_params);
  _jni->DeleteLocalRef (_o_params);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1MultiTopicTAOPeer_get_1expression_1parameters (JNIEnv *_jni, jobject _jthis, jobject params)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      jobjectArray _j_params = deholderize<jobjectArray> (_jni, params, "[Ljava/lang/String;");
      DDS::StringSeq _c_params;
      copyToCxx (_jni, _c_params, _j_params);
      DDS::ReturnCode_t _c_ret = _this->get_expression_parameters (_c_params);
      copyToJava (_jni, _j_params, _c_params);
      holderize (_jni, params, _j_params, "[Ljava/lang/String;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_MultiTopicJavaPeer::set_expression_parameters (const DDS::StringSeq& expression_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _j_expression_parameters = 0;
  copyToJava (_jni, _j_expression_parameters, expression_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_expression_parameters", "([Ljava/lang/String;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_expression_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1MultiTopicTAOPeer_set_1expression_1parameters (JNIEnv *_jni, jobject _jthis, jobjectArray expression_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      DDS::StringSeq _c_expression_parameters;
      copyToCxx (_jni, _c_expression_parameters, expression_parameters);
      DDS::ReturnCode_t _c_ret = _this->set_expression_parameters (_c_expression_parameters);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1MultiTopicTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1MultiTopicTAOPeer_get_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1MultiTopicTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::MultiTopic_var _this = DDS::MultiTopic::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: MultiTopic */


/* Begin INTERFACE: TypeSupport */

void copyToCxx (JNIEnv *jni, DDS::TypeSupport_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::TypeSupport::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_TypeSupportJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::TypeSupport_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_TypeSupportTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_TypeSupportHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::TypeSupport_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_TypeSupportJavaPeer::register_type (DDS::DomainParticipant_ptr domain, const char * type_name)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_domain = 0;
  DDS::DomainParticipant_var _c_domain = DDS::DomainParticipant::_duplicate (domain);
  copyToJava (_jni, _j_domain, _c_domain, true);
  jobject _j_type_name = 0;
  copyToJava (_jni, _j_type_name, type_name, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_type", "(LDDS/DomainParticipant;Ljava/lang/String;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_domain, _j_type_name);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1TypeSupportTAOPeer_register_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TypeSupport_var _this = DDS::TypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->register_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

char * DDS_TypeSupportJavaPeer::get_type_name ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_type_name", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1TypeSupportTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::TypeSupport_var _this = DDS::TypeSupport::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TypeSupport */

/* End MODULE: DDS */
