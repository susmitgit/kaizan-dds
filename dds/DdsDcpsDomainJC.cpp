#include "DdsDcpsDomainJC.h"
#include "idl2jni_runtime.h"

/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsDomain.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE: DomainParticipantListener */

void copyToCxx (JNIEnv *jni, DDS::DomainParticipantListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DomainParticipantListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DomainParticipantListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipantListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DomainParticipantListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DomainParticipantListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DomainParticipantListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1inconsistent_1topic (JNIEnv *_jni, jobject _jthis, jobject the_topic, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::Topic_var _c_the_topic;
      copyToCxx (_jni, _c_the_topic, the_topic);
      DDS::InconsistentTopicStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_inconsistent_topic (_c_the_topic.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1offered_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_deadline_missed (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1offered_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_offered_incompatible_qos (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1liveliness_1lost (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_lost (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1publication_1matched (JNIEnv *_jni, jobject _jthis, jobject writer, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataWriter_var _c_writer;
      copyToCxx (_jni, _c_writer, writer);
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_publication_matched (_c_writer.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1data_1on_1readers (JNIEnv *_jni, jobject _jthis, jobject subs)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::Subscriber_var _c_subs;
      copyToCxx (_jni, _c_subs, subs);
      _this->on_data_on_readers (_c_subs.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1requested_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_deadline_missed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1requested_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_incompatible_qos (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1sample_1rejected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_rejected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1liveliness_1changed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_changed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1data_1available (JNIEnv *_jni, jobject _jthis, jobject reader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      _this->on_data_available (_c_reader.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1subscription_1matched (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_matched (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DomainParticipantListenerTAOPeer_on_1sample_1lost (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantListener_var _this = DDS::DomainParticipantListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_lost (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: DomainParticipantListener */


/* Begin INTERFACE: DomainParticipant */

void copyToCxx (JNIEnv *jni, DDS::DomainParticipant_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DomainParticipant::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DomainParticipantJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipant_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DomainParticipantTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DomainParticipantHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DomainParticipant_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::Publisher_ptr DDS_DomainParticipantJavaPeer::create_publisher (const DDS::PublisherQos& qos, DDS::PublisherListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::PublisherListener_var _c_a_listener = DDS::PublisherListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_publisher", "(LDDS/PublisherQos;LDDS/PublisherListener;I)LDDS/Publisher;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Publisher_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_create_1publisher (JNIEnv *_jni, jobject _jthis, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::PublisherQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::PublisherListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::Publisher_var _c_ret = _this->create_publisher (_c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_publisher (DDS::Publisher_ptr p)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_p = 0;
  DDS::Publisher_var _c_p = DDS::Publisher::_duplicate (p);
  copyToJava (_jni, _j_p, _c_p, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_publisher", "(LDDS/Publisher;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_p);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1publisher (JNIEnv *_jni, jobject _jthis, jobject p)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::Publisher_var _c_p;
      copyToCxx (_jni, _c_p, p);
      DDS::ReturnCode_t _c_ret = _this->delete_publisher (_c_p.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Subscriber_ptr DDS_DomainParticipantJavaPeer::create_subscriber (const DDS::SubscriberQos& qos, DDS::SubscriberListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::SubscriberListener_var _c_a_listener = DDS::SubscriberListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_subscriber", "(LDDS/SubscriberQos;LDDS/SubscriberListener;I)LDDS/Subscriber;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Subscriber_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_create_1subscriber (JNIEnv *_jni, jobject _jthis, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::SubscriberQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::SubscriberListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::Subscriber_var _c_ret = _this->create_subscriber (_c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_subscriber (DDS::Subscriber_ptr s)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_s = 0;
  DDS::Subscriber_var _c_s = DDS::Subscriber::_duplicate (s);
  copyToJava (_jni, _j_s, _c_s, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_subscriber", "(LDDS/Subscriber;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_s);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1subscriber (JNIEnv *_jni, jobject _jthis, jobject s)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::Subscriber_var _c_s;
      copyToCxx (_jni, _c_s, s);
      DDS::ReturnCode_t _c_ret = _this->delete_subscriber (_c_s.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Subscriber_ptr DDS_DomainParticipantJavaPeer::get_builtin_subscriber ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_builtin_subscriber", "()LDDS/Subscriber;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Subscriber_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1builtin_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_builtin_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Topic_ptr DDS_DomainParticipantJavaPeer::create_topic (const char * topic_name, const char * type_name, const DDS::TopicQos& qos, DDS::TopicListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_topic_name = 0;
  copyToJava (_jni, _j_topic_name, topic_name, true);
  jobject _j_type_name = 0;
  copyToJava (_jni, _j_type_name, type_name, true);
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::TopicListener_var _c_a_listener = DDS::TopicListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_topic", "(Ljava/lang/String;Ljava/lang/String;LDDS/TopicQos;LDDS/TopicListener;I)LDDS/Topic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_topic_name, _j_type_name, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Topic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_create_1topic (JNIEnv *_jni, jobject _jthis, jobject topic_name, jobject type_name, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::String_var _c_topic_name;
      copyToCxx (_jni, _c_topic_name, topic_name);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::TopicQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::TopicListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::Topic_var _c_ret = _this->create_topic (_c_topic_name.in (), _c_type_name.in (), _c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_topic (DDS::Topic_ptr a_topic)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_topic = 0;
  DDS::Topic_var _c_a_topic = DDS::Topic::_duplicate (a_topic);
  copyToJava (_jni, _j_a_topic, _c_a_topic, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_topic", "(LDDS/Topic;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_topic);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1topic (JNIEnv *_jni, jobject _jthis, jobject a_topic)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::Topic_var _c_a_topic;
      copyToCxx (_jni, _c_a_topic, a_topic);
      DDS::ReturnCode_t _c_ret = _this->delete_topic (_c_a_topic.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Topic_ptr DDS_DomainParticipantJavaPeer::find_topic (const char * topic_name, const DDS::Duration_t& timeout)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_topic_name = 0;
  copyToJava (_jni, _j_topic_name, topic_name, true);
  jobject _j_timeout = 0;
  copyToJava (_jni, _j_timeout, timeout, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "find_topic", "(Ljava/lang/String;LDDS/Duration_t;)LDDS/Topic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_topic_name, _j_timeout);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Topic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_find_1topic (JNIEnv *_jni, jobject _jthis, jobject topic_name, jobject timeout)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::String_var _c_topic_name;
      copyToCxx (_jni, _c_topic_name, topic_name);
      DDS::Duration_t _c_timeout;
      copyToCxx (_jni, _c_timeout, timeout);
      DDS::Topic_var _c_ret = _this->find_topic (_c_topic_name.in (), _c_timeout);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::TopicDescription_ptr DDS_DomainParticipantJavaPeer::lookup_topicdescription (const char * name)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_name = 0;
  copyToJava (_jni, _j_name, name, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_topicdescription", "(Ljava/lang/String;)LDDS/TopicDescription;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_name);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::TopicDescription_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_lookup_1topicdescription (JNIEnv *_jni, jobject _jthis, jobject name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::String_var _c_name;
      copyToCxx (_jni, _c_name, name);
      DDS::TopicDescription_var _c_ret = _this->lookup_topicdescription (_c_name.in ());
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ContentFilteredTopic_ptr DDS_DomainParticipantJavaPeer::create_contentfilteredtopic (const char * name, DDS::Topic_ptr related_topic, const char * filter_expression, const DDS::StringSeq& expression_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_name = 0;
  copyToJava (_jni, _j_name, name, true);
  jobject _j_related_topic = 0;
  DDS::Topic_var _c_related_topic = DDS::Topic::_duplicate (related_topic);
  copyToJava (_jni, _j_related_topic, _c_related_topic, true);
  jobject _j_filter_expression = 0;
  copyToJava (_jni, _j_filter_expression, filter_expression, true);
  jobjectArray _j_expression_parameters = 0;
  copyToJava (_jni, _j_expression_parameters, expression_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_contentfilteredtopic", "(Ljava/lang/String;LDDS/Topic;Ljava/lang/String;[Ljava/lang/String;)LDDS/ContentFilteredTopic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_name, _j_related_topic, _j_filter_expression, _j_expression_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::ContentFilteredTopic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_create_1contentfilteredtopic (JNIEnv *_jni, jobject _jthis, jobject name, jobject related_topic, jobject filter_expression, jobjectArray expression_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::String_var _c_name;
      copyToCxx (_jni, _c_name, name);
      DDS::Topic_var _c_related_topic;
      copyToCxx (_jni, _c_related_topic, related_topic);
      CORBA::String_var _c_filter_expression;
      copyToCxx (_jni, _c_filter_expression, filter_expression);
      DDS::StringSeq _c_expression_parameters;
      copyToCxx (_jni, _c_expression_parameters, expression_parameters);
      DDS::ContentFilteredTopic_var _c_ret = _this->create_contentfilteredtopic (_c_name.in (), _c_related_topic.in (), _c_filter_expression.in (), _c_expression_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_contentfilteredtopic (DDS::ContentFilteredTopic_ptr a_contentfilteredtopic)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_contentfilteredtopic = 0;
  DDS::ContentFilteredTopic_var _c_a_contentfilteredtopic = DDS::ContentFilteredTopic::_duplicate (a_contentfilteredtopic);
  copyToJava (_jni, _j_a_contentfilteredtopic, _c_a_contentfilteredtopic, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_contentfilteredtopic", "(LDDS/ContentFilteredTopic;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_contentfilteredtopic);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1contentfilteredtopic (JNIEnv *_jni, jobject _jthis, jobject a_contentfilteredtopic)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ContentFilteredTopic_var _c_a_contentfilteredtopic;
      copyToCxx (_jni, _c_a_contentfilteredtopic, a_contentfilteredtopic);
      DDS::ReturnCode_t _c_ret = _this->delete_contentfilteredtopic (_c_a_contentfilteredtopic.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::MultiTopic_ptr DDS_DomainParticipantJavaPeer::create_multitopic (const char * name, const char * type_name, const char * subscription_expression, const DDS::StringSeq& expression_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_name = 0;
  copyToJava (_jni, _j_name, name, true);
  jobject _j_type_name = 0;
  copyToJava (_jni, _j_type_name, type_name, true);
  jobject _j_subscription_expression = 0;
  copyToJava (_jni, _j_subscription_expression, subscription_expression, true);
  jobjectArray _j_expression_parameters = 0;
  copyToJava (_jni, _j_expression_parameters, expression_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_multitopic", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)LDDS/MultiTopic;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_name, _j_type_name, _j_subscription_expression, _j_expression_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::MultiTopic_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_create_1multitopic (JNIEnv *_jni, jobject _jthis, jobject name, jobject type_name, jobject subscription_expression, jobjectArray expression_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::String_var _c_name;
      copyToCxx (_jni, _c_name, name);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      CORBA::String_var _c_subscription_expression;
      copyToCxx (_jni, _c_subscription_expression, subscription_expression);
      DDS::StringSeq _c_expression_parameters;
      copyToCxx (_jni, _c_expression_parameters, expression_parameters);
      DDS::MultiTopic_var _c_ret = _this->create_multitopic (_c_name.in (), _c_type_name.in (), _c_subscription_expression.in (), _c_expression_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_multitopic (DDS::MultiTopic_ptr a_multitopic)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_multitopic = 0;
  DDS::MultiTopic_var _c_a_multitopic = DDS::MultiTopic::_duplicate (a_multitopic);
  copyToJava (_jni, _j_a_multitopic, _c_a_multitopic, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_multitopic", "(LDDS/MultiTopic;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_multitopic);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1multitopic (JNIEnv *_jni, jobject _jthis, jobject a_multitopic)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::MultiTopic_var _c_a_multitopic;
      copyToCxx (_jni, _c_a_multitopic, a_multitopic);
      DDS::ReturnCode_t _c_ret = _this->delete_multitopic (_c_a_multitopic.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::delete_contained_entities ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_contained_entities", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

CORBA::Boolean DDS_DomainParticipantJavaPeer::contains_entity (DDS::InstanceHandle_t a_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "contains_entity", "(I)Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid, a_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1DomainParticipantTAOPeer_contains_1entity (JNIEnv *_jni, jobject _jthis, jint a_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->contains_entity (a_handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::set_qos (const DDS::DomainParticipantQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/DomainParticipantQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::DomainParticipantQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_qos (DDS::DomainParticipantQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DomainParticipantQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DomainParticipantQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/DomainParticipantQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DomainParticipantQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DomainParticipantQos;");
      DDS::DomainParticipantQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DomainParticipantQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::set_listener (DDS::DomainParticipantListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::DomainParticipantListener_var _c_a_listener = DDS::DomainParticipantListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/DomainParticipantListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::DomainParticipantListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipantListener_ptr DDS_DomainParticipantJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/DomainParticipantListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipantListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::DomainParticipantListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::ignore_participant (DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "ignore_participant", "(I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_ignore_1participant (JNIEnv *_jni, jobject _jthis, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->ignore_participant (handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::ignore_topic (DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "ignore_topic", "(I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_ignore_1topic (JNIEnv *_jni, jobject _jthis, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->ignore_topic (handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::ignore_publication (DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "ignore_publication", "(I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_ignore_1publication (JNIEnv *_jni, jobject _jthis, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->ignore_publication (handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::ignore_subscription (DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "ignore_subscription", "(I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_ignore_1subscription (JNIEnv *_jni, jobject _jthis, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->ignore_subscription (handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainId_t DDS_DomainParticipantJavaPeer::get_domain_id ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_domain_id", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1domain_1id (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::DomainId_t _c_ret = _this->get_domain_id ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::assert_liveliness ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "assert_liveliness", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_assert_1liveliness (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->assert_liveliness ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::set_default_publisher_qos (const DDS::PublisherQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_publisher_qos", "(LDDS/PublisherQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_set_1default_1publisher_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::PublisherQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_publisher_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_default_publisher_qos (DDS::PublisherQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/PublisherQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/PublisherQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_publisher_qos", "(LDDS/PublisherQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/PublisherQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1default_1publisher_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/PublisherQos;");
      DDS::PublisherQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_publisher_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/PublisherQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::set_default_subscriber_qos (const DDS::SubscriberQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_subscriber_qos", "(LDDS/SubscriberQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_set_1default_1subscriber_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::SubscriberQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_subscriber_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_default_subscriber_qos (DDS::SubscriberQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/SubscriberQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/SubscriberQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_subscriber_qos", "(LDDS/SubscriberQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/SubscriberQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1default_1subscriber_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/SubscriberQos;");
      DDS::SubscriberQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_subscriber_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/SubscriberQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::set_default_topic_qos (const DDS::TopicQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_topic_qos", "(LDDS/TopicQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_set_1default_1topic_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::TopicQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_topic_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_default_topic_qos (DDS::TopicQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/TopicQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/TopicQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_topic_qos", "(LDDS/TopicQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/TopicQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1default_1topic_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/TopicQos;");
      DDS::TopicQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_topic_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/TopicQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_current_time (DDS::Time_t& current_time)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_current_time = 0;
  copyToJava (_jni, _n_current_time, current_time, true);
  jclass _hc_current_time = findClass (_jni, "DDS/Time_tHolder");
  jmethodID _hm_current_time = _jni->GetMethodID (_hc_current_time, "<init>", "()V");
  jobject _j_current_time = _jni->NewObject (_hc_current_time, _hm_current_time);
  holderize (_jni, _j_current_time, _n_current_time, "LDDS/Time_t;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_current_time", "(LDDS/Time_tHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_current_time);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_current_time = deholderize<jobject> (_jni, _j_current_time, "LDDS/Time_t;");
  _jni->DeleteLocalRef (_j_current_time);
  copyToCxx (_jni, current_time, _o_current_time);
  _jni->DeleteLocalRef (_o_current_time);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1current_1time (JNIEnv *_jni, jobject _jthis, jobject current_time)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_current_time = deholderize<jobject> (_jni, current_time, "LDDS/Time_t;");
      DDS::Time_t _c_current_time;
      copyToCxx (_jni, _c_current_time, _j_current_time);
      DDS::ReturnCode_t _c_ret = _this->get_current_time (_c_current_time);
      copyToJava (_jni, _j_current_time, _c_current_time);
      holderize (_jni, current_time, _j_current_time, "LDDS/Time_t;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_discovered_participants (DDS::InstanceHandleSeq& participant_handles)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jintArray _n_participant_handles = 0;
  copyToJava (_jni, _n_participant_handles, participant_handles, true);
  jclass _hc_participant_handles = findClass (_jni, "DDS/InstanceHandleSeqHolder");
  jmethodID _hm_participant_handles = _jni->GetMethodID (_hc_participant_handles, "<init>", "()V");
  jobject _j_participant_handles = _jni->NewObject (_hc_participant_handles, _hm_participant_handles);
  holderize (_jni, _j_participant_handles, _n_participant_handles, "[I");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_discovered_participants", "(LDDS/InstanceHandleSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_participant_handles);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jintArray _o_participant_handles = deholderize<jintArray> (_jni, _j_participant_handles, "[I");
  _jni->DeleteLocalRef (_j_participant_handles);
  copyToCxx (_jni, participant_handles, _o_participant_handles);
  _jni->DeleteLocalRef (_o_participant_handles);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1discovered_1participants (JNIEnv *_jni, jobject _jthis, jobject participant_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jintArray _j_participant_handles = deholderize<jintArray> (_jni, participant_handles, "[I");
      DDS::InstanceHandleSeq _c_participant_handles;
      copyToCxx (_jni, _c_participant_handles, _j_participant_handles);
      DDS::ReturnCode_t _c_ret = _this->get_discovered_participants (_c_participant_handles);
      copyToJava (_jni, _j_participant_handles, _c_participant_handles);
      holderize (_jni, participant_handles, _j_participant_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_discovered_participant_data (DDS::ParticipantBuiltinTopicData& participant_data, DDS::InstanceHandle_t participant_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_participant_data = 0;
  copyToJava (_jni, _n_participant_data, participant_data, true);
  jclass _hc_participant_data = findClass (_jni, "DDS/ParticipantBuiltinTopicDataHolder");
  jmethodID _hm_participant_data = _jni->GetMethodID (_hc_participant_data, "<init>", "()V");
  jobject _j_participant_data = _jni->NewObject (_hc_participant_data, _hm_participant_data);
  holderize (_jni, _j_participant_data, _n_participant_data, "LDDS/ParticipantBuiltinTopicData;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_discovered_participant_data", "(LDDS/ParticipantBuiltinTopicDataHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_participant_data, participant_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_participant_data = deholderize<jobject> (_jni, _j_participant_data, "LDDS/ParticipantBuiltinTopicData;");
  _jni->DeleteLocalRef (_j_participant_data);
  copyToCxx (_jni, participant_data, _o_participant_data);
  _jni->DeleteLocalRef (_o_participant_data);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1discovered_1participant_1data (JNIEnv *_jni, jobject _jthis, jobject participant_data, jint participant_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_participant_data = deholderize<jobject> (_jni, participant_data, "LDDS/ParticipantBuiltinTopicData;");
      DDS::ParticipantBuiltinTopicData _c_participant_data;
      copyToCxx (_jni, _c_participant_data, _j_participant_data);
      DDS::ReturnCode_t _c_ret = _this->get_discovered_participant_data (_c_participant_data, participant_handle);
      copyToJava (_jni, _j_participant_data, _c_participant_data);
      holderize (_jni, participant_data, _j_participant_data, "LDDS/ParticipantBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_discovered_topics (DDS::InstanceHandleSeq& topic_handles)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jintArray _n_topic_handles = 0;
  copyToJava (_jni, _n_topic_handles, topic_handles, true);
  jclass _hc_topic_handles = findClass (_jni, "DDS/InstanceHandleSeqHolder");
  jmethodID _hm_topic_handles = _jni->GetMethodID (_hc_topic_handles, "<init>", "()V");
  jobject _j_topic_handles = _jni->NewObject (_hc_topic_handles, _hm_topic_handles);
  holderize (_jni, _j_topic_handles, _n_topic_handles, "[I");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_discovered_topics", "(LDDS/InstanceHandleSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_topic_handles);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jintArray _o_topic_handles = deholderize<jintArray> (_jni, _j_topic_handles, "[I");
  _jni->DeleteLocalRef (_j_topic_handles);
  copyToCxx (_jni, topic_handles, _o_topic_handles);
  _jni->DeleteLocalRef (_o_topic_handles);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1discovered_1topics (JNIEnv *_jni, jobject _jthis, jobject topic_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jintArray _j_topic_handles = deholderize<jintArray> (_jni, topic_handles, "[I");
      DDS::InstanceHandleSeq _c_topic_handles;
      copyToCxx (_jni, _c_topic_handles, _j_topic_handles);
      DDS::ReturnCode_t _c_ret = _this->get_discovered_topics (_c_topic_handles);
      copyToJava (_jni, _j_topic_handles, _c_topic_handles);
      holderize (_jni, topic_handles, _j_topic_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantJavaPeer::get_discovered_topic_data (DDS::TopicBuiltinTopicData& topic_data, DDS::InstanceHandle_t topic_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_topic_data = 0;
  copyToJava (_jni, _n_topic_data, topic_data, true);
  jclass _hc_topic_data = findClass (_jni, "DDS/TopicBuiltinTopicDataHolder");
  jmethodID _hm_topic_data = _jni->GetMethodID (_hc_topic_data, "<init>", "()V");
  jobject _j_topic_data = _jni->NewObject (_hc_topic_data, _hm_topic_data);
  holderize (_jni, _j_topic_data, _n_topic_data, "LDDS/TopicBuiltinTopicData;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_discovered_topic_data", "(LDDS/TopicBuiltinTopicDataHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_topic_data, topic_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_topic_data = deholderize<jobject> (_jni, _j_topic_data, "LDDS/TopicBuiltinTopicData;");
  _jni->DeleteLocalRef (_j_topic_data);
  copyToCxx (_jni, topic_data, _o_topic_data);
  _jni->DeleteLocalRef (_o_topic_data);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1discovered_1topic_1data (JNIEnv *_jni, jobject _jthis, jobject topic_data, jint topic_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      jobject _j_topic_data = deholderize<jobject> (_jni, topic_data, "LDDS/TopicBuiltinTopicData;");
      DDS::TopicBuiltinTopicData _c_topic_data;
      copyToCxx (_jni, _c_topic_data, _j_topic_data);
      DDS::ReturnCode_t _c_ret = _this->get_discovered_topic_data (_c_topic_data, topic_handle);
      copyToJava (_jni, _j_topic_data, _c_topic_data);
      holderize (_jni, topic_data, _j_topic_data, "LDDS/TopicBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipant_var _this = DDS::DomainParticipant::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: DomainParticipant */


/* Begin INTERFACE: DomainParticipantFactory */

void copyToCxx (JNIEnv *jni, DDS::DomainParticipantFactory_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DomainParticipantFactory::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DomainParticipantFactoryJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DomainParticipantFactory_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DomainParticipantFactoryTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DomainParticipantFactoryHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DomainParticipantFactory_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::DomainParticipant_ptr DDS_DomainParticipantFactoryJavaPeer::create_participant (DDS::DomainId_t domainId, const DDS::DomainParticipantQos& qos, DDS::DomainParticipantListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::DomainParticipantListener_var _c_a_listener = DDS::DomainParticipantListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_participant", "(ILDDS/DomainParticipantQos;LDDS/DomainParticipantListener;I)LDDS/DomainParticipant;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, domainId, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipant_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_create_1participant (JNIEnv *_jni, jobject _jthis, jint domainId, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipantQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::DomainParticipantListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::DomainParticipant_var _c_ret = _this->create_participant (domainId, _c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantFactoryJavaPeer::delete_participant (DDS::DomainParticipant_ptr a_participant)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_participant = 0;
  DDS::DomainParticipant_var _c_a_participant = DDS::DomainParticipant::_duplicate (a_participant);
  copyToJava (_jni, _j_a_participant, _c_a_participant, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_participant", "(LDDS/DomainParticipant;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_participant);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_delete_1participant (JNIEnv *_jni, jobject _jthis, jobject a_participant)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_a_participant;
      copyToCxx (_jni, _c_a_participant, a_participant);
      DDS::ReturnCode_t _c_ret = _this->delete_participant (_c_a_participant.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipant_ptr DDS_DomainParticipantFactoryJavaPeer::lookup_participant (DDS::DomainId_t domainId)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_participant", "(I)LDDS/DomainParticipant;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, domainId);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipant_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_lookup_1participant (JNIEnv *_jni, jobject _jthis, jint domainId)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->lookup_participant (domainId);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantFactoryJavaPeer::set_default_participant_qos (const DDS::DomainParticipantQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_participant_qos", "(LDDS/DomainParticipantQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_set_1default_1participant_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipantQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_participant_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantFactoryJavaPeer::get_default_participant_qos (DDS::DomainParticipantQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DomainParticipantQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DomainParticipantQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_participant_qos", "(LDDS/DomainParticipantQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DomainParticipantQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_get_1default_1participant_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DomainParticipantQos;");
      DDS::DomainParticipantQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_participant_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DomainParticipantQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipantFactory_ptr DDS_DomainParticipantFactoryJavaPeer::get_instance ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_instance", "()LDDS/DomainParticipantFactory;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipantFactory_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_get_1instance (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipantFactory_var _c_ret = _this->get_instance ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantFactoryJavaPeer::set_qos (const DDS::DomainParticipantFactoryQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/DomainParticipantFactoryQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      DDS::DomainParticipantFactoryQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DomainParticipantFactoryJavaPeer::get_qos (DDS::DomainParticipantFactoryQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DomainParticipantFactoryQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DomainParticipantFactoryQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/DomainParticipantFactoryQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DomainParticipantFactoryQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DomainParticipantFactoryTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DomainParticipantFactory_var _this = DDS::DomainParticipantFactory::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DomainParticipantFactoryQos;");
      DDS::DomainParticipantFactoryQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DomainParticipantFactoryQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: DomainParticipantFactory */

/* End MODULE: DDS */
