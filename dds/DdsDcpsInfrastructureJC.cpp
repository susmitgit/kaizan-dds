#include "DdsDcpsInfrastructureJC.h"
#include "idl2jni_runtime.h"

/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsInfrastructure.idl */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: DomainId_t */


/* End TYPEDEF: DomainId_t */


/* Begin TYPEDEF: ReturnCode_t */


/* End TYPEDEF: ReturnCode_t */


/* Begin CONST: HANDLE_NIL */


/* End CONST: HANDLE_NIL */


/* Begin CONST: LENGTH_UNLIMITED */


/* End CONST: LENGTH_UNLIMITED */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin CONST: RETCODE_OK */


/* End CONST: RETCODE_OK */


/* Begin CONST: RETCODE_ERROR */


/* End CONST: RETCODE_ERROR */


/* Begin CONST: RETCODE_UNSUPPORTED */


/* End CONST: RETCODE_UNSUPPORTED */


/* Begin CONST: RETCODE_BAD_PARAMETER */


/* End CONST: RETCODE_BAD_PARAMETER */


/* Begin CONST: RETCODE_PRECONDITION_NOT_MET */


/* End CONST: RETCODE_PRECONDITION_NOT_MET */


/* Begin CONST: RETCODE_OUT_OF_RESOURCES */


/* End CONST: RETCODE_OUT_OF_RESOURCES */


/* Begin CONST: RETCODE_NOT_ENABLED */


/* End CONST: RETCODE_NOT_ENABLED */


/* Begin CONST: RETCODE_IMMUTABLE_POLICY */


/* End CONST: RETCODE_IMMUTABLE_POLICY */


/* Begin CONST: RETCODE_INCONSISTENT_POLICY */


/* End CONST: RETCODE_INCONSISTENT_POLICY */


/* Begin CONST: RETCODE_ALREADY_DELETED */


/* End CONST: RETCODE_ALREADY_DELETED */


/* Begin CONST: RETCODE_TIMEOUT */


/* End CONST: RETCODE_TIMEOUT */


/* Begin CONST: RETCODE_NO_DATA */


/* End CONST: RETCODE_NO_DATA */


/* Begin CONST: RETCODE_ILLEGAL_OPERATION */


/* End CONST: RETCODE_ILLEGAL_OPERATION */


/* Begin TYPEDEF: StatusKind */


/* End TYPEDEF: StatusKind */


/* Begin TYPEDEF: StatusMask */


/* End TYPEDEF: StatusMask */


/* Begin CONST: INCONSISTENT_TOPIC_STATUS */


/* End CONST: INCONSISTENT_TOPIC_STATUS */


/* Begin CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* End CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* Begin CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* End CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* Begin CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: SAMPLE_LOST_STATUS */


/* End CONST: SAMPLE_LOST_STATUS */


/* Begin CONST: SAMPLE_REJECTED_STATUS */


/* End CONST: SAMPLE_REJECTED_STATUS */


/* Begin CONST: DATA_ON_READERS_STATUS */


/* End CONST: DATA_ON_READERS_STATUS */


/* Begin CONST: DATA_AVAILABLE_STATUS */


/* End CONST: DATA_AVAILABLE_STATUS */


/* Begin CONST: LIVELINESS_LOST_STATUS */


/* End CONST: LIVELINESS_LOST_STATUS */


/* Begin CONST: LIVELINESS_CHANGED_STATUS */


/* End CONST: LIVELINESS_CHANGED_STATUS */


/* Begin CONST: PUBLICATION_MATCHED_STATUS */


/* End CONST: PUBLICATION_MATCHED_STATUS */


/* Begin CONST: SUBSCRIPTION_MATCHED_STATUS */


/* End CONST: SUBSCRIPTION_MATCHED_STATUS */


/* Begin STRUCT: InconsistentTopicStatus */

void copyToCxx (JNIEnv *jni, DDS::InconsistentTopicStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::InconsistentTopicStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/InconsistentTopicStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
}


/* End STRUCT: InconsistentTopicStatus */


/* Begin STRUCT: SampleLostStatus */

void copyToCxx (JNIEnv *jni, DDS::SampleLostStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SampleLostStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SampleLostStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
}


/* End STRUCT: SampleLostStatus */


/* Begin ENUM: SampleRejectedStatusKind */

void copyToCxx (JNIEnv *jni, DDS::SampleRejectedStatusKind &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<DDS::SampleRejectedStatusKind> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SampleRejectedStatusKind &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "DDS/SampleRejectedStatusKind");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LDDS/SampleRejectedStatusKind;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: SampleRejectedStatusKind */


/* Begin STRUCT: SampleRejectedStatus */

void copyToCxx (JNIEnv *jni, DDS::SampleRejectedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_reason", "LDDS/SampleRejectedStatusKind;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.last_reason, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    target.last_instance_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SampleRejectedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SampleRejectedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_reason", "LDDS/SampleRejectedStatusKind;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.last_reason, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    jni->SetIntField (target, fid, source.last_instance_handle);
  }
}


/* End STRUCT: SampleRejectedStatus */


/* Begin STRUCT: LivelinessLostStatus */

void copyToCxx (JNIEnv *jni, DDS::LivelinessLostStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LivelinessLostStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/LivelinessLostStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
}


/* End STRUCT: LivelinessLostStatus */


/* Begin STRUCT: LivelinessChangedStatus */

void copyToCxx (JNIEnv *jni, DDS::LivelinessChangedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "alive_count", "I");
    target.alive_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "not_alive_count", "I");
    target.not_alive_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "alive_count_change", "I");
    target.alive_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "not_alive_count_change", "I");
    target.not_alive_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_publication_handle", "I");
    target.last_publication_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::LivelinessChangedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/LivelinessChangedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "alive_count", "I");
    jni->SetIntField (target, fid, source.alive_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "not_alive_count", "I");
    jni->SetIntField (target, fid, source.not_alive_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "alive_count_change", "I");
    jni->SetIntField (target, fid, source.alive_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "not_alive_count_change", "I");
    jni->SetIntField (target, fid, source.not_alive_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_publication_handle", "I");
    jni->SetIntField (target, fid, source.last_publication_handle);
  }
}


/* End STRUCT: LivelinessChangedStatus */


/* Begin STRUCT: OfferedDeadlineMissedStatus */

void copyToCxx (JNIEnv *jni, DDS::OfferedDeadlineMissedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    target.last_instance_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::OfferedDeadlineMissedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/OfferedDeadlineMissedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    jni->SetIntField (target, fid, source.last_instance_handle);
  }
}


/* End STRUCT: OfferedDeadlineMissedStatus */


/* Begin STRUCT: RequestedDeadlineMissedStatus */

void copyToCxx (JNIEnv *jni, DDS::RequestedDeadlineMissedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    target.last_instance_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::RequestedDeadlineMissedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/RequestedDeadlineMissedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_instance_handle", "I");
    jni->SetIntField (target, fid, source.last_instance_handle);
  }
}


/* End STRUCT: RequestedDeadlineMissedStatus */


/* Begin STRUCT: OfferedIncompatibleQosStatus */

void copyToCxx (JNIEnv *jni, DDS::OfferedIncompatibleQosStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_policy_id", "I");
    target.last_policy_id = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "policies", "[LDDS/QosPolicyCount;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.policies, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::OfferedIncompatibleQosStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/OfferedIncompatibleQosStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_policy_id", "I");
    jni->SetIntField (target, fid, source.last_policy_id);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "policies", "[LDDS/QosPolicyCount;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.policies, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: OfferedIncompatibleQosStatus */


/* Begin STRUCT: RequestedIncompatibleQosStatus */

void copyToCxx (JNIEnv *jni, DDS::RequestedIncompatibleQosStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_policy_id", "I");
    target.last_policy_id = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "policies", "[LDDS/QosPolicyCount;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.policies, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::RequestedIncompatibleQosStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/RequestedIncompatibleQosStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_policy_id", "I");
    jni->SetIntField (target, fid, source.last_policy_id);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "policies", "[LDDS/QosPolicyCount;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.policies, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: RequestedIncompatibleQosStatus */


/* Begin STRUCT: PublicationMatchedStatus */

void copyToCxx (JNIEnv *jni, DDS::PublicationMatchedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count", "I");
    target.current_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count_change", "I");
    target.current_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_subscription_handle", "I");
    target.last_subscription_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::PublicationMatchedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/PublicationMatchedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count", "I");
    jni->SetIntField (target, fid, source.current_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count_change", "I");
    jni->SetIntField (target, fid, source.current_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_subscription_handle", "I");
    jni->SetIntField (target, fid, source.last_subscription_handle);
  }
}


/* End STRUCT: PublicationMatchedStatus */


/* Begin STRUCT: SubscriptionMatchedStatus */

void copyToCxx (JNIEnv *jni, DDS::SubscriptionMatchedStatus &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    target.total_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    target.total_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count", "I");
    target.current_count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count_change", "I");
    target.current_count_change = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_publication_handle", "I");
    target.last_publication_handle = jni->GetIntField (source, fid);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriptionMatchedStatus &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "DDS/SubscriptionMatchedStatus");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count", "I");
    jni->SetIntField (target, fid, source.total_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "total_count_change", "I");
    jni->SetIntField (target, fid, source.total_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count", "I");
    jni->SetIntField (target, fid, source.current_count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "current_count_change", "I");
    jni->SetIntField (target, fid, source.current_count_change);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "last_publication_handle", "I");
    jni->SetIntField (target, fid, source.last_publication_handle);
  }
}


/* End STRUCT: SubscriptionMatchedStatus */


/* Begin INTERFACE-FWD: Listener */


/* End INTERFACE-FWD: Listener */


/* Begin INTERFACE-FWD: Entity */


/* End INTERFACE-FWD: Entity */


/* Begin INTERFACE: Listener */

void copyToCxx (JNIEnv *jni, DDS::Listener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Listener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_ListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Listener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_ListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_ListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Listener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}


/* End INTERFACE: Listener */


/* Begin INTERFACE: Condition */

void copyToCxx (JNIEnv *jni, DDS::Condition_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Condition::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_ConditionJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Condition_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_ConditionTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_ConditionHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Condition_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

CORBA::Boolean DDS_ConditionJavaPeer::get_trigger_value ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_trigger_value", "()Z");
  jboolean _j_ret = _jni->CallBooleanMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1ConditionTAOPeer_get_1trigger_1value (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Condition_var _this = DDS::Condition::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->get_trigger_value ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: Condition */


/* Begin INTERFACE: WaitSetInterf */

void copyToCxx (JNIEnv *jni, DDS::WaitSetInterf_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::WaitSetInterf::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_WaitSetInterfJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::WaitSetInterf_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_WaitSetInterfTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_WaitSetInterfHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::WaitSetInterf_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_WaitSetInterfJavaPeer::wait (DDS::ConditionSeq& active_conditions, const DDS::Duration_t& timeout)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_active_conditions = 0;
  copyToJava (_jni, _n_active_conditions, active_conditions, true);
  jclass _hc_active_conditions = findClass (_jni, "DDS/ConditionSeqHolder");
  jmethodID _hm_active_conditions = _jni->GetMethodID (_hc_active_conditions, "<init>", "()V");
  jobject _j_active_conditions = _jni->NewObject (_hc_active_conditions, _hm_active_conditions);
  holderize (_jni, _j_active_conditions, _n_active_conditions, "[LDDS/Condition;");
  jobject _j_timeout = 0;
  copyToJava (_jni, _j_timeout, timeout, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "wait", "(LDDS/ConditionSeqHolder;LDDS/Duration_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_active_conditions, _j_timeout);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_active_conditions = deholderize<jobjectArray> (_jni, _j_active_conditions, "[LDDS/Condition;");
  _jni->DeleteLocalRef (_j_active_conditions);
  copyToCxx (_jni, active_conditions, _o_active_conditions);
  _jni->DeleteLocalRef (_o_active_conditions);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1WaitSetInterfTAOPeer_wait (JNIEnv *_jni, jobject _jthis, jobject active_conditions, jobject timeout)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::WaitSetInterf_var _this = DDS::WaitSetInterf::_narrow (_this_obj);
      jobjectArray _j_active_conditions = deholderize<jobjectArray> (_jni, active_conditions, "[LDDS/Condition;");
      DDS::ConditionSeq _c_active_conditions;
      copyToCxx (_jni, _c_active_conditions, _j_active_conditions);
      DDS::Duration_t _c_timeout;
      copyToCxx (_jni, _c_timeout, timeout);
      DDS::ReturnCode_t _c_ret = _this->wait (_c_active_conditions, _c_timeout);
      copyToJava (_jni, _j_active_conditions, _c_active_conditions);
      holderize (_jni, active_conditions, _j_active_conditions, "[LDDS/Condition;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_WaitSetInterfJavaPeer::attach_condition (DDS::Condition_ptr cond)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_cond = 0;
  DDS::Condition_var _c_cond = DDS::Condition::_duplicate (cond);
  copyToJava (_jni, _j_cond, _c_cond, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "attach_condition", "(LDDS/Condition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_cond);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1WaitSetInterfTAOPeer_attach_1condition (JNIEnv *_jni, jobject _jthis, jobject cond)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::WaitSetInterf_var _this = DDS::WaitSetInterf::_narrow (_this_obj);
      DDS::Condition_var _c_cond;
      copyToCxx (_jni, _c_cond, cond);
      DDS::ReturnCode_t _c_ret = _this->attach_condition (_c_cond.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_WaitSetInterfJavaPeer::detach_condition (DDS::Condition_ptr cond)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_cond = 0;
  DDS::Condition_var _c_cond = DDS::Condition::_duplicate (cond);
  copyToJava (_jni, _j_cond, _c_cond, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "detach_condition", "(LDDS/Condition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_cond);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1WaitSetInterfTAOPeer_detach_1condition (JNIEnv *_jni, jobject _jthis, jobject cond)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::WaitSetInterf_var _this = DDS::WaitSetInterf::_narrow (_this_obj);
      DDS::Condition_var _c_cond;
      copyToCxx (_jni, _c_cond, cond);
      DDS::ReturnCode_t _c_ret = _this->detach_condition (_c_cond.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_WaitSetInterfJavaPeer::get_conditions (DDS::ConditionSeq& attached_conditions)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_attached_conditions = 0;
  copyToJava (_jni, _n_attached_conditions, attached_conditions, true);
  jclass _hc_attached_conditions = findClass (_jni, "DDS/ConditionSeqHolder");
  jmethodID _hm_attached_conditions = _jni->GetMethodID (_hc_attached_conditions, "<init>", "()V");
  jobject _j_attached_conditions = _jni->NewObject (_hc_attached_conditions, _hm_attached_conditions);
  holderize (_jni, _j_attached_conditions, _n_attached_conditions, "[LDDS/Condition;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_conditions", "(LDDS/ConditionSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_attached_conditions);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_attached_conditions = deholderize<jobjectArray> (_jni, _j_attached_conditions, "[LDDS/Condition;");
  _jni->DeleteLocalRef (_j_attached_conditions);
  copyToCxx (_jni, attached_conditions, _o_attached_conditions);
  _jni->DeleteLocalRef (_o_attached_conditions);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1WaitSetInterfTAOPeer_get_1conditions (JNIEnv *_jni, jobject _jthis, jobject attached_conditions)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::WaitSetInterf_var _this = DDS::WaitSetInterf::_narrow (_this_obj);
      jobjectArray _j_attached_conditions = deholderize<jobjectArray> (_jni, attached_conditions, "[LDDS/Condition;");
      DDS::ConditionSeq _c_attached_conditions;
      copyToCxx (_jni, _c_attached_conditions, _j_attached_conditions);
      DDS::ReturnCode_t _c_ret = _this->get_conditions (_c_attached_conditions);
      copyToJava (_jni, _j_attached_conditions, _c_attached_conditions);
      holderize (_jni, attached_conditions, _j_attached_conditions, "[LDDS/Condition;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: WaitSetInterf */


/* Begin INTERFACE: GuardConditionInterf */

void copyToCxx (JNIEnv *jni, DDS::GuardConditionInterf_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::GuardConditionInterf::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_GuardConditionInterfJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::GuardConditionInterf_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_GuardConditionInterfTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_GuardConditionInterfHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::GuardConditionInterf_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_GuardConditionInterfJavaPeer::set_trigger_value (CORBA::Boolean value)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_trigger_value", "(Z)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, value);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1GuardConditionInterfTAOPeer_set_1trigger_1value (JNIEnv *_jni, jobject _jthis, jboolean value)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::GuardConditionInterf_var _this = DDS::GuardConditionInterf::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->set_trigger_value (value);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1GuardConditionInterfTAOPeer_get_1trigger_1value (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::GuardConditionInterf_var _this = DDS::GuardConditionInterf::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->get_trigger_value ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: GuardConditionInterf */


/* Begin INTERFACE: StatusCondition */

void copyToCxx (JNIEnv *jni, DDS::StatusCondition_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::StatusCondition::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_StatusConditionJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::StatusCondition_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_StatusConditionTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_StatusConditionHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::StatusCondition_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::StatusMask DDS_StatusConditionJavaPeer::get_enabled_statuses ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_enabled_statuses", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1StatusConditionTAOPeer_get_1enabled_1statuses (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::StatusCondition_var _this = DDS::StatusCondition::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_enabled_statuses ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_StatusConditionJavaPeer::set_enabled_statuses (DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_enabled_statuses", "(I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1StatusConditionTAOPeer_set_1enabled_1statuses (JNIEnv *_jni, jobject _jthis, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::StatusCondition_var _this = DDS::StatusCondition::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->set_enabled_statuses (mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Entity_ptr DDS_StatusConditionJavaPeer::get_entity ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_entity", "()LDDS/Entity;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Entity_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1StatusConditionTAOPeer_get_1entity (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::StatusCondition_var _this = DDS::StatusCondition::_narrow (_this_obj);
      DDS::Entity_var _c_ret = _this->get_entity ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1StatusConditionTAOPeer_get_1trigger_1value (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::StatusCondition_var _this = DDS::StatusCondition::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->get_trigger_value ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: StatusCondition */


/* Begin CONST: USERDATA_QOS_POLICY_NAME */


/* End CONST: USERDATA_QOS_POLICY_NAME */


/* Begin CONST: DURABILITY_QOS_POLICY_NAME */


/* End CONST: DURABILITY_QOS_POLICY_NAME */


/* Begin CONST: PRESENTATION_QOS_POLICY_NAME */


/* End CONST: PRESENTATION_QOS_POLICY_NAME */


/* Begin CONST: DEADLINE_QOS_POLICY_NAME */


/* End CONST: DEADLINE_QOS_POLICY_NAME */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* End CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIP_QOS_POLICY_NAME */


/* End CONST: OWNERSHIP_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* Begin CONST: LIVELINESS_QOS_POLICY_NAME */


/* End CONST: LIVELINESS_QOS_POLICY_NAME */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* Begin CONST: PARTITION_QOS_POLICY_NAME */


/* End CONST: PARTITION_QOS_POLICY_NAME */


/* Begin CONST: RELIABILITY_QOS_POLICY_NAME */


/* End CONST: RELIABILITY_QOS_POLICY_NAME */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* End CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* Begin CONST: HISTORY_QOS_POLICY_NAME */


/* End CONST: HISTORY_QOS_POLICY_NAME */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* End CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* End CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: TOPICDATA_QOS_POLICY_NAME */


/* End CONST: TOPICDATA_QOS_POLICY_NAME */


/* Begin CONST: GROUPDATA_QOS_POLICY_NAME */


/* End CONST: GROUPDATA_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* Begin CONST: LIFESPAN_QOS_POLICY_NAME */


/* End CONST: LIFESPAN_QOS_POLICY_NAME */


/* Begin CONST: DURABILITYSERVICE_POLICY_NAME */


/* End CONST: DURABILITYSERVICE_POLICY_NAME */


/* Begin CONST: INVALID_QOS_POLICY_ID */


/* End CONST: INVALID_QOS_POLICY_ID */


/* Begin CONST: USERDATA_QOS_POLICY_ID */


/* End CONST: USERDATA_QOS_POLICY_ID */


/* Begin CONST: DURABILITY_QOS_POLICY_ID */


/* End CONST: DURABILITY_QOS_POLICY_ID */


/* Begin CONST: PRESENTATION_QOS_POLICY_ID */


/* End CONST: PRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DEADLINE_QOS_POLICY_ID */


/* End CONST: DEADLINE_QOS_POLICY_ID */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* End CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIP_QOS_POLICY_ID */


/* End CONST: OWNERSHIP_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* Begin CONST: LIVELINESS_QOS_POLICY_ID */


/* End CONST: LIVELINESS_QOS_POLICY_ID */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* Begin CONST: PARTITION_QOS_POLICY_ID */


/* End CONST: PARTITION_QOS_POLICY_ID */


/* Begin CONST: RELIABILITY_QOS_POLICY_ID */


/* End CONST: RELIABILITY_QOS_POLICY_ID */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* End CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* Begin CONST: HISTORY_QOS_POLICY_ID */


/* End CONST: HISTORY_QOS_POLICY_ID */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* End CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* End CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: TOPICDATA_QOS_POLICY_ID */


/* End CONST: TOPICDATA_QOS_POLICY_ID */


/* Begin CONST: GROUPDATA_QOS_POLICY_ID */


/* End CONST: GROUPDATA_QOS_POLICY_ID */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* Begin CONST: LIFESPAN_QOS_POLICY_ID */


/* End CONST: LIFESPAN_QOS_POLICY_ID */


/* Begin CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* End CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* Begin INTERFACE: Entity */

void copyToCxx (JNIEnv *jni, DDS::Entity_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Entity::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_EntityJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Entity_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_EntityTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_EntityHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Entity_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t DDS_EntityJavaPeer::enable ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "enable", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1EntityTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Entity_var _this = DDS::Entity::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::StatusCondition_ptr DDS_EntityJavaPeer::get_statuscondition ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_statuscondition", "()LDDS/StatusCondition;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::StatusCondition_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1EntityTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Entity_var _this = DDS::Entity::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::StatusMask DDS_EntityJavaPeer::get_status_changes ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_status_changes", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1EntityTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Entity_var _this = DDS::Entity::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t DDS_EntityJavaPeer::get_instance_handle ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_instance_handle", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1EntityTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Entity_var _this = DDS::Entity::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: Entity */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* Begin CONST: MAX_USER_DOMAINID */


/* End CONST: MAX_USER_DOMAINID */


/* Begin MODULE: DCPS */



/* Begin CONST: ALL_STATUS_MASK */


/* End CONST: ALL_STATUS_MASK */


/* Begin CONST: NO_STATUS_MASK */


/* End CONST: NO_STATUS_MASK */


/* Begin CONST: DEFAULT_STATUS_MASK */


/* End CONST: DEFAULT_STATUS_MASK */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
