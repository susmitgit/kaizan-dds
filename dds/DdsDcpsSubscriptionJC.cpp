#include "DdsDcpsSubscriptionJC.h"
#include "idl2jni_runtime.h"

#include "dds/DdsDcpsTopicC.h"
/* Generated by ../../bin/idl2jni running on input file ../../dds/DdsDcpsSubscription.idl */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: TopicDescription */


/* End INTERFACE-FWD: TopicDescription */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin INTERFACE-FWD: Subscriber */


/* End INTERFACE-FWD: Subscriber */


/* Begin INTERFACE: DataReaderListener */

void copyToCxx (JNIEnv *jni, DDS::DataReaderListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DataReaderListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DataReaderListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReaderListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DataReaderListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DataReaderListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DataReaderListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void DDS_DataReaderListenerJavaPeer::on_requested_deadline_missed (DDS::DataReader_ptr reader, const DDS::RequestedDeadlineMissedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_requested_deadline_missed", "(LDDS/DataReader;LDDS/RequestedDeadlineMissedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1requested_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_deadline_missed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_requested_incompatible_qos (DDS::DataReader_ptr reader, const DDS::RequestedIncompatibleQosStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_requested_incompatible_qos", "(LDDS/DataReader;LDDS/RequestedIncompatibleQosStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1requested_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_incompatible_qos (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_sample_rejected (DDS::DataReader_ptr reader, const DDS::SampleRejectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_sample_rejected", "(LDDS/DataReader;LDDS/SampleRejectedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1sample_1rejected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_rejected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_liveliness_changed (DDS::DataReader_ptr reader, const DDS::LivelinessChangedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_liveliness_changed", "(LDDS/DataReader;LDDS/LivelinessChangedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1liveliness_1changed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_changed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_data_available (DDS::DataReader_ptr reader)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_data_available", "(LDDS/DataReader;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1data_1available (JNIEnv *_jni, jobject _jthis, jobject reader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      _this->on_data_available (_c_reader.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_subscription_matched (DDS::DataReader_ptr reader, const DDS::SubscriptionMatchedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_subscription_matched", "(LDDS/DataReader;LDDS/SubscriptionMatchedStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1subscription_1matched (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_matched (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

void DDS_DataReaderListenerJavaPeer::on_sample_lost (DDS::DataReader_ptr reader, const DDS::SampleLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_reader = 0;
  DDS::DataReader_var _c_reader = DDS::DataReader::_duplicate (reader);
  copyToJava (_jni, _j_reader, _c_reader, true);
  jobject _j_status = 0;
  copyToJava (_jni, _j_status, status, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_sample_lost", "(LDDS/DataReader;LDDS/SampleLostStatus;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_reader, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1DataReaderListenerTAOPeer_on_1sample_1lost (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReaderListener_var _this = DDS::DataReaderListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_lost (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: DataReaderListener */


/* Begin INTERFACE: SubscriberListener */

void copyToCxx (JNIEnv *jni, DDS::SubscriberListener_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::SubscriberListener::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_SubscriberListenerJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::SubscriberListener_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_SubscriberListenerTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_SubscriberListenerHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::SubscriberListener_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

void DDS_SubscriberListenerJavaPeer::on_data_on_readers (DDS::Subscriber_ptr subs)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_subs = 0;
  DDS::Subscriber_var _c_subs = DDS::Subscriber::_duplicate (subs);
  copyToJava (_jni, _j_subs, _c_subs, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "on_data_on_readers", "(LDDS/Subscriber;)V");
  _jni->CallVoidMethod (globalCallback_, _mid, _j_subs);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1data_1on_1readers (JNIEnv *_jni, jobject _jthis, jobject subs)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::Subscriber_var _c_subs;
      copyToCxx (_jni, _c_subs, subs);
      _this->on_data_on_readers (_c_subs.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1requested_1deadline_1missed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_deadline_missed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1requested_1incompatible_1qos (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_requested_incompatible_qos (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1sample_1rejected (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_rejected (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1liveliness_1changed (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_liveliness_changed (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1data_1available (JNIEnv *_jni, jobject _jthis, jobject reader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      _this->on_data_available (_c_reader.in ());
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1subscription_1matched (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_subscription_matched (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_DDS__1SubscriberListenerTAOPeer_on_1sample_1lost (JNIEnv *_jni, jobject _jthis, jobject reader, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::SubscriberListener_var _this = DDS::SubscriberListener::_narrow (_this_obj);
      DDS::DataReader_var _c_reader;
      copyToCxx (_jni, _c_reader, reader);
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, status);
      _this->on_sample_lost (_c_reader.in (), _c_status);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}


/* End INTERFACE: SubscriberListener */


/* Begin INTERFACE: ReadCondition */

void copyToCxx (JNIEnv *jni, DDS::ReadCondition_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::ReadCondition::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_ReadConditionJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::ReadCondition_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_ReadConditionTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_ReadConditionHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::ReadCondition_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::SampleStateMask DDS_ReadConditionJavaPeer::get_sample_state_mask ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_sample_state_mask", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1ReadConditionTAOPeer_get_1sample_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ReadCondition_var _this = DDS::ReadCondition::_narrow (_this_obj);
      DDS::SampleStateMask _c_ret = _this->get_sample_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ViewStateMask DDS_ReadConditionJavaPeer::get_view_state_mask ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_view_state_mask", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1ReadConditionTAOPeer_get_1view_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ReadCondition_var _this = DDS::ReadCondition::_narrow (_this_obj);
      DDS::ViewStateMask _c_ret = _this->get_view_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceStateMask DDS_ReadConditionJavaPeer::get_instance_state_mask ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_instance_state_mask", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1ReadConditionTAOPeer_get_1instance_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ReadCondition_var _this = DDS::ReadCondition::_narrow (_this_obj);
      DDS::InstanceStateMask _c_ret = _this->get_instance_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataReader_ptr DDS_ReadConditionJavaPeer::get_datareader ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_datareader", "()LDDS/DataReader;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReader_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1ReadConditionTAOPeer_get_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ReadCondition_var _this = DDS::ReadCondition::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->get_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1ReadConditionTAOPeer_get_1trigger_1value (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::ReadCondition_var _this = DDS::ReadCondition::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->get_trigger_value ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: ReadCondition */


/* Begin INTERFACE: QueryCondition */

void copyToCxx (JNIEnv *jni, DDS::QueryCondition_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::QueryCondition::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_QueryConditionJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::QueryCondition_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_QueryConditionTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_QueryConditionHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::QueryCondition_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

char * DDS_QueryConditionJavaPeer::get_query_expression ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_query_expression", "()Ljava/lang/String;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  CORBA::String_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1query_1expression (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_query_expression ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_QueryConditionJavaPeer::get_query_parameters (DDS::StringSeq& query_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_query_parameters = 0;
  copyToJava (_jni, _n_query_parameters, query_parameters, true);
  jclass _hc_query_parameters = findClass (_jni, "DDS/StringSeqHolder");
  jmethodID _hm_query_parameters = _jni->GetMethodID (_hc_query_parameters, "<init>", "()V");
  jobject _j_query_parameters = _jni->NewObject (_hc_query_parameters, _hm_query_parameters);
  holderize (_jni, _j_query_parameters, _n_query_parameters, "[Ljava/lang/String;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_query_parameters", "(LDDS/StringSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_query_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_query_parameters = deholderize<jobjectArray> (_jni, _j_query_parameters, "[Ljava/lang/String;");
  _jni->DeleteLocalRef (_j_query_parameters);
  copyToCxx (_jni, query_parameters, _o_query_parameters);
  _jni->DeleteLocalRef (_o_query_parameters);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1query_1parameters (JNIEnv *_jni, jobject _jthis, jobject query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      jobjectArray _j_query_parameters = deholderize<jobjectArray> (_jni, query_parameters, "[Ljava/lang/String;");
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, _j_query_parameters);
      DDS::ReturnCode_t _c_ret = _this->get_query_parameters (_c_query_parameters);
      copyToJava (_jni, _j_query_parameters, _c_query_parameters);
      holderize (_jni, query_parameters, _j_query_parameters, "[Ljava/lang/String;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_QueryConditionJavaPeer::set_query_parameters (const DDS::StringSeq& query_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _j_query_parameters = 0;
  copyToJava (_jni, _j_query_parameters, query_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_query_parameters", "([Ljava/lang/String;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_query_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1QueryConditionTAOPeer_set_1query_1parameters (JNIEnv *_jni, jobject _jthis, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::ReturnCode_t _c_ret = _this->set_query_parameters (_c_query_parameters);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1sample_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      DDS::SampleStateMask _c_ret = _this->get_sample_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1view_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      DDS::ViewStateMask _c_ret = _this->get_view_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1instance_1state_1mask (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      DDS::InstanceStateMask _c_ret = _this->get_instance_state_mask ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->get_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_DDS__1QueryConditionTAOPeer_get_1trigger_1value (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::QueryCondition_var _this = DDS::QueryCondition::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->get_trigger_value ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: QueryCondition */


/* Begin INTERFACE: DataReader */

void copyToCxx (JNIEnv *jni, DDS::DataReader_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::DataReader::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_DataReaderJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::DataReader_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_DataReaderTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_DataReaderHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::DataReader_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReadCondition_ptr DDS_DataReaderJavaPeer::create_readcondition (DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_readcondition", "(III)LDDS/ReadCondition;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::ReadCondition_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_create_1readcondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_ret = _this->create_readcondition (sample_states, view_states, instance_states);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::QueryCondition_ptr DDS_DataReaderJavaPeer::create_querycondition (DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states, const char * query_expression, const DDS::StringSeq& query_parameters)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_query_expression = 0;
  copyToJava (_jni, _j_query_expression, query_expression, true);
  jobjectArray _j_query_parameters = 0;
  copyToJava (_jni, _j_query_parameters, query_parameters, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_querycondition", "(IIILjava/lang/String;[Ljava/lang/String;)LDDS/QueryCondition;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, sample_states, view_states, instance_states, _j_query_expression, _j_query_parameters);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::QueryCondition_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_create_1querycondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states, jobject query_expression, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      CORBA::String_var _c_query_expression;
      copyToCxx (_jni, _c_query_expression, query_expression);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::QueryCondition_var _c_ret = _this->create_querycondition (sample_states, view_states, instance_states, _c_query_expression.in (), _c_query_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::delete_readcondition (DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_readcondition", "(LDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_delete_1readcondition (JNIEnv *_jni, jobject _jthis, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->delete_readcondition (_c_a_condition.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::delete_contained_entities ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_contained_entities", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::set_qos (const DDS::DataReaderQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/DataReaderQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_qos (DDS::DataReaderQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DataReaderQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DataReaderQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/DataReaderQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DataReaderQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::set_listener (DDS::DataReaderListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::DataReaderListener_var _c_a_listener = DDS::DataReaderListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/DataReaderListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataReaderListener_ptr DDS_DataReaderJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/DataReaderListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReaderListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::TopicDescription_ptr DDS_DataReaderJavaPeer::get_topicdescription ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_topicdescription", "()LDDS/TopicDescription;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::TopicDescription_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_get_1topicdescription (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::TopicDescription_var _c_ret = _this->get_topicdescription ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::Subscriber_ptr DDS_DataReaderJavaPeer::get_subscriber ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_subscriber", "()LDDS/Subscriber;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::Subscriber_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_get_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_sample_rejected_status (DDS::SampleRejectedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/SampleRejectedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/SampleRejectedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_sample_rejected_status", "(LDDS/SampleRejectedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/SampleRejectedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1sample_1rejected_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleRejectedStatus;");
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_rejected_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleRejectedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_liveliness_changed_status (DDS::LivelinessChangedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/LivelinessChangedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/LivelinessChangedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_liveliness_changed_status", "(LDDS/LivelinessChangedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/LivelinessChangedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1liveliness_1changed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessChangedStatus;");
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_changed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessChangedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_requested_deadline_missed_status (DDS::RequestedDeadlineMissedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/RequestedDeadlineMissedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/RequestedDeadlineMissedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_requested_deadline_missed_status", "(LDDS/RequestedDeadlineMissedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1requested_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedDeadlineMissedStatus;");
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_requested_incompatible_qos_status (DDS::RequestedIncompatibleQosStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/RequestedIncompatibleQosStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/RequestedIncompatibleQosStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_requested_incompatible_qos_status", "(LDDS/RequestedIncompatibleQosStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1requested_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedIncompatibleQosStatus;");
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_subscription_matched_status (DDS::SubscriptionMatchedStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/SubscriptionMatchedStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/SubscriptionMatchedStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_subscription_matched_status", "(LDDS/SubscriptionMatchedStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/SubscriptionMatchedStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1subscription_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SubscriptionMatchedStatus;");
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_subscription_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SubscriptionMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_sample_lost_status (DDS::SampleLostStatus& status)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_status = 0;
  copyToJava (_jni, _n_status, status, true);
  jclass _hc_status = findClass (_jni, "DDS/SampleLostStatusHolder");
  jmethodID _hm_status = _jni->GetMethodID (_hc_status, "<init>", "()V");
  jobject _j_status = _jni->NewObject (_hc_status, _hm_status);
  holderize (_jni, _j_status, _n_status, "LDDS/SampleLostStatus;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_sample_lost_status", "(LDDS/SampleLostStatusHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_status);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_status = deholderize<jobject> (_jni, _j_status, "LDDS/SampleLostStatus;");
  _jni->DeleteLocalRef (_j_status);
  copyToCxx (_jni, status, _o_status);
  _jni->DeleteLocalRef (_o_status);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1sample_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleLostStatus;");
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::wait_for_historical_data (const DDS::Duration_t& max_wait)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_max_wait = 0;
  copyToJava (_jni, _j_max_wait, max_wait, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "wait_for_historical_data", "(LDDS/Duration_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_max_wait);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_wait_1for_1historical_1data (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_historical_data (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_matched_publications (DDS::InstanceHandleSeq& publication_handles)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jintArray _n_publication_handles = 0;
  copyToJava (_jni, _n_publication_handles, publication_handles, true);
  jclass _hc_publication_handles = findClass (_jni, "DDS/InstanceHandleSeqHolder");
  jmethodID _hm_publication_handles = _jni->GetMethodID (_hc_publication_handles, "<init>", "()V");
  jobject _j_publication_handles = _jni->NewObject (_hc_publication_handles, _hm_publication_handles);
  holderize (_jni, _j_publication_handles, _n_publication_handles, "[I");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_matched_publications", "(LDDS/InstanceHandleSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_publication_handles);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jintArray _o_publication_handles = deholderize<jintArray> (_jni, _j_publication_handles, "[I");
  _jni->DeleteLocalRef (_j_publication_handles);
  copyToCxx (_jni, publication_handles, _o_publication_handles);
  _jni->DeleteLocalRef (_o_publication_handles);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1matched_1publications (JNIEnv *_jni, jobject _jthis, jobject publication_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jintArray _j_publication_handles = deholderize<jintArray> (_jni, publication_handles, "[I");
      DDS::InstanceHandleSeq _c_publication_handles;
      copyToCxx (_jni, _c_publication_handles, _j_publication_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publications (_c_publication_handles);
      copyToJava (_jni, _j_publication_handles, _c_publication_handles);
      holderize (_jni, publication_handles, _j_publication_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_DataReaderJavaPeer::get_matched_publication_data (DDS::PublicationBuiltinTopicData& publication_data, DDS::InstanceHandle_t publication_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_publication_data = 0;
  copyToJava (_jni, _n_publication_data, publication_data, true);
  jclass _hc_publication_data = findClass (_jni, "DDS/PublicationBuiltinTopicDataHolder");
  jmethodID _hm_publication_data = _jni->GetMethodID (_hc_publication_data, "<init>", "()V");
  jobject _j_publication_data = _jni->NewObject (_hc_publication_data, _hm_publication_data);
  holderize (_jni, _j_publication_data, _n_publication_data, "LDDS/PublicationBuiltinTopicData;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_matched_publication_data", "(LDDS/PublicationBuiltinTopicDataHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_publication_data, publication_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_publication_data = deholderize<jobject> (_jni, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
  _jni->DeleteLocalRef (_j_publication_data);
  copyToCxx (_jni, publication_data, _o_publication_data);
  _jni->DeleteLocalRef (_o_publication_data);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1matched_1publication_1data (JNIEnv *_jni, jobject _jthis, jobject publication_data, jint publication_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      jobject _j_publication_data = deholderize<jobject> (_jni, publication_data, "LDDS/PublicationBuiltinTopicData;");
      DDS::PublicationBuiltinTopicData _c_publication_data;
      copyToCxx (_jni, _c_publication_data, _j_publication_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publication_data (_c_publication_data, publication_handle);
      copyToJava (_jni, _j_publication_data, _c_publication_data);
      holderize (_jni, publication_data, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1DataReaderTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1DataReaderTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::DataReader_var _this = DDS::DataReader::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: DataReader */


/* Begin INTERFACE: Subscriber */

void copyToCxx (JNIEnv *jni, DDS::Subscriber_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = DDS::Subscriber::_unchecked_narrow (c);
    }
  else
    {
      target = new DDS_SubscriberJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const DDS::Subscriber_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "DDS/_SubscriberTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS_SubscriberHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  DDS::Subscriber_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::DataReader_ptr DDS_SubscriberJavaPeer::create_datareader (DDS::TopicDescription_ptr a_topic, const DDS::DataReaderQos& qos, DDS::DataReaderListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_topic = 0;
  DDS::TopicDescription_var _c_a_topic = DDS::TopicDescription::_duplicate (a_topic);
  copyToJava (_jni, _j_a_topic, _c_a_topic, true);
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jobject _j_a_listener = 0;
  DDS::DataReaderListener_var _c_a_listener = DDS::DataReaderListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "create_datareader", "(LDDS/TopicDescription;LDDS/DataReaderQos;LDDS/DataReaderListener;I)LDDS/DataReader;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_a_topic, _j_qos, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReader_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1SubscriberTAOPeer_create_1datareader (JNIEnv *_jni, jobject _jthis, jobject a_topic, jobject qos, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::TopicDescription_var _c_a_topic;
      copyToCxx (_jni, _c_a_topic, a_topic);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::DataReader_var _c_ret = _this->create_datareader (_c_a_topic.in (), _c_qos, _c_a_listener.in (), mask);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::delete_datareader (DDS::DataReader_ptr a_datareader)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_datareader = 0;
  DDS::DataReader_var _c_a_datareader = DDS::DataReader::_duplicate (a_datareader);
  copyToJava (_jni, _j_a_datareader, _c_a_datareader, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_datareader", "(LDDS/DataReader;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_datareader);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_delete_1datareader (JNIEnv *_jni, jobject _jthis, jobject a_datareader)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::DataReader_var _c_a_datareader;
      copyToCxx (_jni, _c_a_datareader, a_datareader);
      DDS::ReturnCode_t _c_ret = _this->delete_datareader (_c_a_datareader.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::delete_contained_entities ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "delete_contained_entities", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DataReader_ptr DDS_SubscriberJavaPeer::lookup_datareader (const char * topic_name)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_topic_name = 0;
  copyToJava (_jni, _j_topic_name, topic_name, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_datareader", "(Ljava/lang/String;)LDDS/DataReader;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid, _j_topic_name);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DataReader_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1SubscriberTAOPeer_lookup_1datareader (JNIEnv *_jni, jobject _jthis, jobject topic_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      CORBA::String_var _c_topic_name;
      copyToCxx (_jni, _c_topic_name, topic_name);
      DDS::DataReader_var _c_ret = _this->lookup_datareader (_c_topic_name.in ());
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::get_datareaders (DDS::DataReaderSeq& readers, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_readers = 0;
  copyToJava (_jni, _n_readers, readers, true);
  jclass _hc_readers = findClass (_jni, "DDS/DataReaderSeqHolder");
  jmethodID _hm_readers = _jni->GetMethodID (_hc_readers, "<init>", "()V");
  jobject _j_readers = _jni->NewObject (_hc_readers, _hm_readers);
  holderize (_jni, _j_readers, _n_readers, "[LDDS/DataReader;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_datareaders", "(LDDS/DataReaderSeqHolder;III)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_readers, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_readers = deholderize<jobjectArray> (_jni, _j_readers, "[LDDS/DataReader;");
  _jni->DeleteLocalRef (_j_readers);
  copyToCxx (_jni, readers, _o_readers);
  _jni->DeleteLocalRef (_o_readers);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_get_1datareaders (JNIEnv *_jni, jobject _jthis, jobject readers, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      jobjectArray _j_readers = deholderize<jobjectArray> (_jni, readers, "[LDDS/DataReader;");
      DDS::DataReaderSeq _c_readers;
      copyToCxx (_jni, _c_readers, _j_readers);
      DDS::ReturnCode_t _c_ret = _this->get_datareaders (_c_readers, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_readers, _c_readers);
      holderize (_jni, readers, _j_readers, "[LDDS/DataReader;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::notify_datareaders ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "notify_datareaders", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_notify_1datareaders (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->notify_datareaders ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::set_qos (const DDS::SubscriberQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_qos", "(LDDS/SubscriberQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::SubscriberQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::get_qos (DDS::SubscriberQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/SubscriberQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/SubscriberQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_qos", "(LDDS/SubscriberQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/SubscriberQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/SubscriberQos;");
      DDS::SubscriberQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/SubscriberQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::set_listener (DDS::SubscriberListener_ptr a_listener, DDS::StatusMask mask)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_a_listener = 0;
  DDS::SubscriberListener_var _c_a_listener = DDS::SubscriberListener::_duplicate (a_listener);
  copyToJava (_jni, _j_a_listener, _c_a_listener, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_listener", "(LDDS/SubscriberListener;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_listener, mask);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::SubscriberListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::SubscriberListener_ptr DDS_SubscriberJavaPeer::get_listener ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_listener", "()LDDS/SubscriberListener;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::SubscriberListener_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1SubscriberTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::SubscriberListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::begin_access ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "begin_access", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_begin_1access (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->begin_access ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::end_access ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "end_access", "()I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_end_1access (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->end_access ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::DomainParticipant_ptr DDS_SubscriberJavaPeer::get_participant ()
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_participant", "()LDDS/DomainParticipant;");
  jobject _j_ret = _jni->CallObjectMethod (globalCallback_, _mid);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  DDS::DomainParticipant_var _c_ret;
  copyToCxx (_jni, _c_ret, _j_ret);
  return _c_ret._retn ();
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1SubscriberTAOPeer_get_1participant (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_ret = _this->get_participant ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::set_default_datareader_qos (const DDS::DataReaderQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_qos = 0;
  copyToJava (_jni, _j_qos, qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "set_default_datareader_qos", "(LDDS/DataReaderQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_set_1default_1datareader_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_default_datareader_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::get_default_datareader_qos (DDS::DataReaderQos& qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_qos = 0;
  copyToJava (_jni, _n_qos, qos, true);
  jclass _hc_qos = findClass (_jni, "DDS/DataReaderQosHolder");
  jmethodID _hm_qos = _jni->GetMethodID (_hc_qos, "<init>", "()V");
  jobject _j_qos = _jni->NewObject (_hc_qos, _hm_qos);
  holderize (_jni, _j_qos, _n_qos, "LDDS/DataReaderQos;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_default_datareader_qos", "(LDDS/DataReaderQosHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_qos = deholderize<jobject> (_jni, _j_qos, "LDDS/DataReaderQos;");
  _jni->DeleteLocalRef (_j_qos);
  copyToCxx (_jni, qos, _o_qos);
  _jni->DeleteLocalRef (_o_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_get_1default_1datareader_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_default_datareader_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t DDS_SubscriberJavaPeer::copy_from_topic_qos (DDS::DataReaderQos& a_datareader_qos, const DDS::TopicQos& a_topic_qos)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_a_datareader_qos = 0;
  copyToJava (_jni, _n_a_datareader_qos, a_datareader_qos, true);
  jclass _hc_a_datareader_qos = findClass (_jni, "DDS/DataReaderQosHolder");
  jmethodID _hm_a_datareader_qos = _jni->GetMethodID (_hc_a_datareader_qos, "<init>", "()V");
  jobject _j_a_datareader_qos = _jni->NewObject (_hc_a_datareader_qos, _hm_a_datareader_qos);
  holderize (_jni, _j_a_datareader_qos, _n_a_datareader_qos, "LDDS/DataReaderQos;");
  jobject _j_a_topic_qos = 0;
  copyToJava (_jni, _j_a_topic_qos, a_topic_qos, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "copy_from_topic_qos", "(LDDS/DataReaderQosHolder;LDDS/TopicQos;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_a_datareader_qos, _j_a_topic_qos);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_a_datareader_qos = deholderize<jobject> (_jni, _j_a_datareader_qos, "LDDS/DataReaderQos;");
  _jni->DeleteLocalRef (_j_a_datareader_qos);
  copyToCxx (_jni, a_datareader_qos, _o_a_datareader_qos);
  _jni->DeleteLocalRef (_o_a_datareader_qos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_copy_1from_1topic_1qos (JNIEnv *_jni, jobject _jthis, jobject a_datareader_qos, jobject a_topic_qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      jobject _j_a_datareader_qos = deholderize<jobject> (_jni, a_datareader_qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_a_datareader_qos;
      copyToCxx (_jni, _c_a_datareader_qos, _j_a_datareader_qos);
      DDS::TopicQos _c_a_topic_qos;
      copyToCxx (_jni, _c_a_topic_qos, a_topic_qos);
      DDS::ReturnCode_t _c_ret = _this->copy_from_topic_qos (_c_a_datareader_qos, _c_a_topic_qos);
      copyToJava (_jni, _j_a_datareader_qos, _c_a_datareader_qos);
      holderize (_jni, a_datareader_qos, _j_a_datareader_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_DDS__1SubscriberTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_DDS__1SubscriberTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      DDS::Subscriber_var _this = DDS::Subscriber::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: Subscriber */

/* End MODULE: DDS */
