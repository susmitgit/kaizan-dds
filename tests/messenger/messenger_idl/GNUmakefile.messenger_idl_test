# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.messenger_idl_test
#
# $Id: gnu.mpd 2179 2013-05-28 22:16:51Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.messenger_idl_test
DEPENDENCY_FILE  = .depend.messenger_idl_test

IDL_DEPENDENCY_FILE1 = .depend.messenger_idl_test_Idl1
IDL_DEPENDENCY_FILE2 = .depend.messenger_idl_test_Idl2

IDL_DEPENDENCY_FILES += \
	.depend.messenger_idl_test_Idl1 \
	.depend.messenger_idl_test_Idl2

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)messenger_idl_test.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)messenger_idl_test

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)messenger_idl_test.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

default_group = \
  MessengerTypeSupportImpl.cpp \
  MessengerJC.cpp \
  MessengerTypeSupportJC.cpp \
  MessengerTypeSupportS.cpp \
  MessengerTypeSupportC.cpp \
  MessengerS.cpp \
  MessengerC.cpp

FILES += \
         $(default_group)

IDL_DEPS_FLAGS1 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS1 = MessengerTypeSupport.idl

IDL_DEPS_FLAGS2 = -DGEN_IDL_MAKE_DEPS
IDL_DEPS2 = Messenger.idl


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lOpenDDS_DCPS_Java -ltao_java -lidl2jni_runtime -lOpenDDS_Dcps -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/messenger_idl_test
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_DCPS_Java tao_java idl2jni_runtime OpenDDS_Dcps TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../../../lib $(if $(ARCH),../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_DCPS_Java tao_java idl2jni_runtime OpenDDS_Dcps TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(java),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif

ifeq ($(java),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: require_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../../../lib $(if $(ARCH),-L../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../../../.. -I../../../../java/idl2jni/runtime -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(JAVA_PLATFORM) -I../../../../java -I../../../../dds
CPPFLAGS     += -DNOMINMAX
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DMESSENGER_IDL_TEST_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo messenger_idl_test will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(java),1)
requires_disabled_macros += java
endif
require_warning:
	@echo messenger_idl_test will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += MessengerTypeSupportS.cpp MessengerTypeSupportC.cpp MessengerTypeSupportC.h MessengerTypeSupportS.h MessengerTypeSupportC.inl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportC.inl" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerTypeSupportC.inl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
MessengerTypeSupportS.cpp MessengerTypeSupportC.cpp MessengerTypeSupportC.h MessengerTypeSupportS.h MessengerTypeSupportC.inl: MessengerTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../../.. -Wb,stub_export_include=messenger_idl_test_Export.h -Wb,stub_export_macro=messenger_idl_test_Export MessengerTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
MessengerTypeSupportS.cpp MessengerTypeSupportC.cpp MessengerTypeSupportC.h MessengerTypeSupportS.h MessengerTypeSupportC.inl: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += MessengerS.cpp MessengerC.cpp MessengerC.h MessengerS.h MessengerC.inl
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Messenger.idl" -nt "MessengerS.cpp" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerC.cpp" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerC.h" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerS.h" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerC.inl" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "MessengerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "MessengerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "MessengerC.inl" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
MessengerS.cpp MessengerC.cpp MessengerC.h MessengerS.h MessengerC.inl: Messenger.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../../.. -Wb,stub_export_include=messenger_idl_test_Export.h -Wb,stub_export_macro=messenger_idl_test_Export Messenger.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
MessengerS.cpp MessengerC.cpp MessengerC.h MessengerS.h MessengerC.inl: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += MessengerTypeSupport.idl MessengerTypeSupportImpl.cpp MessengerTypeSupportImpl.h Messenger/MessageTypeSupportImpl.java
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Messenger.idl" -nt "MessengerTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "Messenger/MessageTypeSupportImpl.java" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "MessengerTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "MessengerTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "MessengerTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(OPENDDS_IDL_DEP))" -nt "Messenger/MessageTypeSupportImpl.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "MessengerTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "MessengerTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "MessengerTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)" -nt "Messenger/MessageTypeSupportImpl.java" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
MessengerTypeSupport.idl MessengerTypeSupportImpl.cpp MessengerTypeSupportImpl.h Messenger/MessageTypeSupportImpl.java: Messenger.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(OPENDDS_IDL_DEP))) $(call ADD_ARCH,../../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",$(OPENDDS_IDL)),$(OPENDDS_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(OPENDDS_IDL)))) -Sa -St -Wb,java -Wb,export_macro=messenger_idl_test_Export Messenger.idl


GENERATED_DIRTY += classes/Messenger/MessageTypeSupportImpl.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageTypeSupportImpl.class: Messenger/MessageTypeSupportImpl.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageTypeSupportImpl.java


GENERATED_DIRTY += classes/Messenger/Message.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/Message.class: Messenger/Message.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/Message.java


GENERATED_DIRTY += classes/Messenger/MessageHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageHolder.class: Messenger/MessageHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageHolder.java


GENERATED_DIRTY += classes/Messenger/MessageHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageHelper.class: Messenger/MessageHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageHelper.java


GENERATED_DIRTY += classes/Messenger/MessageSeqHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageSeqHolder.class: Messenger/MessageSeqHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageSeqHolder.java


GENERATED_DIRTY += classes/Messenger/MessageSeqHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageSeqHelper.class: Messenger/MessageSeqHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageSeqHelper.java


GENERATED_DIRTY += classes/Messenger/MessageTypeSupport.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageTypeSupport.class: Messenger/MessageTypeSupport.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageTypeSupport.java


GENERATED_DIRTY += classes/Messenger/MessageTypeSupportHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageTypeSupportHolder.class: Messenger/MessageTypeSupportHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageTypeSupportHolder.java


GENERATED_DIRTY += classes/Messenger/MessageTypeSupportHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageTypeSupportHelper.class: Messenger/MessageTypeSupportHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageTypeSupportHelper.java


GENERATED_DIRTY += classes/Messenger/MessageTypeSupportOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageTypeSupportOperations.class: Messenger/MessageTypeSupportOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageTypeSupportOperations.java


GENERATED_DIRTY += classes/Messenger/_MessageTypeSupportLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageTypeSupportLocalBase.class: Messenger/_MessageTypeSupportLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageTypeSupportLocalBase.java


GENERATED_DIRTY += classes/Messenger/_MessageTypeSupportTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageTypeSupportTAOPeer.class: Messenger/_MessageTypeSupportTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageTypeSupportTAOPeer.java


GENERATED_DIRTY += classes/Messenger/MessageDataWriter.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataWriter.class: Messenger/MessageDataWriter.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataWriter.java


GENERATED_DIRTY += classes/Messenger/MessageDataWriterHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataWriterHolder.class: Messenger/MessageDataWriterHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataWriterHolder.java


GENERATED_DIRTY += classes/Messenger/MessageDataWriterHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataWriterHelper.class: Messenger/MessageDataWriterHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataWriterHelper.java


GENERATED_DIRTY += classes/Messenger/MessageDataWriterOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataWriterOperations.class: Messenger/MessageDataWriterOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataWriterOperations.java


GENERATED_DIRTY += classes/Messenger/_MessageDataWriterLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageDataWriterLocalBase.class: Messenger/_MessageDataWriterLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageDataWriterLocalBase.java


GENERATED_DIRTY += classes/Messenger/_MessageDataWriterTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageDataWriterTAOPeer.class: Messenger/_MessageDataWriterTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageDataWriterTAOPeer.java


GENERATED_DIRTY += classes/Messenger/MessageDataReader.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataReader.class: Messenger/MessageDataReader.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataReader.java


GENERATED_DIRTY += classes/Messenger/MessageDataReaderHolder.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataReaderHolder.class: Messenger/MessageDataReaderHolder.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataReaderHolder.java


GENERATED_DIRTY += classes/Messenger/MessageDataReaderHelper.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataReaderHelper.class: Messenger/MessageDataReaderHelper.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataReaderHelper.java


GENERATED_DIRTY += classes/Messenger/MessageDataReaderOperations.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/MessageDataReaderOperations.class: Messenger/MessageDataReaderOperations.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/MessageDataReaderOperations.java


GENERATED_DIRTY += classes/Messenger/_MessageDataReaderLocalBase.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageDataReaderLocalBase.class: Messenger/_MessageDataReaderLocalBase.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageDataReaderLocalBase.java


GENERATED_DIRTY += classes/Messenger/_MessageDataReaderTAOPeer.class
OBJS_DEPEND_ON_GENERATED = 1
classes/Messenger/_MessageDataReaderTAOPeer.class: Messenger/_MessageDataReaderTAOPeer.java
	$(if $(findstring ",perl),perl,$(call ADD_QUOTE,$(call ADD_ARCH,perl))) ../../../../java/build_scripts/javac_wrapper.pl -sourcepath . -d classes -classpath . -classpath ../../../../lib/i2jrt.jar -classpath ../../../../lib/OpenDDS_DCPS.jar Messenger/_MessageDataReaderTAOPeer.java


DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += MessengerTypeSupportJC.cpp MessengerTypeSupportJC.h Messenger/MessageSeqHolder.java Messenger/MessageSeqHelper.java Messenger/MessageTypeSupport.java Messenger/MessageTypeSupportHolder.java Messenger/MessageTypeSupportHelper.java Messenger/MessageTypeSupportOperations.java Messenger/_MessageTypeSupportLocalBase.java Messenger/_MessageTypeSupportTAOPeer.java Messenger/MessageDataWriter.java Messenger/MessageDataWriterHolder.java Messenger/MessageDataWriterHelper.java Messenger/MessageDataWriterOperations.java Messenger/_MessageDataWriterLocalBase.java Messenger/_MessageDataWriterTAOPeer.java Messenger/MessageDataReader.java Messenger/MessageDataReaderHolder.java Messenger/MessageDataReaderHelper.java Messenger/MessageDataReaderOperations.java Messenger/_MessageDataReaderLocalBase.java Messenger/_MessageDataReaderTAOPeer.java
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportJC.cpp" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "MessengerTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageSeqHolder.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageSeqHelper.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageTypeSupport.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataWriter.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataReader.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/MessageDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "MessengerTypeSupport.idl" -nt "Messenger/_MessageDataReaderTAOPeer.java" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "MessengerTypeSupportJC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "MessengerTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageTypeSupport.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataWriter.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataReader.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/_MessageDataReaderTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "MessengerTypeSupportJC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "MessengerTypeSupportJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageSeqHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageSeqHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageTypeSupport.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageTypeSupportHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageTypeSupportHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageTypeSupportOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageTypeSupportLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageTypeSupportTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataWriter.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataWriterHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataWriterHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataWriterOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageDataWriterLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageDataWriterTAOPeer.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataReader.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataReaderHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataReaderHelper.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/MessageDataReaderOperations.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageDataReaderLocalBase.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,Messenger/Message.java)" -nt "Messenger/_MessageDataReaderTAOPeer.java" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
MessengerTypeSupportJC.cpp MessengerTypeSupportJC.h Messenger/MessageSeqHolder.java Messenger/MessageSeqHelper.java Messenger/MessageTypeSupport.java Messenger/MessageTypeSupportHolder.java Messenger/MessageTypeSupportHelper.java Messenger/MessageTypeSupportOperations.java Messenger/_MessageTypeSupportLocalBase.java Messenger/_MessageTypeSupportTAOPeer.java Messenger/MessageDataWriter.java Messenger/MessageDataWriterHolder.java Messenger/MessageDataWriterHelper.java Messenger/MessageDataWriterOperations.java Messenger/_MessageDataWriterLocalBase.java Messenger/_MessageDataWriterTAOPeer.java Messenger/MessageDataReader.java Messenger/MessageDataReaderHolder.java Messenger/MessageDataReaderHelper.java Messenger/MessageDataReaderOperations.java Messenger/_MessageDataReaderLocalBase.java Messenger/_MessageDataReaderTAOPeer.java: MessengerTypeSupport.idl $(call ADD_ARCH,../../../../bin/idl2jni) $(call ADD_ARCH,Messenger/Message.java)
	$(if $(findstring ",../../../../bin/idl2jni),../../../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../../../bin/idl2jni))) -Wb,native_lib_name=messenger_idl_test -SS -I../../../.. -I$(TAO_ROOT) -Wb,stub_export_include=messenger_idl_test_Export.h -Wb,stub_export_macro=messenger_idl_test_Export MessengerTypeSupport.idl


GENERATED_DIRTY += MessengerJC.cpp MessengerJC.h Messenger/Message.java Messenger/MessageHolder.java Messenger/MessageHelper.java
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Messenger.idl" -nt "MessengerJC.cpp" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "MessengerJC.h" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "Messenger/Message.java" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "Messenger/MessageHolder.java" 2> /dev/null || $(TEST_EXE) "Messenger.idl" -nt "Messenger/MessageHelper.java" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "MessengerJC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "MessengerJC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/Message.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageHolder.java" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../bin/idl2jni)" -nt "Messenger/MessageHelper.java" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
MessengerJC.cpp MessengerJC.h Messenger/Message.java Messenger/MessageHolder.java Messenger/MessageHelper.java: Messenger.idl $(call ADD_ARCH,../../../../bin/idl2jni)
	$(if $(findstring ",../../../../bin/idl2jni),../../../../bin/idl2jni,$(call ADD_QUOTE,$(call ADD_ARCH,../../../../bin/idl2jni))) -Wb,native_lib_name=messenger_idl_test -SS -I../../../.. -I$(TAO_ROOT) -Wb,stub_export_include=messenger_idl_test_Export.h -Wb,stub_export_macro=messenger_idl_test_Export Messenger.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += MessengerTypeSupport$(IDL_CLIENT_HDR_EXT) Messenger$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = MessengerTypeSupportImpl.cpp MessengerJC.cpp MessengerTypeSupportJC.cpp MessengerTypeSupportS.cpp MessengerTypeSupportC.cpp MessengerS.cpp MessengerC.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerTypeSupportJC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:MessengerJC.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;
	@$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old
	@cp $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE2) \
	$(IDL_DEPS_FLAGS2) -t gnuidl -DMAKEDEPEND $(IDL_DEPS2)
	@if cmp -s $(IDL_DEPENDENCY_FILE2) $(IDL_DEPENDENCY_FILE2)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS2)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS2)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE2)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif
	-rm -rf classes ; rm -rf ./messenger_idl_test.jar

__prebuild__:
ifeq ($(java),1)
	@mkdir -p classes 2> /dev/null || cat /dev/null > /dev/null
endif

all: __postbuild__

__postbuild__: $(VLIBS)

__postbuild__:
ifeq ($(java),1)
	@"$(JAVA_HOME)/bin/jar" -cf ./messenger_idl_test.jar -C classes .
endif


.PHONY: install
install: __postbuild__
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


idl_stubs: _MessageTypeSupportTAOPeer.java

